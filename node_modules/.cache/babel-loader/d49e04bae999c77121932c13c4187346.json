{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\n\nvar InteractionsClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function InteractionsClass(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._options = options;\n    logger.debug('Interactions Options', this._options);\n    this._pluggables = {};\n  }\n\n  InteractionsClass.prototype.getModuleName = function () {\n    return 'Interactions';\n  };\n  /**\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   * @return {InteractionsOptions} - The current configuration\n   */\n\n\n  InteractionsClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var opt = options ? options.Interactions || options : {};\n    logger.debug('configure Interactions', {\n      opt: opt\n    });\n    this._options = __assign(__assign({\n      bots: {}\n    }, opt), opt.Interactions);\n    var aws_bots_config = this._options.aws_bots_config;\n    var bots_config = this._options.bots;\n\n    if (!Object.keys(bots_config).length && aws_bots_config) {\n      // Convert aws_bots_config to bots object\n      if (Array.isArray(aws_bots_config)) {\n        aws_bots_config.forEach(function (bot) {\n          _this._options.bots[bot.name] = bot;\n        });\n      }\n    } // configure bots to their specific providers\n\n\n    Object.keys(bots_config).forEach(function (botKey) {\n      var _a;\n\n      var bot = bots_config[botKey];\n      var providerName = bot.providerName || 'AWSLexProvider'; // add default provider if required\n\n      if (!_this._pluggables.AWSLexProvider && providerName === 'AWSLexProvider') {\n        _this._pluggables.AWSLexProvider = new AWSLexProvider();\n      } // configure bot with it's respective provider\n\n\n      if (_this._pluggables[providerName]) {\n        _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n      } else {\n        logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n      }\n    });\n    return this._options;\n  };\n\n  InteractionsClass.prototype.addPluggable = function (pluggable) {\n    var _this = this;\n\n    if (pluggable && pluggable.getCategory() === 'Interactions') {\n      if (!this._pluggables[pluggable.getProviderName()]) {\n        // configure bots for the new plugin\n        Object.keys(this._options.bots).filter(function (botKey) {\n          return _this._options.bots[botKey].providerName === pluggable.getProviderName();\n        }).forEach(function (botKey) {\n          var _a;\n\n          var bot = _this._options.bots[botKey];\n          pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n        });\n        this._pluggables[pluggable.getProviderName()] = pluggable;\n        return;\n      } else {\n        throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n      }\n    }\n  };\n\n  InteractionsClass.prototype.send = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var botProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._options.bots || !this._options.bots[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n            if (!this._pluggables[botProvider]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?')];\n            }\n\n            return [4\n            /*yield*/\n            , this._pluggables[botProvider].sendMessage(botname, message)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  InteractionsClass.prototype.onComplete = function (botname, callback) {\n    if (!this._options.bots || !this._options.bots[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n    if (!this._pluggables[botProvider]) {\n      throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n    }\n\n    this._pluggables[botProvider].onComplete(botname, callback);\n  };\n\n  return InteractionsClass;\n}();\n\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","AWSLexProvider","logger","options","_options","debug","_pluggables","InteractionsClass","opt","Interactions","__assign","bots","aws_bots_config","bots_config","Object","keys","length","Array","isArray","forEach","_this","bot","name","botKey","providerName","configure","_a","pluggable","getCategory","getProviderName","filter","Error","botname","message","Promise","reject","botProvider","sendMessage","callback","onComplete","register"],"sources":["/home/dalienst/node_modules/@aws-amplify/interactions/src/Interactions.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n\tInteractionsOptions,\n\tInteractionsProviders,\n\tInteractionsProvider,\n\tInteractionsMessage,\n\tInteractionsResponse,\n} from './types';\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nconst logger = new Logger('Interactions');\n\nexport class InteractionsClass {\n\tprivate _options: InteractionsOptions;\n\n\tprivate _pluggables: InteractionsProviders;\n\n\t/**\n\t * Initialize PubSub with AWS configurations\n\t *\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t */\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tthis._options = options;\n\t\tlogger.debug('Interactions Options', this._options);\n\t\tthis._pluggables = {};\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Interactions';\n\t}\n\n\t/**\n\t *\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t * @return {InteractionsOptions} - The current configuration\n\t */\n\tpublic configure(options: InteractionsOptions): InteractionsOptions {\n\t\tconst opt = options ? options.Interactions || options : {};\n\t\tlogger.debug('configure Interactions', { opt });\n\t\tthis._options = { bots: {}, ...opt, ...opt.Interactions };\n\n\t\tconst aws_bots_config = this._options.aws_bots_config;\n\t\tconst bots_config = this._options.bots;\n\n\t\tif (!Object.keys(bots_config).length && aws_bots_config) {\n\t\t\t// Convert aws_bots_config to bots object\n\t\t\tif (Array.isArray(aws_bots_config)) {\n\t\t\t\taws_bots_config.forEach(bot => {\n\t\t\t\t\tthis._options.bots[bot.name] = bot;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// configure bots to their specific providers\n\t\tObject.keys(bots_config).forEach(botKey => {\n\t\t\tconst bot = bots_config[botKey];\n\t\t\tconst providerName = bot.providerName || 'AWSLexProvider';\n\n\t\t\t// add default provider if required\n\t\t\tif (\n\t\t\t\t!this._pluggables.AWSLexProvider &&\n\t\t\t\tproviderName === 'AWSLexProvider'\n\t\t\t) {\n\t\t\t\tthis._pluggables.AWSLexProvider = new AWSLexProvider();\n\t\t\t}\n\n\t\t\t// configure bot with it's respective provider\n\t\t\tif (this._pluggables[providerName]) {\n\t\t\t\tthis._pluggables[providerName].configure({ [bot.name]: bot });\n\t\t\t} else {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`bot ${bot.name} was not configured as ${providerName} provider was not found`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\treturn this._options;\n\t}\n\n\tpublic addPluggable(pluggable: InteractionsProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Interactions') {\n\t\t\tif (!this._pluggables[pluggable.getProviderName()]) {\n\t\t\t\t// configure bots for the new plugin\n\t\t\t\tObject.keys(this._options.bots)\n\t\t\t\t\t.filter(\n\t\t\t\t\t\tbotKey =>\n\t\t\t\t\t\t\tthis._options.bots[botKey].providerName ===\n\t\t\t\t\t\t\tpluggable.getProviderName()\n\t\t\t\t\t)\n\t\t\t\t\t.forEach(botKey => {\n\t\t\t\t\t\tconst bot = this._options.bots[botKey];\n\t\t\t\t\t\tpluggable.configure({ [bot.name]: bot });\n\t\t\t\t\t});\n\n\t\t\t\tthis._pluggables[pluggable.getProviderName()] = pluggable;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Pluggable ' + pluggable.getProviderName() + ' already plugged'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: string\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: InteractionsMessage\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: object\n\t): Promise<InteractionsResponse>;\n\tpublic async send(\n\t\tbotname: string,\n\t\tmessage: string | object\n\t): Promise<InteractionsResponse> {\n\t\tif (!this._options.bots || !this._options.bots[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\n\t\tconst botProvider =\n\t\t\tthis._options.bots[botname].providerName || 'AWSLexProvider';\n\n\t\tif (!this._pluggables[botProvider]) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'Bot ' +\n\t\t\t\t\tbotProvider +\n\t\t\t\t\t' does not have valid pluggin did you try addPluggable first?'\n\t\t\t);\n\t\t}\n\t\treturn await this._pluggables[botProvider].sendMessage(botname, message);\n\t}\n\n\tpublic onComplete(\n\t\tbotname: string,\n\t\tcallback: (err, confirmation) => void\n\t): void {\n\t\tif (!this._options.bots || !this._options.bots[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tconst botProvider =\n\t\t\tthis._options.bots[botname].providerName || 'AWSLexProvider';\n\n\t\tif (!this._pluggables[botProvider]) {\n\t\t\tthrow new Error(\n\t\t\t\t'Bot ' +\n\t\t\t\t\tbotProvider +\n\t\t\t\t\t' does not have valid pluggin did you try addPluggable first?'\n\t\t\t);\n\t\t}\n\t\tthis._pluggables[botProvider].onComplete(botname, callback);\n\t}\n}\n\nexport const Interactions = new InteractionsClass();\nAmplify.register(Interactions);\n"]},"metadata":{},"sourceType":"module"}
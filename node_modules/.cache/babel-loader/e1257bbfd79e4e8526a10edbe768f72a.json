{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { LazyJsonString as __LazyJsonString } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1PutEventsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/events\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.eventList !== undefined && input.eventList !== null && {\n            eventList: serializeAws_restJson1EventList(input.eventList, context)\n          }), input.sessionId !== undefined && input.sessionId !== null && {\n            sessionId: input.sessionId\n          }), input.trackingId !== undefined && input.trackingId !== null && {\n            trackingId: input.trackingId\n          }), input.userId !== undefined && input.userId !== null && {\n            userId: input.userId\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutItemsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/items\";\n          body = JSON.stringify(__assign(__assign({}, input.datasetArn !== undefined && input.datasetArn !== null && {\n            datasetArn: input.datasetArn\n          }), input.items !== undefined && input.items !== null && {\n            items: serializeAws_restJson1ItemList(input.items, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutUsersCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/users\";\n          body = JSON.stringify(__assign(__assign({}, input.datasetArn !== undefined && input.datasetArn !== null && {\n            datasetArn: input.datasetArn\n          }), input.users !== undefined && input.users !== null && {\n            users: serializeAws_restJson1UserList(input.users, context)\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PutEventsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1PutEventsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1PutEventsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidInputException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.personalizeevents#InvalidInputException\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1PutItemsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1PutItemsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1PutItemsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidInputException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.personalizeevents#InvalidInputException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.personalizeevents#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1PutUsersCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1PutUsersCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1PutUsersCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidInputException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.personalizeevents#InvalidInputException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.personalizeevents#ResourceNotFoundException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidInputExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidInputException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1ResourceNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ResourceNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar serializeAws_restJson1Event = function (input, context) {\n  return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.eventId !== undefined && input.eventId !== null && {\n    eventId: input.eventId\n  }), input.eventType !== undefined && input.eventType !== null && {\n    eventType: input.eventType\n  }), input.eventValue !== undefined && input.eventValue !== null && {\n    eventValue: input.eventValue\n  }), input.impression !== undefined && input.impression !== null && {\n    impression: serializeAws_restJson1Impression(input.impression, context)\n  }), input.itemId !== undefined && input.itemId !== null && {\n    itemId: input.itemId\n  }), input.properties !== undefined && input.properties !== null && {\n    properties: __LazyJsonString.fromObject(input.properties)\n  }), input.recommendationId !== undefined && input.recommendationId !== null && {\n    recommendationId: input.recommendationId\n  }), input.sentAt !== undefined && input.sentAt !== null && {\n    sentAt: Math.round(input.sentAt.getTime() / 1000)\n  });\n};\n\nvar serializeAws_restJson1EventList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1Event(entry, context);\n  });\n};\n\nvar serializeAws_restJson1Impression = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar serializeAws_restJson1Item = function (input, context) {\n  return __assign(__assign({}, input.itemId !== undefined && input.itemId !== null && {\n    itemId: input.itemId\n  }), input.properties !== undefined && input.properties !== null && {\n    properties: __LazyJsonString.fromObject(input.properties)\n  });\n};\n\nvar serializeAws_restJson1ItemList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1Item(entry, context);\n  });\n};\n\nvar serializeAws_restJson1User = function (input, context) {\n  return __assign(__assign({}, input.properties !== undefined && input.properties !== null && {\n    properties: __LazyJsonString.fromObject(input.properties)\n  }), input.userId !== undefined && input.userId !== null && {\n    userId: input.userId\n  });\n};\n\nvar serializeAws_restJson1UserList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return serializeAws_restJson1User(entry, context);\n  });\n};\n\nvar deserializeMetadata = function (output) {\n  var _a;\n\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\n\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\n\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\n\n\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n\n    return cleanValue;\n  };\n\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};","map":{"version":3,"mappings":"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","names":["HttpRequest","__HttpRequest","LazyJsonString","__LazyJsonString","serializeAws_restJson1PutEventsCommand","input","context","headers","resolvedPath","body","JSON","stringify","__assign","eventList","undefined","serializeAws_restJson1EventList","sessionId","trackingId","userId","endpoint","_a","_c","hostname","_b","protocol","port","method","path","serializeAws_restJson1PutItemsCommand","datasetArn","items","serializeAws_restJson1ItemList","serializeAws_restJson1PutUsersCommand","users","serializeAws_restJson1UserList","deserializeAws_restJson1PutEventsCommand","output","statusCode","deserializeAws_restJson1PutEventsCommandError","contents","$metadata","deserializeMetadata","collectBody","Promise","resolve","parseBody","parsedOutput","_d","_e","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1InvalidInputExceptionResponse","response","name","parsedBody","code","Code","message","Message","$fault","reject","Object","assign","Error","deserializeAws_restJson1PutItemsCommand","deserializeAws_restJson1PutItemsCommandError","_f","deserializeAws_restJson1ResourceNotFoundExceptionResponse","deserializeAws_restJson1PutUsersCommand","deserializeAws_restJson1PutUsersCommandError","data","serializeAws_restJson1Event","eventId","eventType","eventValue","impression","serializeAws_restJson1Impression","itemId","properties","fromObject","recommendationId","sentAt","Math","round","getTime","filter","e","map","entry","serializeAws_restJson1Item","serializeAws_restJson1User","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","isSerializableHeaderValue","value","getOwnPropertyNames","includes","length","size","encoded","parse","findKey","object","key","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey"],"sources":["/home/dalienst/node_modules/@aws-sdk/client-personalize-events/protocols/Aws_restJson1.ts"],"sourcesContent":["import { PutEventsCommandInput, PutEventsCommandOutput } from \"../commands/PutEventsCommand\";\nimport { PutItemsCommandInput, PutItemsCommandOutput } from \"../commands/PutItemsCommand\";\nimport { PutUsersCommandInput, PutUsersCommandOutput } from \"../commands/PutUsersCommand\";\nimport { Event, InvalidInputException, Item, ResourceNotFoundException, User } from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { LazyJsonString as __LazyJsonString, SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport const serializeAws_restJson1PutEventsCommand = async (\n  input: PutEventsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/events\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.eventList !== undefined &&\n      input.eventList !== null && { eventList: serializeAws_restJson1EventList(input.eventList, context) }),\n    ...(input.sessionId !== undefined && input.sessionId !== null && { sessionId: input.sessionId }),\n    ...(input.trackingId !== undefined && input.trackingId !== null && { trackingId: input.trackingId }),\n    ...(input.userId !== undefined && input.userId !== null && { userId: input.userId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutItemsCommand = async (\n  input: PutItemsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/items\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.datasetArn !== undefined && input.datasetArn !== null && { datasetArn: input.datasetArn }),\n    ...(input.items !== undefined &&\n      input.items !== null && { items: serializeAws_restJson1ItemList(input.items, context) }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutUsersCommand = async (\n  input: PutUsersCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/users\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.datasetArn !== undefined && input.datasetArn !== null && { datasetArn: input.datasetArn }),\n    ...(input.users !== undefined &&\n      input.users !== null && { users: serializeAws_restJson1UserList(input.users, context) }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const deserializeAws_restJson1PutEventsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutEventsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutEventsCommandError(output, context);\n  }\n  const contents: PutEventsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutEventsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutEventsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidInputException\":\n    case \"com.amazonaws.personalizeevents#InvalidInputException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutItemsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutItemsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutItemsCommandError(output, context);\n  }\n  const contents: PutItemsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutItemsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutItemsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidInputException\":\n    case \"com.amazonaws.personalizeevents#InvalidInputException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.personalizeevents#ResourceNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutUsersCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutUsersCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutUsersCommandError(output, context);\n  }\n  const contents: PutUsersCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutUsersCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutUsersCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidInputException\":\n    case \"com.amazonaws.personalizeevents#InvalidInputException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidInputExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.personalizeevents#ResourceNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restJson1InvalidInputExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidInputException> => {\n  const contents: InvalidInputException = {\n    name: \"InvalidInputException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ResourceNotFoundException> => {\n  const contents: ResourceNotFoundException = {\n    name: \"ResourceNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst serializeAws_restJson1Event = (input: Event, context: __SerdeContext): any => {\n  return {\n    ...(input.eventId !== undefined && input.eventId !== null && { eventId: input.eventId }),\n    ...(input.eventType !== undefined && input.eventType !== null && { eventType: input.eventType }),\n    ...(input.eventValue !== undefined && input.eventValue !== null && { eventValue: input.eventValue }),\n    ...(input.impression !== undefined &&\n      input.impression !== null && { impression: serializeAws_restJson1Impression(input.impression, context) }),\n    ...(input.itemId !== undefined && input.itemId !== null && { itemId: input.itemId }),\n    ...(input.properties !== undefined &&\n      input.properties !== null && { properties: __LazyJsonString.fromObject(input.properties) }),\n    ...(input.recommendationId !== undefined &&\n      input.recommendationId !== null && { recommendationId: input.recommendationId }),\n    ...(input.sentAt !== undefined && input.sentAt !== null && { sentAt: Math.round(input.sentAt.getTime() / 1000) }),\n  };\n};\n\nconst serializeAws_restJson1EventList = (input: Event[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1Event(entry, context);\n    });\n};\n\nconst serializeAws_restJson1Impression = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst serializeAws_restJson1Item = (input: Item, context: __SerdeContext): any => {\n  return {\n    ...(input.itemId !== undefined && input.itemId !== null && { itemId: input.itemId }),\n    ...(input.properties !== undefined &&\n      input.properties !== null && { properties: __LazyJsonString.fromObject(input.properties) }),\n  };\n};\n\nconst serializeAws_restJson1ItemList = (input: Item[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1Item(entry, context);\n    });\n};\n\nconst serializeAws_restJson1User = (input: User, context: __SerdeContext): any => {\n  return {\n    ...(input.properties !== undefined &&\n      input.properties !== null && { properties: __LazyJsonString.fromObject(input.properties) }),\n    ...(input.userId !== undefined && input.userId !== null && { userId: input.userId }),\n  };\n};\n\nconst serializeAws_restJson1UserList = (input: User[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1User(entry, context);\n    });\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nconst loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {\n  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n\n  const sanitizeErrorCode = (rawValue: string): string => {\n    let cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};\n"]},"metadata":{},"sourceType":"module"}
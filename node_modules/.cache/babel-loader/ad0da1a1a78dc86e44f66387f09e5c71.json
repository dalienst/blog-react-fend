{"ast":null,"code":"/**\n * Make a copy of a transform\n * @param tr\n */\nexport function cloneTransform(tr) {\n  const newTransform = tr.clone(); // Work around mapbox bug - this value is not assigned in clone(), only in resize()\n\n  newTransform.pixelsToGLUnits = tr.pixelsToGLUnits;\n  return newTransform;\n}\n/**\n * Capture a transform's current state\n * @param transform\n * @returns descriptor of the view state\n */\n\nexport function transformToViewState(tr) {\n  return {\n    longitude: tr.center.lng,\n    latitude: tr.center.lat,\n    zoom: tr.zoom,\n    pitch: tr.pitch,\n    bearing: tr.bearing,\n    padding: tr.padding\n  };\n}\n/* eslint-disable complexity */\n\n/**\n * Mutate a transform to match the given view state\n * @param transform\n * @param viewState\n * @returns true if the transform has changed\n */\n\nexport function applyViewStateToTransform(tr, props) {\n  const v = props.viewState || props;\n  let changed = false;\n\n  if ('longitude' in v && 'latitude' in v) {\n    const center = tr.center; // @ts-ignore\n\n    tr.center = new center.constructor(v.longitude, v.latitude);\n    changed = changed || center !== tr.center;\n  }\n\n  if ('zoom' in v) {\n    const zoom = tr.zoom;\n    tr.zoom = v.zoom;\n    changed = changed || zoom !== tr.zoom;\n  }\n\n  if ('bearing' in v) {\n    const bearing = tr.bearing;\n    tr.bearing = v.bearing;\n    changed = changed || bearing !== tr.bearing;\n  }\n\n  if ('pitch' in v) {\n    const pitch = tr.pitch;\n    tr.pitch = v.pitch;\n    changed = changed || pitch !== tr.pitch;\n  }\n\n  if (v.padding && !tr.isPaddingEqual(v.padding)) {\n    changed = true;\n    tr.padding = v.padding;\n  }\n\n  return changed;\n}","map":{"version":3,"mappings":"AAGA;;;;AAIA,OAAM,SAAUA,cAAV,CAAyBC,EAAzB,EAAsC;AAC1C,QAAMC,YAAY,GAAGD,EAAE,CAACE,KAAH,EAArB,CAD0C,CAE1C;;AACAD,cAAY,CAACE,eAAb,GAA+BH,EAAE,CAACG,eAAlC;AACA,SAAOF,YAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUG,oBAAV,CAA+BJ,EAA/B,EAA4C;AAChD,SAAO;AACLK,aAAS,EAAEL,EAAE,CAACM,MAAH,CAAUC,GADhB;AAELC,YAAQ,EAAER,EAAE,CAACM,MAAH,CAAUG,GAFf;AAGLC,QAAI,EAAEV,EAAE,CAACU,IAHJ;AAILC,SAAK,EAAEX,EAAE,CAACW,KAJL;AAKLC,WAAO,EAAEZ,EAAE,CAACY,OALP;AAMLC,WAAO,EAAEb,EAAE,CAACa;AANP,GAAP;AAQD;AAED;;AACA;;;;;;;AAMA,OAAM,SAAUC,yBAAV,CAAoCd,EAApC,EAAmDe,KAAnD,EAAqE;AACzE,QAAMC,CAAC,GAAuBD,KAAK,CAACE,SAAN,IAAmBF,KAAjD;AACA,MAAIG,OAAO,GAAG,KAAd;;AAEA,MAAI,eAAeF,CAAf,IAAoB,cAAcA,CAAtC,EAAyC;AACvC,UAAMV,MAAM,GAAGN,EAAE,CAACM,MAAlB,CADuC,CAEvC;;AACAN,MAAE,CAACM,MAAH,GAAY,IAAIA,MAAM,CAACa,WAAX,CAAuBH,CAAC,CAACX,SAAzB,EAAoCW,CAAC,CAACR,QAAtC,CAAZ;AACAU,WAAO,GAAGA,OAAO,IAAIZ,MAAM,KAAKN,EAAE,CAACM,MAAnC;AACD;;AACD,MAAI,UAAUU,CAAd,EAAiB;AACf,UAAMN,IAAI,GAAGV,EAAE,CAACU,IAAhB;AACAV,MAAE,CAACU,IAAH,GAAUM,CAAC,CAACN,IAAZ;AACAQ,WAAO,GAAGA,OAAO,IAAIR,IAAI,KAAKV,EAAE,CAACU,IAAjC;AACD;;AACD,MAAI,aAAaM,CAAjB,EAAoB;AAClB,UAAMJ,OAAO,GAAGZ,EAAE,CAACY,OAAnB;AACAZ,MAAE,CAACY,OAAH,GAAaI,CAAC,CAACJ,OAAf;AACAM,WAAO,GAAGA,OAAO,IAAIN,OAAO,KAAKZ,EAAE,CAACY,OAApC;AACD;;AACD,MAAI,WAAWI,CAAf,EAAkB;AAChB,UAAML,KAAK,GAAGX,EAAE,CAACW,KAAjB;AACAX,MAAE,CAACW,KAAH,GAAWK,CAAC,CAACL,KAAb;AACAO,WAAO,GAAGA,OAAO,IAAIP,KAAK,KAAKX,EAAE,CAACW,KAAlC;AACD;;AACD,MAAIK,CAAC,CAACH,OAAF,IAAa,CAACb,EAAE,CAACoB,cAAH,CAAkBJ,CAAC,CAACH,OAApB,CAAlB,EAAgD;AAC9CK,WAAO,GAAG,IAAV;AACAlB,MAAE,CAACa,OAAH,GAAaG,CAAC,CAACH,OAAf;AACD;;AACD,SAAOK,OAAP;AACD","names":["cloneTransform","tr","newTransform","clone","pixelsToGLUnits","transformToViewState","longitude","center","lng","latitude","lat","zoom","pitch","bearing","padding","applyViewStateToTransform","props","v","viewState","changed","constructor","isPaddingEqual"],"sources":["/home/dalienst/node_modules/react-map-gl/src/utils/transform.ts"],"sourcesContent":["import type {MapboxProps} from '../mapbox/mapbox';\nimport type {Transform, ViewState} from '../types';\n\n/**\n * Make a copy of a transform\n * @param tr\n */\nexport function cloneTransform(tr: Transform): Transform {\n  const newTransform = tr.clone();\n  // Work around mapbox bug - this value is not assigned in clone(), only in resize()\n  newTransform.pixelsToGLUnits = tr.pixelsToGLUnits;\n  return newTransform;\n}\n\n/**\n * Capture a transform's current state\n * @param transform\n * @returns descriptor of the view state\n */\nexport function transformToViewState(tr: Transform): ViewState {\n  return {\n    longitude: tr.center.lng,\n    latitude: tr.center.lat,\n    zoom: tr.zoom,\n    pitch: tr.pitch,\n    bearing: tr.bearing,\n    padding: tr.padding\n  };\n}\n\n/* eslint-disable complexity */\n/**\n * Mutate a transform to match the given view state\n * @param transform\n * @param viewState\n * @returns true if the transform has changed\n */\nexport function applyViewStateToTransform(tr: Transform, props: MapboxProps): boolean {\n  const v: Partial<ViewState> = props.viewState || props;\n  let changed = false;\n\n  if ('longitude' in v && 'latitude' in v) {\n    const center = tr.center;\n    // @ts-ignore\n    tr.center = new center.constructor(v.longitude, v.latitude);\n    changed = changed || center !== tr.center;\n  }\n  if ('zoom' in v) {\n    const zoom = tr.zoom;\n    tr.zoom = v.zoom;\n    changed = changed || zoom !== tr.zoom;\n  }\n  if ('bearing' in v) {\n    const bearing = tr.bearing;\n    tr.bearing = v.bearing;\n    changed = changed || bearing !== tr.bearing;\n  }\n  if ('pitch' in v) {\n    const pitch = tr.pitch;\n    tr.pitch = v.pitch;\n    changed = changed || pitch !== tr.pitch;\n  }\n  if (v.padding && !tr.isPaddingEqual(v.padding)) {\n    changed = true;\n    tr.padding = v.padding;\n  }\n  return changed;\n}\n"]},"metadata":{},"sourceType":"module"}
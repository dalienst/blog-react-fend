{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { I18n as I18nClass } from './I18n';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { Amplify } from '../Amplify';\nvar logger = new Logger('I18n');\nvar _config = null;\nvar _i18n = null;\n/**\n * Export I18n APIs\n */\n\nvar I18n =\n/** @class */\nfunction () {\n  function I18n() {}\n  /**\n   * @static\n   * @method\n   * Configure I18n part\n   * @param {Object} config - Configuration of the I18n\n   */\n\n\n  I18n.configure = function (config) {\n    logger.debug('configure I18n');\n\n    if (!config) {\n      return _config;\n    }\n\n    _config = Object.assign({}, _config, config.I18n || config);\n    I18n.createInstance();\n    return _config;\n  };\n\n  I18n.getModuleName = function () {\n    return 'I18n';\n  };\n  /**\n   * @static\n   * @method\n   * Create an instance of I18n for the library\n   */\n\n\n  I18n.createInstance = function () {\n    logger.debug('create I18n instance');\n\n    if (_i18n) {\n      return;\n    }\n\n    _i18n = new I18nClass(_config);\n  };\n  /**\n   * @static @method\n   * Explicitly setting language\n   * @param {String} lang\n   */\n\n\n  I18n.setLanguage = function (lang) {\n    I18n.checkConfig();\n    return _i18n.setLanguage(lang);\n  };\n  /**\n   * @static @method\n   * Get value\n   * @param {String} key\n   * @param {String} defVal - Default value\n   */\n\n\n  I18n.get = function (key, defVal) {\n    if (!I18n.checkConfig()) {\n      return typeof defVal === 'undefined' ? key : defVal;\n    }\n\n    return _i18n.get(key, defVal);\n  };\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {String} langurage - Language of the dictionary\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\n   */\n\n\n  I18n.putVocabulariesForLanguage = function (language, vocabularies) {\n    I18n.checkConfig();\n    return _i18n.putVocabulariesForLanguage(language, vocabularies);\n  };\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {Object} vocabularies - Object that has language as key,\n   *                                vocabularies of each language as value\n   */\n\n\n  I18n.putVocabularies = function (vocabularies) {\n    I18n.checkConfig();\n    return _i18n.putVocabularies(vocabularies);\n  };\n\n  I18n.checkConfig = function () {\n    if (!_i18n) {\n      _i18n = new I18nClass(_config);\n    }\n\n    return true;\n  };\n\n  return I18n;\n}();\n\nexport { I18n };\nAmplify.register(I18n);","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,IAAI,IAAIC,SAAjB,QAAkC,QAAlC;AAEA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,WAAxC;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAW,MAAX,CAAf;AAEA,IAAIG,OAAO,GAAG,IAAd;AACA,IAAIC,KAAK,GAAG,IAAZ;AAEA;;;;AAGA;AAAA;AAAA;AAAA,mBA+FC;AA9FA;;;;;;;;AAMOP,mBAAP,UAAiBQ,MAAjB,EAAuB;AACtBH,UAAM,CAACI,KAAP,CAAa,gBAAb;;AACA,QAAI,CAACD,MAAL,EAAa;AACZ,aAAOF,OAAP;AACA;;AAEDA,WAAO,GAAGI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,OAAlB,EAA2BE,MAAM,CAACR,IAAP,IAAeQ,MAA1C,CAAV;AAEAR,QAAI,CAACY,cAAL;AAEA,WAAON,OAAP;AACA,GAXM;;AAaAN,uBAAP;AACC,WAAO,MAAP;AACA,GAFM;AAIP;;;;;;;AAKOA,wBAAP;AACCK,UAAM,CAACI,KAAP,CAAa,sBAAb;;AACA,QAAIF,KAAJ,EAAW;AACV;AACA;;AACDA,SAAK,GAAG,IAAIN,SAAJ,CAAcK,OAAd,CAAR;AACA,GANM;AAQP;;;;;;;AAKON,qBAAP,UAAmBa,IAAnB,EAAuB;AACtBb,QAAI,CAACc,WAAL;AAEA,WAAOP,KAAK,CAACQ,WAAN,CAAkBF,IAAlB,CAAP;AACA,GAJM;AAMP;;;;;;;;AAMOb,aAAP,UAAWgB,GAAX,EAAgBC,MAAhB,EAAuB;AACtB,QAAI,CAACjB,IAAI,CAACc,WAAL,EAAL,EAAyB;AACxB,aAAO,OAAOG,MAAP,KAAkB,WAAlB,GAAgCD,GAAhC,GAAsCC,MAA7C;AACA;;AAED,WAAOV,KAAK,CAACW,GAAN,CAAUF,GAAV,EAAeC,MAAf,CAAP;AACA,GANM;AAQP;;;;;;;;;AAOOjB,oCAAP,UAAkCmB,QAAlC,EAA4CC,YAA5C,EAAwD;AACvDpB,QAAI,CAACc,WAAL;AAEA,WAAOP,KAAK,CAACc,0BAAN,CAAiCF,QAAjC,EAA2CC,YAA3C,CAAP;AACA,GAJM;AAMP;;;;;;;;;AAOOpB,yBAAP,UAAuBoB,YAAvB,EAAmC;AAClCpB,QAAI,CAACc,WAAL;AAEA,WAAOP,KAAK,CAACe,eAAN,CAAsBF,YAAtB,CAAP;AACA,GAJM;;AAMOpB,qBAAd;AACC,QAAI,CAACO,KAAL,EAAY;AACXA,WAAK,GAAG,IAAIN,SAAJ,CAAcK,OAAd,CAAR;AACA;;AAED,WAAO,IAAP;AACA,GANa;;AAOf;AAAC,CA/FD;;;AAiGAF,OAAO,CAACmB,QAAR,CAAiBvB,IAAjB","names":["I18n","I18nClass","ConsoleLogger","Logger","Amplify","logger","_config","_i18n","config","debug","Object","assign","createInstance","lang","checkConfig","setLanguage","key","defVal","get","language","vocabularies","putVocabulariesForLanguage","putVocabularies","register"],"sources":["/home/dalienst/node_modules/@aws-amplify/core/src/I18n/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { I18n as I18nClass } from './I18n';\n\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { Amplify } from '../Amplify';\n\nconst logger = new Logger('I18n');\n\nlet _config = null;\nlet _i18n = null;\n\n/**\n * Export I18n APIs\n */\nexport class I18n {\n\t/**\n\t * @static\n\t * @method\n\t * Configure I18n part\n\t * @param {Object} config - Configuration of the I18n\n\t */\n\tstatic configure(config) {\n\t\tlogger.debug('configure I18n');\n\t\tif (!config) {\n\t\t\treturn _config;\n\t\t}\n\n\t\t_config = Object.assign({}, _config, config.I18n || config);\n\n\t\tI18n.createInstance();\n\n\t\treturn _config;\n\t}\n\n\tstatic getModuleName() {\n\t\treturn 'I18n';\n\t}\n\n\t/**\n\t * @static\n\t * @method\n\t * Create an instance of I18n for the library\n\t */\n\tstatic createInstance() {\n\t\tlogger.debug('create I18n instance');\n\t\tif (_i18n) {\n\t\t\treturn;\n\t\t}\n\t\t_i18n = new I18nClass(_config);\n\t}\n\n\t/**\n\t * @static @method\n\t * Explicitly setting language\n\t * @param {String} lang\n\t */\n\tstatic setLanguage(lang) {\n\t\tI18n.checkConfig();\n\n\t\treturn _i18n.setLanguage(lang);\n\t}\n\n\t/**\n\t * @static @method\n\t * Get value\n\t * @param {String} key\n\t * @param {String} defVal - Default value\n\t */\n\tstatic get(key, defVal?) {\n\t\tif (!I18n.checkConfig()) {\n\t\t\treturn typeof defVal === 'undefined' ? key : defVal;\n\t\t}\n\n\t\treturn _i18n.get(key, defVal);\n\t}\n\n\t/**\n\t * @static\n\t * @method\n\t * Add vocabularies for one language\n\t * @param {String} langurage - Language of the dictionary\n\t * @param {Object} vocabularies - Object that has key-value as dictionary entry\n\t */\n\tstatic putVocabulariesForLanguage(language, vocabularies) {\n\t\tI18n.checkConfig();\n\n\t\treturn _i18n.putVocabulariesForLanguage(language, vocabularies);\n\t}\n\n\t/**\n\t * @static\n\t * @method\n\t * Add vocabularies for one language\n\t * @param {Object} vocabularies - Object that has language as key,\n\t *                                vocabularies of each language as value\n\t */\n\tstatic putVocabularies(vocabularies) {\n\t\tI18n.checkConfig();\n\n\t\treturn _i18n.putVocabularies(vocabularies);\n\t}\n\n\tpublic static checkConfig() {\n\t\tif (!_i18n) {\n\t\t\t_i18n = new I18nClass(_config);\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nAmplify.register(I18n);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { Auth } from '@aws-amplify/auth';\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { ModelAttributeAuthProvider, ModelAttributeAuthAllow } from '../types';\n\nfunction getProviderFromRule(rule) {\n  // private with no provider means userPools\n  if (rule.allow === 'private' && !rule.provider) {\n    return ModelAttributeAuthProvider.USER_POOLS;\n  } // public with no provider means apiKey\n\n\n  if (rule.allow === 'public' && !rule.provider) {\n    return ModelAttributeAuthProvider.API_KEY;\n  }\n\n  return rule.provider;\n}\n\nfunction sortAuthRulesWithPriority(rules) {\n  var allowSortPriority = [ModelAttributeAuthAllow.CUSTOM, ModelAttributeAuthAllow.OWNER, ModelAttributeAuthAllow.GROUPS, ModelAttributeAuthAllow.PRIVATE, ModelAttributeAuthAllow.PUBLIC];\n  var providerSortPriority = [ModelAttributeAuthProvider.FUNCTION, ModelAttributeAuthProvider.USER_POOLS, ModelAttributeAuthProvider.OIDC, ModelAttributeAuthProvider.IAM, ModelAttributeAuthProvider.API_KEY];\n  return __spread(rules).sort(function (a, b) {\n    if (a.allow === b.allow) {\n      return providerSortPriority.indexOf(getProviderFromRule(a)) - providerSortPriority.indexOf(getProviderFromRule(b));\n    }\n\n    return allowSortPriority.indexOf(a.allow) - allowSortPriority.indexOf(b.allow);\n  });\n}\n\nfunction getAuthRules(_a) {\n  var rules = _a.rules,\n      currentUser = _a.currentUser; // Using Set to ensure uniqueness\n\n  var authModes = new Set();\n  rules.forEach(function (rule) {\n    switch (rule.allow) {\n      case ModelAttributeAuthAllow.CUSTOM:\n        // custom with no provider -> function\n        if (!rule.provider || rule.provider === ModelAttributeAuthProvider.FUNCTION) {\n          authModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n        }\n\n        break;\n\n      case ModelAttributeAuthAllow.GROUPS:\n      case ModelAttributeAuthAllow.OWNER:\n        {\n          // We shouldn't attempt User Pool or OIDC if there isn't an authenticated user\n          if (currentUser) {\n            if (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.OIDC) {\n              authModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);\n            }\n          }\n\n          break;\n        }\n\n      case ModelAttributeAuthAllow.PRIVATE:\n        {\n          // We shouldn't attempt private if there isn't an authenticated user\n          if (currentUser) {\n            // private with no provider means userPools\n            if (!rule.provider || rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.IAM) {\n              authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n            }\n          }\n\n          break;\n        }\n\n      case ModelAttributeAuthAllow.PUBLIC:\n        {\n          if (rule.provider === ModelAttributeAuthProvider.IAM) {\n            authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n          } else if (!rule.provider || rule.provider === ModelAttributeAuthProvider.API_KEY) {\n            // public with no provider means apiKey\n            authModes.add(GRAPHQL_AUTH_MODE.API_KEY);\n          }\n\n          break;\n        }\n\n      default:\n        break;\n    }\n  });\n  return Array.from(authModes);\n}\n/**\n * Returns an array of auth modes to try based on the schema, model, and\n * authenticated user (or lack thereof). Rules are sourced from `getAuthRules`\n * and returned in the order they ought to be attempted.\n *\n * @see sortAuthRulesWithPriority\n * @see getAuthRules\n *\n * @param param0 The `{schema, modelName}` to inspect.\n * @returns A sorted array of auth modes to attempt.\n */\n\n\nexport var multiAuthStrategy = function (amplifyContext) {\n  return function (_a) {\n    var schema = _a.schema,\n        modelName = _a.modelName;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var currentUser, e_1, attributes, authAttribute, sortedRules;\n\n      var _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            amplifyContext.Auth = amplifyContext.Auth || Auth;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , amplifyContext.Auth.currentAuthenticatedUser()];\n\n          case 2:\n            currentUser = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            attributes = schema.namespaces.user.models[modelName].attributes;\n\n            if (attributes) {\n              authAttribute = attributes.find(function (attr) {\n                return attr.type === 'auth';\n              });\n\n              if ((_b = authAttribute === null || authAttribute === void 0 ? void 0 : authAttribute.properties) === null || _b === void 0 ? void 0 : _b.rules) {\n                sortedRules = sortAuthRulesWithPriority(authAttribute.properties.rules);\n                return [2\n                /*return*/\n                , getAuthRules({\n                  currentUser: currentUser,\n                  rules: sortedRules\n                })];\n              }\n            }\n\n            return [2\n            /*return*/\n            , []];\n        }\n      });\n    });\n  };\n};","map":{"version":3,"mappings":"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","names":["Auth","GRAPHQL_AUTH_MODE","ModelAttributeAuthProvider","ModelAttributeAuthAllow","getProviderFromRule","rule","allow","provider","USER_POOLS","API_KEY","sortAuthRulesWithPriority","rules","allowSortPriority","CUSTOM","OWNER","GROUPS","PRIVATE","PUBLIC","providerSortPriority","FUNCTION","OIDC","IAM","__spread","sort","a","b","indexOf","getAuthRules","_a","currentUser","authModes","Set","forEach","add","AWS_LAMBDA","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","AWS_IAM","Array","from","multiAuthStrategy","amplifyContext","schema","modelName","currentAuthenticatedUser","_c","attributes","namespaces","user","models","authAttribute","find","type","properties","_b","sortedRules"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/authModeStrategies/multiAuthStrategy.ts"],"sourcesContent":["import { Auth } from '@aws-amplify/auth';\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport {\n\tAuthModeStrategy,\n\tModelAttributeAuthProperty,\n\tModelAttributeAuthProvider,\n\tModelAttributeAuthAllow,\n\tAmplifyContext,\n} from '../types';\n\nfunction getProviderFromRule(\n\trule: ModelAttributeAuthProperty\n): ModelAttributeAuthProvider {\n\t// private with no provider means userPools\n\tif (rule.allow === 'private' && !rule.provider) {\n\t\treturn ModelAttributeAuthProvider.USER_POOLS;\n\t}\n\t// public with no provider means apiKey\n\tif (rule.allow === 'public' && !rule.provider) {\n\t\treturn ModelAttributeAuthProvider.API_KEY;\n\t}\n\treturn rule.provider!;\n}\n\nfunction sortAuthRulesWithPriority(rules: ModelAttributeAuthProperty[]) {\n\tconst allowSortPriority = [\n\t\tModelAttributeAuthAllow.CUSTOM,\n\t\tModelAttributeAuthAllow.OWNER,\n\t\tModelAttributeAuthAllow.GROUPS,\n\t\tModelAttributeAuthAllow.PRIVATE,\n\t\tModelAttributeAuthAllow.PUBLIC,\n\t];\n\tconst providerSortPriority = [\n\t\tModelAttributeAuthProvider.FUNCTION,\n\t\tModelAttributeAuthProvider.USER_POOLS,\n\t\tModelAttributeAuthProvider.OIDC,\n\t\tModelAttributeAuthProvider.IAM,\n\t\tModelAttributeAuthProvider.API_KEY,\n\t];\n\n\treturn [...rules].sort(\n\t\t(a: ModelAttributeAuthProperty, b: ModelAttributeAuthProperty) => {\n\t\t\tif (a.allow === b.allow) {\n\t\t\t\treturn (\n\t\t\t\t\tproviderSortPriority.indexOf(getProviderFromRule(a)) -\n\t\t\t\t\tproviderSortPriority.indexOf(getProviderFromRule(b))\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (\n\t\t\t\tallowSortPriority.indexOf(a.allow) - allowSortPriority.indexOf(b.allow)\n\t\t\t);\n\t\t}\n\t);\n}\n\nfunction getAuthRules({\n\trules,\n\tcurrentUser,\n}: {\n\trules: ModelAttributeAuthProperty[];\n\tcurrentUser: unknown;\n}) {\n\t// Using Set to ensure uniqueness\n\tconst authModes = new Set<GRAPHQL_AUTH_MODE>();\n\n\trules.forEach(rule => {\n\t\tswitch (rule.allow) {\n\t\t\tcase ModelAttributeAuthAllow.CUSTOM:\n\t\t\t\t// custom with no provider -> function\n\t\t\t\tif (\n\t\t\t\t\t!rule.provider ||\n\t\t\t\t\trule.provider === ModelAttributeAuthProvider.FUNCTION\n\t\t\t\t) {\n\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ModelAttributeAuthAllow.GROUPS:\n\t\t\tcase ModelAttributeAuthAllow.OWNER: {\n\t\t\t\t// We shouldn't attempt User Pool or OIDC if there isn't an authenticated user\n\t\t\t\tif (currentUser) {\n\t\t\t\t\tif (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n\t\t\t\t\t} else if (rule.provider === ModelAttributeAuthProvider.OIDC) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ModelAttributeAuthAllow.PRIVATE: {\n\t\t\t\t// We shouldn't attempt private if there isn't an authenticated user\n\t\t\t\tif (currentUser) {\n\t\t\t\t\t// private with no provider means userPools\n\t\t\t\t\tif (\n\t\t\t\t\t\t!rule.provider ||\n\t\t\t\t\t\trule.provider === ModelAttributeAuthProvider.USER_POOLS\n\t\t\t\t\t) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n\t\t\t\t\t} else if (rule.provider === ModelAttributeAuthProvider.IAM) {\n\t\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ModelAttributeAuthAllow.PUBLIC: {\n\t\t\t\tif (rule.provider === ModelAttributeAuthProvider.IAM) {\n\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n\t\t\t\t} else if (\n\t\t\t\t\t!rule.provider ||\n\t\t\t\t\trule.provider === ModelAttributeAuthProvider.API_KEY\n\t\t\t\t) {\n\t\t\t\t\t// public with no provider means apiKey\n\t\t\t\t\tauthModes.add(GRAPHQL_AUTH_MODE.API_KEY);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\treturn Array.from(authModes);\n}\n\n/**\n * Returns an array of auth modes to try based on the schema, model, and\n * authenticated user (or lack thereof). Rules are sourced from `getAuthRules`\n * and returned in the order they ought to be attempted.\n *\n * @see sortAuthRulesWithPriority\n * @see getAuthRules\n *\n * @param param0 The `{schema, modelName}` to inspect.\n * @returns A sorted array of auth modes to attempt.\n */\nexport const multiAuthStrategy: (\n\tamplifyContext: AmplifyContext\n) => AuthModeStrategy =\n\t(amplifyContext: AmplifyContext) =>\n\tasync ({ schema, modelName }) => {\n\t\tamplifyContext.Auth = amplifyContext.Auth || Auth;\n\t\tlet currentUser;\n\t\ttry {\n\t\t\tcurrentUser = await amplifyContext.Auth.currentAuthenticatedUser();\n\t\t} catch (e) {\n\t\t\t// No current user\n\t\t}\n\n\t\tconst { attributes } = schema.namespaces.user.models[modelName];\n\n\t\tif (attributes) {\n\t\t\tconst authAttribute = attributes.find(attr => attr.type === 'auth');\n\n\t\t\tif (authAttribute?.properties?.rules) {\n\t\t\t\tconst sortedRules = sortAuthRulesWithPriority(\n\t\t\t\t\tauthAttribute.properties.rules\n\t\t\t\t);\n\n\t\t\t\treturn getAuthRules({ currentUser, rules: sortedRules });\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t};\n"]},"metadata":{},"sourceType":"module"}
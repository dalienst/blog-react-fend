{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport { TranslateClient, TranslateTextCommand } from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport { isBytesSource } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { EventStreamMarshaller } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\n\nvar AmazonAIConvertPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n\n    _this.inputSampleRate = 44100;\n    return _this;\n  }\n\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode, translateTextCommand, data, err_1;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            logger.debug('Starting translation');\n            _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n\n            if (!region) {\n              return [2\n              /*return*/\n              , Promise.reject('region not configured for transcription')];\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _h.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n            targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n\n            if (!sourceLanguageCode || !targetLanguageCode) {\n              return [2\n              /*return*/\n              , Promise.reject('Please provide both source and target language')];\n            }\n\n            this.translateClient = new TranslateClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            translateTextCommand = new TranslateTextCommand({\n              SourceLanguageCode: sourceLanguageCode,\n              TargetLanguageCode: targetLanguageCode,\n              Text: input.translateText.source.text\n            });\n            _h.label = 2;\n\n          case 2:\n            _h.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.translateClient.send(translateTextCommand)];\n\n          case 3:\n            data = _h.sent();\n            return [2\n            /*return*/\n            , {\n              text: data.TranslatedText,\n              language: data.TargetLanguageCode\n            }];\n\n          case 4:\n            err_1 = _h.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId, synthesizeSpeechCommand, data, response, arrayBuffer, blob, url, err_2;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n            if (!input.textToSpeech.source) {\n              return [2\n              /*return*/\n              , Promise.reject('Source needs to be provided in the input')];\n            }\n\n            voiceId = input.textToSpeech.voiceId || VoiceId;\n\n            if (!region) {\n              return [2\n              /*return*/\n              , Promise.reject('Region was undefined. Did you enable speech generator using amplify CLI?')];\n            }\n\n            if (!voiceId) {\n              return [2\n              /*return*/\n              , Promise.reject('VoiceId was undefined.')];\n            }\n\n            this.pollyClient = new PollyClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n              OutputFormat: 'mp3',\n              Text: input.textToSpeech.source.text,\n              VoiceId: voiceId,\n              TextType: 'text',\n              SampleRate: '24000'\n            });\n            _f.label = 2;\n\n          case 2:\n            _f.trys.push([2, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.pollyClient.send(synthesizeSpeechCommand)];\n\n          case 3:\n            data = _f.sent();\n            response = new Response(data.AudioStream);\n            return [4\n            /*yield*/\n            , response.arrayBuffer()];\n\n          case 4:\n            arrayBuffer = _f.sent();\n            blob = new Blob([arrayBuffer], {\n              type: data.ContentType\n            });\n            url = URL.createObjectURL(blob);\n            return [2\n            /*return*/\n            , {\n              speech: {\n                url: url\n              },\n              audioStream: arrayBuffer,\n              text: input.textToSpeech.source.text\n            }];\n\n          case 5:\n            err_2 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_3, err_4;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _h.trys.push([0, 7,, 8]);\n\n            logger.debug('starting transcription..');\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _h.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n            if (!region) {\n              return [2\n              /*return*/\n              , Promise.reject('region not configured for transcription')];\n            }\n\n            if (!languageCode) {\n              return [2\n              /*return*/\n              , Promise.reject('languageCode not configured or provided for transcription')];\n            }\n\n            _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n            if (!isBytesSource(source)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.openConnectionWithTranscribe({\n              credentials: credentials,\n              region: region,\n              languageCode: language\n            })];\n\n          case 2:\n            connection = _h.sent();\n            _h.label = 3;\n\n          case 3:\n            _h.trys.push([3, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.sendDataToTranscribe({\n              connection: connection,\n              raw: source.bytes,\n              languageCode: language\n            })];\n\n          case 4:\n            fullText = _h.sent();\n            return [2\n            /*return*/\n            , {\n              transcription: {\n                fullText: fullText\n              }\n            }];\n\n          case 5:\n            err_3 = _h.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_3)];\n\n          case 6:\n            return [2\n            /*return*/\n            , Promise.reject('Source types other than byte source are not supported.')];\n\n          case 7:\n            err_4 = _h.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_4.name + ': ' + err_4.message)];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return decodedMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n\n    var connection = _a.connection,\n        raw = _a.raw,\n        languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n\n      logger.debug({\n        raw: raw\n      });\n\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n\n          _this.sendEncodedDataToTranscribe(connection, data, languageCode);\n        }\n      } else {\n        // If Buffer\n        _this.sendEncodedDataToTranscribe(connection, raw, languageCode);\n      } // sending end frame\n\n\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data, languageCode) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data,\n      outputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? 8000 : 16000\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n\n    return buffer;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer,\n        _b = _a.outputSampleRate,\n        outputSampleRate = _b === void 0 ? 16000 : _b;\n\n    if (outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n\n    var sampleRateRatio = this.inputSampleRate / outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n          count = 0;\n\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n\n    return result;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n\n    var userCredentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=\" + (LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000') + \"&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider);\n\nexport { AmazonAIConvertPredictionsProvider };","map":{"version":3,"mappings":"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","names":["AbstractConvertPredictionsProvider","TranslateClient","TranslateTextCommand","PollyClient","SynthesizeSpeechCommand","isBytesSource","Credentials","ConsoleLogger","Logger","Signer","getAmplifyUserAgent","EventStreamMarshaller","fromUtf8","toUtf8","logger","eventBuilder","LANGUAGES_CODE_IN_8KHZ","__extends","_super","_this","AmazonAIConvertPredictionsProvider","input","debug","_a","_config","translateText","_c","_d","_e","sourceLanguage","_f","targetLanguage","_g","region","Promise","reject","get","credentials","_h","sourceLanguageCode","source","language","targetLanguageCode","translateClient","customUserAgent","translateTextCommand","SourceLanguageCode","TargetLanguageCode","Text","text","send","data","TranslatedText","err_1","speechGenerator","VoiceId","textToSpeech","voiceId","pollyClient","synthesizeSpeechCommand","OutputFormat","TextType","SampleRate","response","Response","AudioStream","arrayBuffer","blob","Blob","type","ContentType","url","URL","createObjectURL","speech","audioStream","err_2","transcription","languageCode","openConnectionWithTranscribe","connection","sendDataToTranscribe","raw","bytes","fullText","err_3","err_4","name","message","decodedMessage","transcribeMessage","unmarshall","Buffer","from","transcribeMessageJson","JSON","parse","body","headers","value","stringify","Message","Error","Transcript","Results","length","Alternatives","IsPartial","transcript","res","rej","onmessage","serializeDataFromTranscribe","err","onerror","errorEvent","onclose","closeEvent","trim","Array","isArray","i","slice","sendEncodedDataToTranscribe","endFrameEventMessage","getAudioEventMessage","endFrameBinary","marshall","downsampledBuffer","downsampleBuffer","buffer","outputSampleRate","includes","pcmEncodedBuffer","pcmEncode","audioEventMessage","binary","offset","ArrayBuffer","view","DataView","s","Math","max","min","setInt16","_b","inputSampleRate","sampleRateRatio","newLength","round","result","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","userCredentials","access_key","secret_key","session_token","signedUrl","generateTranscribeUrl","WebSocket","binaryType","onopen","join","signUrl","service"],"sources":["/home/dalienst/node_modules/@aws-amplify/predictions/src/Providers/AmazonAIConvertPredictionsProvider.ts"],"sourcesContent":["import { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport {\n\tTranslateClient,\n\tTranslateTextCommand,\n} from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport {\n\tTranslateTextInput,\n\tTextToSpeechInput,\n\tSpeechToTextInput,\n\tTranslateTextOutput,\n\tTextToSpeechOutput,\n\tSpeechToTextOutput,\n\tisBytesSource,\n} from '../types';\nimport {\n\tCredentials,\n\tConsoleLogger as Logger,\n\tSigner,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tEventStreamMarshaller,\n\tMessageHeaderValue,\n} from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\n\nconst logger = new Logger('AmazonAIConvertPredictionsProvider');\nconst eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\n\nconst LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\n\nexport class AmazonAIConvertPredictionsProvider extends AbstractConvertPredictionsProvider {\n\tprivate translateClient: TranslateClient;\n\tprivate pollyClient: PollyClient;\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIConvertPredictionsProvider';\n\t}\n\n\tprotected async translateText(\n\t\tinput: TranslateTextInput\n\t): Promise<TranslateTextOutput> {\n\t\tlogger.debug('Starting translation');\n\t\tconst {\n\t\t\ttranslateText: {\n\t\t\t\tdefaults: { sourceLanguage = '', targetLanguage = '' } = {},\n\t\t\t\tregion = '',\n\t\t\t} = {},\n\t\t} = this._config;\n\n\t\tif (!region) {\n\t\t\treturn Promise.reject('region not configured for transcription');\n\t\t}\n\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\t\tconst sourceLanguageCode =\n\t\t\tinput.translateText.source.language || sourceLanguage;\n\t\tconst targetLanguageCode =\n\t\t\tinput.translateText.targetLanguage || targetLanguage;\n\t\tif (!sourceLanguageCode || !targetLanguageCode) {\n\t\t\treturn Promise.reject('Please provide both source and target language');\n\t\t}\n\n\t\tthis.translateClient = new TranslateClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst translateTextCommand = new TranslateTextCommand({\n\t\t\tSourceLanguageCode: sourceLanguageCode,\n\t\t\tTargetLanguageCode: targetLanguageCode,\n\t\t\tText: input.translateText.source.text,\n\t\t});\n\t\ttry {\n\t\t\tconst data = await this.translateClient.send(translateTextCommand);\n\t\t\treturn {\n\t\t\t\ttext: data.TranslatedText,\n\t\t\t\tlanguage: data.TargetLanguageCode,\n\t\t\t} as TranslateTextOutput;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprotected async convertTextToSpeech(\n\t\tinput: TextToSpeechInput\n\t): Promise<TextToSpeechOutput> {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\t\tconst {\n\t\t\tspeechGenerator: { defaults: { VoiceId = '' } = {}, region = '' } = {},\n\t\t} = this._config;\n\n\t\tif (!input.textToSpeech.source) {\n\t\t\treturn Promise.reject('Source needs to be provided in the input');\n\t\t}\n\t\tconst voiceId = input.textToSpeech.voiceId || VoiceId;\n\n\t\tif (!region) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'Region was undefined. Did you enable speech generator using amplify CLI?'\n\t\t\t);\n\t\t}\n\n\t\tif (!voiceId) {\n\t\t\treturn Promise.reject('VoiceId was undefined.');\n\t\t}\n\n\t\tthis.pollyClient = new PollyClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n\t\t\tOutputFormat: 'mp3',\n\t\t\tText: input.textToSpeech.source.text,\n\t\t\tVoiceId: voiceId,\n\t\t\tTextType: 'text',\n\t\t\tSampleRate: '24000',\n\t\t\t// tslint:disable-next-line: align\n\t\t});\n\t\ttry {\n\t\t\tconst data = await this.pollyClient.send(synthesizeSpeechCommand);\n\t\t\tconst response = new Response(data.AudioStream as ReadableStream);\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\tconst blob = new Blob([arrayBuffer], {\n\t\t\t\ttype: data.ContentType,\n\t\t\t});\n\t\t\tconst url = URL.createObjectURL(blob);\n\t\t\treturn {\n\t\t\t\tspeech: { url },\n\t\t\t\taudioStream: arrayBuffer,\n\t\t\t\ttext: input.textToSpeech.source.text,\n\t\t\t} as TextToSpeechOutput;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprotected async convertSpeechToText(\n\t\tinput: SpeechToTextInput\n\t): Promise<SpeechToTextOutput> {\n\t\ttry {\n\t\t\tlogger.debug('starting transcription..');\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) {\n\t\t\t\treturn Promise.reject('No credentials');\n\t\t\t}\n\t\t\tconst {\n\t\t\t\ttranscription: {\n\t\t\t\t\tdefaults: { language: languageCode = '' } = {},\n\t\t\t\t\tregion = '',\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\t\t\tif (!region) {\n\t\t\t\treturn Promise.reject('region not configured for transcription');\n\t\t\t}\n\t\t\tif (!languageCode) {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\t'languageCode not configured or provided for transcription'\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst {\n\t\t\t\ttranscription: { source, language = languageCode },\n\t\t\t} = input;\n\n\t\t\tif (isBytesSource(source)) {\n\t\t\t\tconst connection = await this.openConnectionWithTranscribe({\n\t\t\t\t\tcredentials,\n\t\t\t\t\tregion,\n\t\t\t\t\tlanguageCode: language,\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tconst fullText = await this.sendDataToTranscribe({\n\t\t\t\t\t\tconnection,\n\t\t\t\t\t\traw: source.bytes,\n\t\t\t\t\t\tlanguageCode: language,\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttranscription: {\n\t\t\t\t\t\t\tfullText,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Promise.reject(\n\t\t\t\t'Source types other than byte source are not supported.'\n\t\t\t);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.name + ': ' + err.message);\n\t\t}\n\t}\n\n\tpublic static serializeDataFromTranscribe(message) {\n\t\tlet decodedMessage = '';\n\t\tconst transcribeMessage = eventBuilder.unmarshall(\n\t\t\tBuffer.from(message.data)\n\t\t);\n\t\tconst transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n\t\tif (transcribeMessage.headers[':message-type'].value === 'exception') {\n\t\t\tlogger.debug(\n\t\t\t\t'exception',\n\t\t\t\tJSON.stringify(transcribeMessageJson.Message, null, 2)\n\t\t\t);\n\t\t\tthrow new Error(transcribeMessageJson.Message);\n\t\t} else if (transcribeMessage.headers[':message-type'].value === 'event') {\n\t\t\tif (transcribeMessageJson.Transcript.Results.length > 0) {\n\t\t\t\tif (\n\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives.length > 0\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t.Transcript.length > 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].IsPartial === false\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdecodedMessage =\n\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t\t\t.Transcript + '\\n';\n\t\t\t\t\t\t\tlogger.debug({ decodedMessage });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogger.debug({\n\t\t\t\t\t\t\t\ttranscript:\n\t\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn decodedMessage;\n\t}\n\n\tprivate sendDataToTranscribe({\n\t\tconnection,\n\t\traw,\n\t\tlanguageCode,\n\t}): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tlet fullText = '';\n\t\t\tconnection.onmessage = message => {\n\t\t\t\ttry {\n\t\t\t\t\tconst decodedMessage =\n\t\t\t\t\t\tAmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(\n\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t);\n\t\t\t\t\tif (decodedMessage) {\n\t\t\t\t\t\tfullText += decodedMessage + ' ';\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\trej(err.message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconnection.onerror = errorEvent => {\n\t\t\t\tlogger.debug({ errorEvent });\n\t\t\t\trej('failed to transcribe, network error');\n\t\t\t};\n\n\t\t\tconnection.onclose = closeEvent => {\n\t\t\t\tlogger.debug({ closeEvent });\n\t\t\t\treturn res(fullText.trim());\n\t\t\t};\n\n\t\t\tlogger.debug({ raw });\n\n\t\t\tif (Array.isArray(raw)) {\n\t\t\t\tfor (let i = 0; i < raw.length - 1023; i += 1024) {\n\t\t\t\t\tconst data = raw.slice(i, i + 1024);\n\t\t\t\t\tthis.sendEncodedDataToTranscribe(connection, data, languageCode);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If Buffer\n\t\t\t\tthis.sendEncodedDataToTranscribe(connection, raw, languageCode);\n\t\t\t}\n\n\t\t\t// sending end frame\n\t\t\tconst endFrameEventMessage = this.getAudioEventMessage(Buffer.from([]));\n\t\t\tconst endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n\t\t\tconnection.send(endFrameBinary);\n\t\t});\n\t}\n\n\tprivate sendEncodedDataToTranscribe(connection, data, languageCode) {\n\t\tconst downsampledBuffer = this.downsampleBuffer({\n\t\t\tbuffer: data,\n\t\t\toutputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode)\n\t\t\t\t? 8000\n\t\t\t\t: 16000,\n\t\t});\n\t\tconst pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n\t\tconst audioEventMessage = this.getAudioEventMessage(\n\t\t\tBuffer.from(pcmEncodedBuffer)\n\t\t);\n\t\tconst binary = eventBuilder.marshall(audioEventMessage);\n\t\tconnection.send(binary);\n\t}\n\n\tprivate getAudioEventMessage(buffer) {\n\t\tconst audioEventMessage = {\n\t\t\tbody: buffer as Uint8Array,\n\t\t\theaders: {\n\t\t\t\t':message-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'event',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t\t':event-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'AudioEvent',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t},\n\t\t};\n\n\t\treturn audioEventMessage;\n\t}\n\n\tprivate pcmEncode(input) {\n\t\tlet offset = 0;\n\t\tconst buffer = new ArrayBuffer(input.length * 2);\n\t\tconst view = new DataView(buffer);\n\t\tfor (let i = 0; i < input.length; i++, offset += 2) {\n\t\t\tconst s = Math.max(-1, Math.min(1, input[i]));\n\t\t\tview.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n\t\t}\n\t\treturn buffer;\n\t}\n\n\tprivate inputSampleRate = 44100;\n\n\tprivate downsampleBuffer({ buffer, outputSampleRate = 16000 }) {\n\t\tif (outputSampleRate === this.inputSampleRate) {\n\t\t\treturn buffer;\n\t\t}\n\n\t\tconst sampleRateRatio = this.inputSampleRate / outputSampleRate;\n\t\tconst newLength = Math.round(buffer.length / sampleRateRatio);\n\t\tconst result = new Float32Array(newLength);\n\t\tlet offsetResult = 0;\n\t\tlet offsetBuffer = 0;\n\t\twhile (offsetResult < result.length) {\n\t\t\tconst nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n\t\t\tlet accum = 0,\n\t\t\t\tcount = 0;\n\t\t\tfor (\n\t\t\t\tlet i = offsetBuffer;\n\t\t\t\ti < nextOffsetBuffer && i < buffer.length;\n\t\t\t\ti++\n\t\t\t) {\n\t\t\t\taccum += buffer[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tresult[offsetResult] = accum / count;\n\t\t\toffsetResult++;\n\t\t\toffsetBuffer = nextOffsetBuffer;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate openConnectionWithTranscribe({\n\t\tcredentials: userCredentials,\n\t\tregion,\n\t\tlanguageCode,\n\t}): Promise<WebSocket> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst {\n\t\t\t\taccessKeyId: access_key,\n\t\t\t\tsecretAccessKey: secret_key,\n\t\t\t\tsessionToken: session_token,\n\t\t\t} = userCredentials;\n\n\t\t\tconst credentials = {\n\t\t\t\taccess_key,\n\t\t\t\tsecret_key,\n\t\t\t\tsession_token,\n\t\t\t};\n\n\t\t\tconst signedUrl = this.generateTranscribeUrl({\n\t\t\t\tcredentials,\n\t\t\t\tregion,\n\t\t\t\tlanguageCode,\n\t\t\t});\n\n\t\t\tlogger.debug('connecting...');\n\t\t\tconst connection = new WebSocket(signedUrl);\n\n\t\t\tconnection.binaryType = 'arraybuffer';\n\t\t\tconnection.onopen = () => {\n\t\t\t\tlogger.debug('connected');\n\t\t\t\tres(connection);\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate generateTranscribeUrl({ credentials, region, languageCode }): string {\n\t\tconst url = [\n\t\t\t`wss://transcribestreaming.${region}.amazonaws.com:8443`,\n\t\t\t'/stream-transcription-websocket?',\n\t\t\t`media-encoding=pcm&`,\n\t\t\t`sample-rate=${\n\t\t\t\tLANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000'\n\t\t\t}&`,\n\t\t\t`language-code=${languageCode}`,\n\t\t].join('');\n\n\t\tconst signedUrl = Signer.signUrl(\n\t\t\turl,\n\t\t\tcredentials,\n\t\t\t{ region, service: 'transcribe' },\n\t\t\t300\n\t\t);\n\n\t\treturn signedUrl;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
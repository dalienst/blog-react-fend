{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateStreamProcessorRequest, CreateStreamProcessorResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateStreamProcessorCommand, serializeAws_json1_1CreateStreamProcessorCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates an Amazon Rekognition stream processor that you can use to detect and recognize faces in a streaming video.</p>\n *         <p>Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams. Amazon Rekognition Video sends analysis results to Amazon Kinesis Data Streams.</p>\n *         <p>You provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream (<code>Output</code>) stream. You also specify the\n *             face recognition criteria in <code>Settings</code>. For example, the collection containing faces that you want to recognize.\n *             Use <code>Name</code> to assign an identifier for the stream processor. You use <code>Name</code>\n *             to manage the stream processor. For example, you can start processing the source video by calling <a>StartStreamProcessor</a> with\n *             the <code>Name</code> field. </p>\n *         <p>After you have finished analyzing a streaming video, use <a>StopStreamProcessor</a> to\n *         stop processing. You can delete the stream processor by calling <a>DeleteStreamProcessor</a>.</p>\n */\n\nvar CreateStreamProcessorCommand =\n/** @class */\nfunction (_super) {\n  __extends(CreateStreamProcessorCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CreateStreamProcessorCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CreateStreamProcessorCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"CreateStreamProcessorCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateStreamProcessorRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateStreamProcessorResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CreateStreamProcessorCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CreateStreamProcessorCommand(input, context);\n  };\n\n  CreateStreamProcessorCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CreateStreamProcessorCommand(output, context);\n  };\n\n  return CreateStreamProcessorCommand;\n}($Command);\n\nexport { CreateStreamProcessorCommand };","map":{"version":3,"mappings":";AACA,SAASA,4BAAT,EAAuCC,6BAAvC,QAA4E,oBAA5E;AACA,SACEC,kDADF,EAEEC,gDAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAkDC,kDAAlD,CAKE;AACA;;;AAEA,wCAAqBC,KAArB,EAA6D;AAA7D,gBACE;AACAC,yBAAO,IAFT;;AAAqBC;iBAAwC,CAG3D;AACD;AAED;;;;;AAGAC,uEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;AAE9B,SAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AAEA,QAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;AAEQ,cAAM,GAAKF,aAAa,OAAxB;AACR,QAAMQ,UAAU,GAAG,mBAAnB;AACA,QAAMC,WAAW,GAAG,8BAApB;AACA,QAAMC,uBAAuB,GAA4B;AACvDC,YAAM,QADiD;AAEvDH,gBAAU,YAF6C;AAGvDC,iBAAW,aAH4C;AAIvDG,6BAAuB,EAAEzB,4BAA4B,CAAC0B,kBAJC;AAKvDC,8BAAwB,EAAE1B,6BAA6B,CAACyB;AALD,KAAzD;AAOQ,sBAAc,GAAKb,aAAa,eAAhC;AACR,WAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;AACrC,2BAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;AAAsE,KAFnE,EAGLS,uBAHK,CAAP;AAKD,GAzBD;;AA2BQZ,qDAAR,UAAkBH,KAAlB,EAA4DuB,OAA5D,EAAmF;AACjF,WAAO5B,gDAAgD,CAACK,KAAD,EAAQuB,OAAR,CAAvD;AACD,GAFO;;AAIApB,uDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;AACjE,WAAO7B,kDAAkD,CAAC8B,MAAD,EAASD,OAAT,CAAzD;AACD,GAFO;;AAMV;AAAC,CAtDD,CAAkDzB,QAAlD","names":["CreateStreamProcessorRequest","CreateStreamProcessorResponse","deserializeAws_json1_1CreateStreamProcessorCommand","serializeAws_json1_1CreateStreamProcessorCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","CreateStreamProcessorCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/home/dalienst/node_modules/@aws-sdk/client-rekognition/commands/CreateStreamProcessorCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { CreateStreamProcessorRequest, CreateStreamProcessorResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1CreateStreamProcessorCommand,\n  serializeAws_json1_1CreateStreamProcessorCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type CreateStreamProcessorCommandInput = CreateStreamProcessorRequest;\nexport type CreateStreamProcessorCommandOutput = CreateStreamProcessorResponse & __MetadataBearer;\n\n/**\n * <p>Creates an Amazon Rekognition stream processor that you can use to detect and recognize faces in a streaming video.</p>\n *         <p>Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams. Amazon Rekognition Video sends analysis results to Amazon Kinesis Data Streams.</p>\n *         <p>You provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream (<code>Output</code>) stream. You also specify the\n *             face recognition criteria in <code>Settings</code>. For example, the collection containing faces that you want to recognize.\n *             Use <code>Name</code> to assign an identifier for the stream processor. You use <code>Name</code>\n *             to manage the stream processor. For example, you can start processing the source video by calling <a>StartStreamProcessor</a> with\n *             the <code>Name</code> field. </p>\n *         <p>After you have finished analyzing a streaming video, use <a>StopStreamProcessor</a> to\n *         stop processing. You can delete the stream processor by calling <a>DeleteStreamProcessor</a>.</p>\n */\nexport class CreateStreamProcessorCommand extends $Command<\n  CreateStreamProcessorCommandInput,\n  CreateStreamProcessorCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: CreateStreamProcessorCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<CreateStreamProcessorCommandInput, CreateStreamProcessorCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"CreateStreamProcessorCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: CreateStreamProcessorRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateStreamProcessorResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: CreateStreamProcessorCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1CreateStreamProcessorCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<CreateStreamProcessorCommandOutput> {\n    return deserializeAws_json1_1CreateStreamProcessorCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}
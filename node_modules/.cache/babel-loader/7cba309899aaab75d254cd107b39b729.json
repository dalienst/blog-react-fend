{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\n\nvar AWSS3ProviderManagedUpload =\n/** @class */\nfunction () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    // Defaults\n    this.minPartSize = 5 * 1024 * 1024; // in MB\n\n    this.queueSize = 4; // Data for current upload\n\n    this.body = null;\n    this.params = null;\n    this.opts = null;\n    this.completedParts = [];\n    this.uploadId = null; // Progress reporting\n\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n    this.s3client = this._createNewS3Client(opts, emitter);\n  }\n\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, putObjectCommand, _b, numberOfPartsToUpload, parts, start, error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 10,, 12]);\n\n            _a = this;\n            return [4\n            /*yield*/\n            , this.validateAndSanitizeBody(this.params.Body)];\n\n          case 1:\n            _a.body = _c.sent();\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3\n            /*break*/\n            , 2]; // Multipart upload is not required. Upload the sanitized body as is\n\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [2\n            /*return*/\n            , this.s3client.send(putObjectCommand)];\n\n          case 2:\n            // Step 1: Initiate the multi part upload\n            _b = this;\n            return [4\n            /*yield*/\n            , this.createMultiPartUpload()];\n\n          case 3:\n            // Step 1: Initiate the multi part upload\n            _b.uploadId = _c.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n            parts = this.createParts();\n            start = 0;\n            _c.label = 4;\n\n          case 4:\n            if (!(start < numberOfPartsToUpload)) return [3\n            /*break*/\n            , 7]; // Upload as many as `queueSize` parts simultaneously\n\n            return [4\n            /*yield*/\n            , this.uploadParts(this.uploadId, parts.slice(start, start + this.queueSize))];\n\n          case 5:\n            // Upload as many as `queueSize` parts simultaneously\n            _c.sent();\n\n            _c.label = 6;\n\n          case 6:\n            start += this.queueSize;\n            return [3\n            /*break*/\n            , 4];\n\n          case 7:\n            parts.map(function (part) {\n              _this.removeEventListener(part);\n            });\n            return [4\n            /*yield*/\n            , this.finishMultiPartUpload(this.uploadId)];\n\n          case 8:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 9:\n            return [3\n            /*break*/\n            , 12];\n\n          case 10:\n            error_1 = _c.sent(); // if any error is thrown, call cleanup\n\n            return [4\n            /*yield*/\n            , this.cleanup(this.uploadId)];\n\n          case 11:\n            // if any error is thrown, call cleanup\n            _c.sent();\n\n            logger.error('Error. Cancelling the multipart upload.');\n            throw error_1;\n\n          case 12:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createParts = function () {\n    try {\n      var parts = [];\n\n      for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n        var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n        parts.push({\n          bodyPart: this.body.slice(bodyStart, bodyEnd),\n          partNumber: parts.length + 1,\n          emitter: new events.EventEmitter(),\n          _lastUploadedBytes: 0\n        });\n        bodyStart += this.minPartSize;\n      }\n\n      return parts;\n    } catch (error) {\n      logger.error(error);\n      throw error;\n    }\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, response, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4\n            /*yield*/\n            , this.s3client.send(createMultiPartUploadCommand)];\n\n          case 1:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2\n            /*return*/\n            , response.UploadId];\n\n          case 2:\n            error_2 = _a.sent();\n            logger.error(error_2);\n            throw error_2;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n\n\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allResults, i, error_3;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Promise.all(parts.map(function (part) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      this.setupEventListener(part);\n                      options = {\n                        emitter: part.emitter\n                      };\n                      _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                      return [4\n                      /*yield*/\n                      , this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({\n                        PartNumber: part.partNumber,\n                        Body: part.bodyPart,\n                        UploadId: uploadId,\n                        Key: Key,\n                        Bucket: Bucket\n                      }, SSECustomerAlgorithm && {\n                        SSECustomerAlgorithm: SSECustomerAlgorithm\n                      }), SSECustomerKey && {\n                        SSECustomerKey: SSECustomerKey\n                      }), SSECustomerKeyMD5 && {\n                        SSECustomerKeyMD5: SSECustomerKeyMD5\n                      })), options)];\n\n                    case 1:\n                      res = _b.sent();\n                      return [2\n                      /*return*/\n                      , res];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            allResults = _a.sent(); // The order of resolved promises is the same as input promise order.\n\n            for (i = 0; i < allResults.length; i++) {\n              this.completedParts.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_3 = _a.sent();\n            logger.error('Error happened while uploading a part. Cancelling the multipart upload');\n            throw error_3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, data, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.completedParts\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.s3client.send(completeUploadCommand)];\n\n          case 2:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data.Key];\n\n          case 3:\n            error_4 = _a.sent();\n            logger.error('Error happened while finishing the upload.');\n            throw error_4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4\n            /*yield*/\n            , this.s3client.send(new AbortMultipartUploadCommand(input))];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.s3client.send(new ListPartsCommand(input))];\n\n          case 2:\n            data = _a.sent();\n\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multipart upload clean up failed.');\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n    part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n    part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n  };\n\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n\n    part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.isGenericObject(body)) {\n          // Any javascript object\n          return [2\n          /*return*/\n          , JSON.stringify(body)];\n        } else {\n          // Files, arrayBuffer etc\n          return [2\n          /*return*/\n          , body];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n\n  return AWSS3ProviderManagedUpload;\n}();\n\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","PutObjectCommand","CreateMultipartUploadCommand","UploadPartCommand","CompleteMultipartUploadCommand","ListPartsCommand","AbortMultipartUploadCommand","SEND_UPLOAD_PROGRESS_EVENT","SEND_DOWNLOAD_PROGRESS_EVENT","events","createPrefixMiddleware","prefixMiddlewareOptions","autoAdjustClockskewMiddleware","autoAdjustClockskewMiddlewareOptions","createS3Client","logger","params","opts","emitter","s3client","_createNewS3Client","AWSS3ProviderManagedUpload","_a","validateAndSanitizeBody","Body","body","_c","totalBytesToUpload","byteLength","minPartSize","putObjectCommand","send","_b","createMultiPartUpload","uploadId","numberOfPartsToUpload","Math","ceil","parts","createParts","start","uploadParts","slice","queueSize","map","_this","removeEventListener","part","finishMultiPartUpload","cleanup","error","error_1","bodyStart","bodyEnd","min","push","bodyPart","partNumber","length","EventEmitter","_lastUploadedBytes","createMultiPartUploadCommand","response","debug","UploadId","error_2","Promise","all","setupEventListener","options","Key","Bucket","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","__assign","PartNumber","res","allResults","i","completedParts","ETag","error_3","input","MultipartUpload","Parts","completeUploadCommand","data","error_4","bytesUploaded","Error","removeAllListeners","on","progressChanged","progress","loaded","incrementalUpdate","emit","total","key","undefined","size","path","isGenericObject","JSON","stringify","config","middlewareStack","add"],"sources":["/home/dalienst/node_modules/@aws-amplify/storage/src/providers/AWSS3ProviderManagedUpload.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport {\n\tPutObjectCommand,\n\tPutObjectRequest,\n\tCreateMultipartUploadCommand,\n\tUploadPartCommand,\n\tCompleteMultipartUploadCommand,\n\tCompleteMultipartUploadCommandInput,\n\tListPartsCommand,\n\tAbortMultipartUploadCommand,\n\tCompletedPart,\n\tS3Client,\n} from '@aws-sdk/client-s3';\nimport {\n\tSEND_UPLOAD_PROGRESS_EVENT,\n\tSEND_DOWNLOAD_PROGRESS_EVENT,\n\tAxiosHttpHandlerOptions,\n} from './axios-http-handler';\nimport * as events from 'events';\nimport {\n\tcreatePrefixMiddleware,\n\tprefixMiddlewareOptions,\n\tautoAdjustClockskewMiddleware,\n\tautoAdjustClockskewMiddlewareOptions,\n\tcreateS3Client,\n} from '../common/S3ClientUtils';\n\nconst logger = new Logger('AWSS3ProviderManagedUpload');\n\nexport declare interface Part {\n\tbodyPart: any;\n\tpartNumber: number;\n\temitter: events.EventEmitter;\n\tetag?: string;\n\t_lastUploadedBytes: number;\n}\n\nexport class AWSS3ProviderManagedUpload {\n\t// Defaults\n\tprotected minPartSize = 5 * 1024 * 1024; // in MB\n\tprivate queueSize = 4;\n\n\t// Data for current upload\n\tprivate body = null;\n\tprivate params: PutObjectRequest = null;\n\tprivate opts = null;\n\tprivate completedParts: CompletedPart[] = [];\n\tprivate s3client: S3Client;\n\tprivate uploadId = null;\n\n\t// Progress reporting\n\tprivate bytesUploaded = 0;\n\tprivate totalBytesToUpload = 0;\n\tprivate emitter: events.EventEmitter = null;\n\n\tconstructor(params: PutObjectRequest, opts, emitter: events.EventEmitter) {\n\t\tthis.params = params;\n\t\tthis.opts = opts;\n\t\tthis.emitter = emitter;\n\t\tthis.s3client = this._createNewS3Client(opts, emitter);\n\t}\n\n\tpublic async upload() {\n\t\ttry {\n\t\t\tthis.body = await this.validateAndSanitizeBody(this.params.Body);\n\t\t\tthis.totalBytesToUpload = this.byteLength(this.body);\n\t\t\tif (this.totalBytesToUpload <= this.minPartSize) {\n\t\t\t\t// Multipart upload is not required. Upload the sanitized body as is\n\t\t\t\tthis.params.Body = this.body;\n\t\t\t\tconst putObjectCommand = new PutObjectCommand(this.params);\n\t\t\t\treturn this.s3client.send(putObjectCommand);\n\t\t\t} else {\n\t\t\t\t// Step 1: Initiate the multi part upload\n\t\t\t\tthis.uploadId = await this.createMultiPartUpload();\n\n\t\t\t\t// Step 2: Upload chunks in parallel as requested\n\t\t\t\tconst numberOfPartsToUpload = Math.ceil(\n\t\t\t\t\tthis.totalBytesToUpload / this.minPartSize\n\t\t\t\t);\n\n\t\t\t\tconst parts: Part[] = this.createParts();\n\t\t\t\tfor (\n\t\t\t\t\tlet start = 0;\n\t\t\t\t\tstart < numberOfPartsToUpload;\n\t\t\t\t\tstart += this.queueSize\n\t\t\t\t) {\n\n\t\t\t\t\t// Upload as many as `queueSize` parts simultaneously\n\t\t\t\t\tawait this.uploadParts(\n\t\t\t\t\t\tthis.uploadId,\n\t\t\t\t\t\tparts.slice(start, start + this.queueSize)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tparts.map(part => {\n\t\t\t\t\tthis.removeEventListener(part);\n\t\t\t\t});\n\n\t\t\t\t// Step 3: Finalize the upload such that S3 can recreate the file\n\t\t\t\treturn await this.finishMultiPartUpload(this.uploadId);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// if any error is thrown, call cleanup\n\t\t\tawait this.cleanup(this.uploadId);\n\t\t\tlogger.error('Error. Cancelling the multipart upload.');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate createParts(): Part[] {\n\t\ttry {\n\t\t\tconst parts: Part[] = [];\n\t\t\tfor (let bodyStart = 0; bodyStart < this.totalBytesToUpload; ) {\n\t\t\t\tconst bodyEnd = Math.min(\n\t\t\t\t\tbodyStart + this.minPartSize,\n\t\t\t\t\tthis.totalBytesToUpload\n\t\t\t\t);\n\t\t\t\tparts.push({\n\t\t\t\t\tbodyPart: this.body.slice(bodyStart, bodyEnd),\n\t\t\t\t\tpartNumber: parts.length + 1,\n\t\t\t\t\temitter: new events.EventEmitter(),\n\t\t\t\t\t_lastUploadedBytes: 0,\n\t\t\t\t});\n\t\t\t\tbodyStart += this.minPartSize;\n\t\t\t}\n\t\t\treturn parts;\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async createMultiPartUpload() {\n\t\ttry {\n\t\t\tconst createMultiPartUploadCommand = new CreateMultipartUploadCommand(\n\t\t\t\tthis.params\n\t\t\t);\n\t\t\tconst response = await this.s3client.send(createMultiPartUploadCommand);\n\t\t\tlogger.debug(response.UploadId);\n\t\t\treturn response.UploadId;\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @private Not to be extended outside of tests\n\t * @VisibleFotTesting\n\t */\n\tprotected async uploadParts(uploadId: string, parts: Part[]) {\n\t\ttry {\n\t\t\tconst allResults = await Promise.all(\n\t\t\t\tparts.map(async part => {\n\t\t\t\t\tthis.setupEventListener(part);\n\t\t\t\t\tconst options: AxiosHttpHandlerOptions = { emitter: part.emitter };\n\t\t\t\t\tconst {\n\t\t\t\t\t\tKey,\n\t\t\t\t\t\tBucket,\n\t\t\t\t\t\tSSECustomerAlgorithm,\n\t\t\t\t\t\tSSECustomerKey,\n\t\t\t\t\t\tSSECustomerKeyMD5,\n\t\t\t\t\t} = this.params;\n\t\t\t\t\tconst res = await this.s3client.send(\n\t\t\t\t\t\tnew UploadPartCommand({\n\t\t\t\t\t\t\tPartNumber: part.partNumber,\n\t\t\t\t\t\t\tBody: part.bodyPart,\n\t\t\t\t\t\t\tUploadId: uploadId,\n\t\t\t\t\t\t\tKey,\n\t\t\t\t\t\t\tBucket,\n\t\t\t\t\t\t\t...(SSECustomerAlgorithm && { SSECustomerAlgorithm }),\n\t\t\t\t\t\t\t...(SSECustomerKey && { SSECustomerKey }),\n\t\t\t\t\t\t\t...(SSECustomerKeyMD5 && { SSECustomerKeyMD5 }),\n\t\t\t\t\t\t}),\n\t\t\t\t\t\toptions\n\t\t\t\t\t);\n\t\t\t\t\treturn res;\n\t\t\t\t})\n\t\t\t);\n\t\t\t// The order of resolved promises is the same as input promise order.\n\t\t\tfor (let i = 0; i < allResults.length; i++) {\n\t\t\t\tthis.completedParts.push({\n\t\t\t\t\tPartNumber: parts[i].partNumber,\n\t\t\t\t\tETag: allResults[i].ETag,\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(\n\t\t\t\t'Error happened while uploading a part. Cancelling the multipart upload'\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async finishMultiPartUpload(uploadId: string) {\n\t\tconst input: CompleteMultipartUploadCommandInput = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t\tMultipartUpload: { Parts: this.completedParts },\n\t\t};\n\t\tconst completeUploadCommand = new CompleteMultipartUploadCommand(input);\n\t\ttry {\n\t\t\tconst data = await this.s3client.send(completeUploadCommand);\n\t\t\treturn data.Key;\n\t\t} catch (error) {\n\t\t\tlogger.error('Error happened while finishing the upload.');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async cleanup(uploadId: string) {\n\t\t// Reset this's state\n\t\tthis.body = null;\n\t\tthis.completedParts = [];\n\t\tthis.bytesUploaded = 0;\n\t\tthis.totalBytesToUpload = 0;\n\n\t\tconst input = {\n\t\t\tBucket: this.params.Bucket,\n\t\t\tKey: this.params.Key,\n\t\t\tUploadId: uploadId,\n\t\t};\n\n\t\tawait this.s3client.send(new AbortMultipartUploadCommand(input));\n\n\t\t// verify that all parts are removed.\n\t\tconst data = await this.s3client.send(new ListPartsCommand(input));\n\n\t\tif (data && data.Parts && data.Parts.length > 0) {\n\t\t\tthrow new Error('Multipart upload clean up failed.');\n\t\t}\n\t}\n\n\tprivate removeEventListener(part: Part) {\n\t\tpart.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n\t\tpart.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n\t}\n\n\tprivate setupEventListener(part: Part) {\n\t\tpart.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, progress => {\n\t\t\tthis.progressChanged(\n\t\t\t\tpart.partNumber,\n\t\t\t\tprogress.loaded - part._lastUploadedBytes\n\t\t\t);\n\t\t\tpart._lastUploadedBytes = progress.loaded;\n\t\t});\n\t}\n\n\tprivate progressChanged(partNumber: number, incrementalUpdate: number) {\n\t\tthis.bytesUploaded += incrementalUpdate;\n\t\tthis.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytesToUpload,\n\t\t\tpart: partNumber,\n\t\t\tkey: this.params.Key,\n\t\t});\n\t}\n\n\tprivate byteLength(input: any) {\n\t\tif (input === null || input === undefined) return 0;\n\t\tif (typeof input.byteLength === 'number') {\n\t\t\treturn input.byteLength;\n\t\t} else if (typeof input.length === 'number') {\n\t\t\treturn input.length;\n\t\t} else if (typeof input.size === 'number') {\n\t\t\treturn input.size;\n\t\t} else if (typeof input.path === 'string') {\n\t\t\t/* NodeJs Support\n\t\t\treturn require('fs').lstatSync(input.path).size;\n\t\t\t*/\n\t\t} else {\n\t\t\tthrow new Error('Cannot determine length of ' + input);\n\t\t}\n\t}\n\n\tprivate async validateAndSanitizeBody(body: any): Promise<any> {\n\t\tif (this.isGenericObject(body)) {\n\t\t\t// Any javascript object\n\t\t\treturn JSON.stringify(body);\n\t\t} else {\n\t\t\t// Files, arrayBuffer etc\n\t\t\treturn body;\n\t\t}\n\t\t/* TODO: streams and files for nodejs \n\t\tif (\n\t\t\ttypeof body.path === 'string' &&\n\t\t\trequire('fs').lstatSync(body.path).size > 0\n\t\t) {\n\t\t\treturn body;\n\t\t} */\n\t}\n\n\tprivate isGenericObject(body: any): body is Object {\n\t\tif (body !== null && typeof body === 'object') {\n\t\t\ttry {\n\t\t\t\treturn !(this.byteLength(body) >= 0);\n\t\t\t} catch (error) {\n\t\t\t\t// If we cannot determine the length of the body, consider it\n\t\t\t\t// as a generic object and upload a stringified version of it\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _createNewS3Client(config, emitter?: events.EventEmitter) {\n\t\tconst s3client = createS3Client(config, emitter);\n\t\ts3client.middlewareStack.add(\n\t\t\tcreatePrefixMiddleware(this.opts, this.params.Key),\n\t\t\tprefixMiddlewareOptions\n\t\t);\n\t\ts3client.middlewareStack.add(\n\t\t\tautoAdjustClockskewMiddleware(s3client.config),\n\t\t\tautoAdjustClockskewMiddlewareOptions\n\t\t);\n\t\treturn s3client;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
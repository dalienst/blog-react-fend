{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { KinesisClient, PutRecordsCommand } from '@aws-sdk/client-kinesis';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\nvar logger = new Logger('AWSKinesisProvider'); // events buffer\n\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar RESEND_LIMIT = 5;\n\nvar AWSKinesisProvider =\n/** @class */\nfunction () {\n  function AWSKinesisProvider(config) {\n    this._buffer = [];\n    this._config = config || {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n\n    this._setupTimer();\n  }\n\n  AWSKinesisProvider.prototype._setupTimer = function () {\n    var _this = this;\n\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var _a = this._config,\n        flushSize = _a.flushSize,\n        flushInterval = _a.flushInterval;\n    this._timer = setInterval(function () {\n      var size = _this._buffer.length < flushSize ? _this._buffer.length : flushSize;\n      var events = [];\n\n      for (var i = 0; i < size; i += 1) {\n        var params = _this._buffer.shift();\n\n        events.push(params);\n      }\n\n      _this._sendFromBuffer(events);\n    }, flushInterval);\n  };\n  /**\n   * get the category of the plugin\n   */\n\n\n  AWSKinesisProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AWSKinesisProvider.prototype.getProviderName = function () {\n    return 'AWSKinesis';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AWSKinesisProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf);\n\n    this._setupTimer();\n\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AWSKinesisProvider.prototype.record = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials\n            });\n            return [2\n            /*return*/\n            , this._putToBuffer(params)];\n        }\n      });\n    });\n  };\n\n  AWSKinesisProvider.prototype.updateEndpoint = function () {\n    logger.debug('updateEndpoint is not implemented in Kinesis provider');\n    return Promise.resolve(true);\n  };\n  /**\n   * @private\n   * @param params - params for the event recording\n   * Put events into buffer\n   */\n\n\n  AWSKinesisProvider.prototype._putToBuffer = function (params) {\n    if (this._buffer.length < BUFFER_SIZE) {\n      this._buffer.push(params);\n\n      return Promise.resolve(true);\n    } else {\n      logger.debug('exceed analytics events buffer size');\n      return Promise.reject(false);\n    }\n  };\n\n  AWSKinesisProvider.prototype._sendFromBuffer = function (events) {\n    var _this = this; // collapse events by credentials\n    // events = [ {params} ]\n\n\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n\n    for (var i = 0; i < events.length; i += 1) {\n      var cred = events[i].credentials;\n\n      if (i === 0) {\n        group.push(events[i]);\n        preCred = cred;\n      } else {\n        if (cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(events[i]);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(events[i]);\n          preCred = cred;\n        }\n      }\n    }\n\n    eventsGroups.push(group);\n    eventsGroups.map(function (evts) {\n      _this._sendEvents(evts);\n    });\n  };\n\n  AWSKinesisProvider.prototype._sendEvents = function (group) {\n    var _this = this;\n\n    if (group.length === 0) {\n      return;\n    }\n\n    var _a = group[0],\n        config = _a.config,\n        credentials = _a.credentials;\n\n    var initClients = this._init(config, credentials);\n\n    if (!initClients) return false;\n    var records = {};\n    group.map(function (params) {\n      // spit by streamName\n      var evt = params.event;\n      var streamName = evt.streamName;\n\n      if (records[streamName] === undefined) {\n        records[streamName] = [];\n      }\n\n      var bufferData = evt.data && typeof evt.data !== 'string' ? JSON.stringify(evt.data) : evt.data;\n      var Data = fromUtf8(bufferData);\n      var PartitionKey = evt.partitionKey || 'partition-' + credentials.identityId;\n      var record = {\n        Data: Data,\n        PartitionKey: PartitionKey\n      };\n      records[streamName].push(record);\n    });\n    Object.keys(records).map(function (streamName) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var command, err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              logger.debug('putting records to kinesis with records', records[streamName]);\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1, 3,, 4]);\n\n              command = new PutRecordsCommand({\n                Records: records[streamName],\n                StreamName: streamName\n              });\n              return [4\n              /*yield*/\n              , this._kinesis.send(command)];\n\n            case 2:\n              _a.sent();\n\n              logger.debug('Upload records to stream', streamName);\n              return [3\n              /*break*/\n              , 4];\n\n            case 3:\n              err_1 = _a.sent();\n              logger.debug('Failed to upload records to Kinesis', err_1);\n              return [3\n              /*break*/\n              , 4];\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AWSKinesisProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n\n    if (this._kinesis && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n\n    this._config.credentials = credentials;\n    var region = config.region,\n        endpoint = config.endpoint;\n    return this._initKinesis(region, endpoint, credentials);\n  };\n\n  AWSKinesisProvider.prototype._initKinesis = function (region, endpoint, credentials) {\n    logger.debug('initialize kinesis with credentials', credentials);\n    this._kinesis = new KinesisClient({\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAmplifyUserAgent(),\n      endpoint: endpoint\n    });\n    return true;\n  };\n  /**\n   * @private\n   * check if current credentials exists\n   */\n\n\n  AWSKinesisProvider.prototype._getCredentials = function () {\n    var _this = this;\n\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', _this._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n\n  return AWSKinesisProvider;\n}();\n\nexport { AWSKinesisProvider };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","KinesisClient","PutRecordsCommand","fromUtf8","logger","BUFFER_SIZE","FLUSH_SIZE","FLUSH_INTERVAL","RESEND_LIMIT","config","_buffer","_config","bufferSize","flushSize","flushInterval","resendLimit","_setupTimer","AWSKinesisProvider","_timer","clearInterval","setInterval","size","_this","length","events","i","params","shift","push","_sendFromBuffer","debug","conf","Object","assign","_getCredentials","credentials","_a","Promise","resolve","_putToBuffer","reject","eventsGroups","preCred","group","cred","sessionToken","identityId","map","_sendEvents","evts","initClients","_init","records","evt","event","streamName","undefined","bufferData","data","JSON","stringify","Data","PartitionKey","partitionKey","record","keys","command","Records","StreamName","_kinesis","send","err_1","endpoint","_initKinesis","region","customUserAgent","get","then","shear","catch","err"],"sources":["/home/dalienst/node_modules/@aws-amplify/analytics/src/Providers/AWSKinesisProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { KinesisClient, PutRecordsCommand } from '@aws-sdk/client-kinesis';\nimport { AnalyticsProvider } from '../types';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\n\nconst logger = new Logger('AWSKinesisProvider');\n\n// events buffer\nconst BUFFER_SIZE = 1000;\nconst FLUSH_SIZE = 100;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\nconst RESEND_LIMIT = 5;\n\nexport class AWSKinesisProvider implements AnalyticsProvider {\n\tprotected _config;\n\tprivate _kinesis;\n\tprivate _buffer;\n\tprivate _timer;\n\n\tconstructor(config?) {\n\t\tthis._buffer = [];\n\t\tthis._config = config || {};\n\t\tthis._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n\t\tthis._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n\n\t\tthis._setupTimer();\n\t}\n\n\tprivate _setupTimer() {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\t\tconst { flushSize, flushInterval } = this._config;\n\t\tthis._timer = setInterval(() => {\n\t\t\tconst size =\n\t\t\t\tthis._buffer.length < flushSize ? this._buffer.length : flushSize;\n\t\t\tconst events = [];\n\t\t\tfor (let i = 0; i < size; i += 1) {\n\t\t\t\tconst params = this._buffer.shift();\n\t\t\t\tevents.push(params);\n\t\t\t}\n\t\t\tthis._sendFromBuffer(events);\n\t\t}, flushInterval);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn 'Analytics';\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tpublic getProviderName(): string {\n\t\treturn 'AWSKinesis';\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config || {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\n\t\tthis._setupTimer();\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tpublic async record(params): Promise<boolean> {\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials) return Promise.resolve(false);\n\n\t\tObject.assign(params, { config: this._config, credentials });\n\n\t\treturn this._putToBuffer(params);\n\t}\n\n\tpublic updateEndpoint() {\n\t\tlogger.debug('updateEndpoint is not implemented in Kinesis provider');\n\t\treturn Promise.resolve(true);\n\t}\n\n\t/**\n\t * @private\n\t * @param params - params for the event recording\n\t * Put events into buffer\n\t */\n\tprivate _putToBuffer(params) {\n\t\tif (this._buffer.length < BUFFER_SIZE) {\n\t\t\tthis._buffer.push(params);\n\t\t\treturn Promise.resolve(true);\n\t\t} else {\n\t\t\tlogger.debug('exceed analytics events buffer size');\n\t\t\treturn Promise.reject(false);\n\t\t}\n\t}\n\n\tprivate _sendFromBuffer(events) {\n\t\t// collapse events by credentials\n\t\t// events = [ {params} ]\n\t\tconst eventsGroups = [];\n\t\tlet preCred = null;\n\t\tlet group = [];\n\t\tfor (let i = 0; i < events.length; i += 1) {\n\t\t\tconst cred = events[i].credentials;\n\t\t\tif (i === 0) {\n\t\t\t\tgroup.push(events[i]);\n\t\t\t\tpreCred = cred;\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tcred.sessionToken === preCred.sessionToken &&\n\t\t\t\t\tcred.identityId === preCred.identityId\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('no change for cred, put event in the same group');\n\t\t\t\t\tgroup.push(events[i]);\n\t\t\t\t} else {\n\t\t\t\t\teventsGroups.push(group);\n\t\t\t\t\tgroup = [];\n\t\t\t\t\tgroup.push(events[i]);\n\t\t\t\t\tpreCred = cred;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\teventsGroups.push(group);\n\n\t\teventsGroups.map(evts => {\n\t\t\tthis._sendEvents(evts);\n\t\t});\n\t}\n\n\tprotected _sendEvents(group) {\n\t\tif (group.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { config, credentials } = group[0];\n\n\t\tconst initClients = this._init(config, credentials);\n\t\tif (!initClients) return false;\n\n\t\tconst records = {};\n\n\t\tgroup.map(params => {\n\t\t\t// spit by streamName\n\t\t\tconst evt = params.event;\n\t\t\tconst { streamName } = evt;\n\t\t\tif (records[streamName] === undefined) {\n\t\t\t\trecords[streamName] = [];\n\t\t\t}\n\n\t\t\tconst bufferData =\n\t\t\t\tevt.data && typeof evt.data !== 'string'\n\t\t\t\t\t? JSON.stringify(evt.data)\n\t\t\t\t\t: evt.data;\n\t\t\tconst Data = fromUtf8(bufferData);\n\t\t\tconst PartitionKey =\n\t\t\t\tevt.partitionKey || 'partition-' + credentials.identityId;\n\t\t\tconst record = { Data, PartitionKey };\n\t\t\trecords[streamName].push(record);\n\t\t});\n\n\t\tObject.keys(records).map(async streamName => {\n\t\t\tlogger.debug(\n\t\t\t\t'putting records to kinesis with records',\n\t\t\t\trecords[streamName]\n\t\t\t);\n\t\t\ttry {\n\t\t\t\tconst command: PutRecordsCommand = new PutRecordsCommand({\n\t\t\t\t\tRecords: records[streamName],\n\t\t\t\t\tStreamName: streamName,\n\t\t\t\t});\n\t\t\t\tawait this._kinesis.send(command);\n\t\t\t\tlogger.debug('Upload records to stream', streamName);\n\t\t\t} catch (err) {\n\t\t\t\tlogger.debug('Failed to upload records to Kinesis', err);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _init(config, credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis._kinesis &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for analytics config, directly return from init');\n\t\t\treturn true;\n\t\t}\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region, endpoint } = config;\n\n\t\treturn this._initKinesis(region, endpoint, credentials);\n\t}\n\n\tprivate _initKinesis(region, endpoint, credentials) {\n\t\tlogger.debug('initialize kinesis with credentials', credentials);\n\t\tthis._kinesis = new KinesisClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\tendpoint,\n\t\t});\n\t\treturn true;\n\t}\n\n\t/**\n\t * @private\n\t * check if current credentials exists\n\t */\n\tprivate _getCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return null;\n\t\t\t\tlogger.debug('set credentials for analytics', this._config.credentials);\n\t\t\t\treturn Credentials.shear(credentials);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\t\treturn null;\n\t\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
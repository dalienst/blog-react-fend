{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var propertiesToTest = ['name', 'alias', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey]; // is bot config correct\n\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * @private\n   * @deprecated\n   * This is used internally by 'sendMessage' to call onComplete callback\n   * for a bot if configured\n   */\n\n\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this; // Check if state is fulfilled to resolve onFullfilment promise\n\n\n    logger.debug('postContent state', data.dialogState);\n\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, data);\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 2:\n            credentials = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n\n          case 4:\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 9];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _c.label = 5;\n\n          case 5:\n            _c.trys.push([5, 7,, 8]);\n\n            postTextCommand = new PostTextCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postTextCommand)];\n\n          case 6:\n            data = _c.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , data];\n\n          case 7:\n            err_1 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 8:\n            return [3\n            /*break*/\n            , 21];\n\n          case 9:\n            content = message.content, messageType = message.options.messageType;\n            if (!(messageType === 'voice')) return [3\n            /*break*/\n            , 13];\n\n            if (typeof content !== 'object') {\n              return [2\n              /*return*/\n              , Promise.reject('invalid content type')];\n            }\n\n            if (!(content instanceof Uint8Array)) return [3\n            /*break*/\n            , 10];\n            _a = content;\n            return [3\n            /*break*/\n            , 12];\n\n          case 10:\n            return [4\n            /*yield*/\n            , convert(content)];\n\n          case 11:\n            _a = _c.sent();\n            _c.label = 12;\n\n          case 12:\n            inputStream = _a;\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              userId: credentials.identityId,\n              accept: 'audio/mpeg',\n              inputStream: inputStream\n            };\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (typeof content !== 'string') return [2\n            /*return*/\n            , Promise.reject('invalid content type')];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'text/plain; charset=utf-8',\n              inputStream: content,\n              userId: credentials.identityId,\n              accept: 'audio/mpeg'\n            };\n            _c.label = 14;\n\n          case 14:\n            logger.debug('postContent to lex', message);\n            _c.label = 15;\n\n          case 15:\n            _c.trys.push([15, 20,, 21]);\n\n            postContentCommand = new PostContentCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postContentCommand)];\n\n          case 16:\n            data = _c.sent();\n            if (!data.audioStream) return [3\n            /*break*/\n            , 18];\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 17:\n            _b = _c.sent();\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            _b = undefined;\n            _c.label = 19;\n\n          case 19:\n            audioArray = _b;\n            response = __assign(__assign({}, data), {\n              audioStream: audioArray\n            });\n            this.reportBotStatus(response, botname);\n            return [2\n            /*return*/\n            , response];\n\n          case 20:\n            err_2 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 21:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":{"version":3,"mappings":"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","names":["AbstractInteractionsProvider","LexRuntimeServiceClient","PostTextCommand","PostContentCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","convert","logger","__extends","options","_super","_this","_botsCompleteCallback","AWSLexProvider","config","propertiesToTest","Object","keys","forEach","botConfig","botKey","every","Error","configure","call","data","botname","debug","dialogState","setTimeout","_config","onComplete","message","Promise","reject","get","credentials","_c","lexRuntimeServiceClient","region","customUserAgent","params","botAlias","alias","botName","inputText","userId","identityId","postTextCommand","send","reportBotStatus","err_1","content","messageType","Uint8Array","_a","inputStream","contentType","accept","postContentCommand","audioStream","_b","audioArray","response","err_2","callback"],"sources":["/home/dalienst/node_modules/@aws-amplify/interactions/src/Providers/AWSLexProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport {\n\tInteractionsOptions,\n\tAWSLexProviderOptions,\n\tInteractionsResponse,\n\tInteractionsMessage,\n} from '../types';\nimport {\n\tLexRuntimeServiceClient,\n\tPostTextCommand,\n\tPostTextCommandInput,\n\tPostTextCommandOutput,\n\tPostContentCommand,\n\tPostContentCommandInput,\n\tPostContentCommandOutput,\n} from '@aws-sdk/client-lex-runtime-service';\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\n\nconst logger = new Logger('AWSLexProvider');\n\ninterface PostContentCommandOutputFormatted\n\textends Omit<PostContentCommandOutput, 'audioStream'> {\n\taudioStream?: Uint8Array;\n}\n\ntype AWSLexProviderSendResponse =\n\t| PostTextCommandOutput\n\t| PostContentCommandOutputFormatted;\n\nexport class AWSLexProvider extends AbstractInteractionsProvider {\n\tprivate lexRuntimeServiceClient: LexRuntimeServiceClient;\n\tprivate _botsCompleteCallback: object;\n\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tsuper(options);\n\t\tthis._botsCompleteCallback = {};\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSLexProvider';\n\t}\n\n\tconfigure(config: AWSLexProviderOptions = {}): AWSLexProviderOptions {\n\t\tconst propertiesToTest = ['name', 'alias', 'region'];\n\n\t\tObject.keys(config).forEach(botKey => {\n\t\t\tconst botConfig = config[botKey];\n\n\t\t\t// is bot config correct\n\t\t\tif (!propertiesToTest.every(x => x in botConfig)) {\n\t\t\t\tthrow new Error('invalid bot configuration');\n\t\t\t}\n\t\t});\n\t\treturn super.configure(config);\n\t}\n\n\t/**\n\t * @private\n\t * @deprecated\n\t * This is used internally by 'sendMessage' to call onComplete callback\n\t * for a bot if configured\n\t */\n\treportBotStatus(data: AWSLexProviderSendResponse, botname: string) {\n\t\t// Check if state is fulfilled to resolve onFullfilment promise\n\t\tlogger.debug('postContent state', data.dialogState);\n\t\tif (\n\t\t\tdata.dialogState === 'ReadyForFulfillment' ||\n\t\t\tdata.dialogState === 'Fulfilled'\n\t\t) {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(() => this._botsCompleteCallback[botname](null, data), 0);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(() => this._config[botname].onComplete(null, data), 0);\n\t\t\t}\n\t\t}\n\n\t\tif (data.dialogState === 'Failed') {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._botsCompleteCallback[botname]('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendMessage(\n\t\tbotname: string,\n\t\tmessage: string | InteractionsMessage\n\t): Promise<InteractionsResponse> {\n\t\t// check if bot exists\n\t\tif (!this._config[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\n\t\t// check if credentials are present\n\t\tlet credentials;\n\t\ttry {\n\t\t\tcredentials = await Credentials.get();\n\t\t} catch (error) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tthis.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n\t\t\tregion: this._config[botname].region,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet params: PostTextCommandInput | PostContentCommandInput;\n\t\tif (typeof message === 'string') {\n\t\t\tparams = {\n\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\tbotName: botname,\n\t\t\t\tinputText: message,\n\t\t\t\tuserId: credentials.identityId,\n\t\t\t};\n\n\t\t\tlogger.debug('postText to lex', message);\n\t\t\ttry {\n\t\t\t\tconst postTextCommand = new PostTextCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(postTextCommand);\n\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn data;\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\tconst {\n\t\t\t\tcontent,\n\t\t\t\toptions: { messageType },\n\t\t\t} = message;\n\t\t\tif (messageType === 'voice') {\n\t\t\t\tif (typeof content !== 'object') {\n\t\t\t\t\treturn Promise.reject('invalid content type');\n\t\t\t\t}\n\t\t\t\tconst inputStream =\n\t\t\t\t\tcontent instanceof Uint8Array ? content : await convert(content);\n\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t\tinputStream,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (typeof content !== 'string')\n\t\t\t\t\treturn Promise.reject('invalid content type');\n\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'text/plain; charset=utf-8',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\t\t\tlogger.debug('postContent to lex', message);\n\t\t\ttry {\n\t\t\t\tconst postContentCommand = new PostContentCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(\n\t\t\t\t\tpostContentCommand\n\t\t\t\t);\n\n\t\t\t\tconst audioArray = data.audioStream\n\t\t\t\t\t? await convert(data.audioStream)\n\t\t\t\t\t: undefined;\n\n\t\t\t\tconst response = { ...data, ...{ audioStream: audioArray } };\n\n\t\t\t\tthis.reportBotStatus(response, botname);\n\t\t\t\treturn response;\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tonComplete(botname: string, callback: (err, confirmation) => void) {\n\t\t// does bot exist\n\t\tif (!this._config[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tthis._botsCompleteCallback[botname] = callback;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
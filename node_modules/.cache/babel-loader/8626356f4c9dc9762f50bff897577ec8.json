{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\nimport { extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n}\nvar groupKeys = new Set(['and', 'or', 'not']);\n\nvar isGroup = function (o) {\n  var keys = __spread(Object.keys(o));\n\n  return keys.length === 1 && groupKeys.has(keys[0]);\n};\n\nexport var comparisonKeys = new Set(['eq', 'ne', 'gt', 'lt', 'ge', 'le', 'contains', 'notContains', 'beginsWith', 'between']);\n\nvar isComparison = function (o) {\n  var keys = __spread(Object.keys(o));\n\n  return !Array.isArray(o) && keys.length === 1 && comparisonKeys.has(keys[0]);\n};\n\nvar isValid = function (o) {\n  if (Array.isArray(o)) {\n    return o.every(function (v) {\n      return isValid(v);\n    });\n  } else {\n    return Object.keys(o).length === 1;\n  }\n}; // This symbol is not used at runtime, only its type (unique symbol)\n\n\nexport var PredicateAll = Symbol('A predicate that matches all records');\n\nvar Predicates =\n/** @class */\nfunction () {\n  function Predicates() {}\n\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\n\nexport { Predicates };\n\nvar ModelPredicateCreator =\n/** @class */\nfunction () {\n  function ModelPredicateCreator() {}\n\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_, propertyKey, self) {\n        var groupType = propertyKey;\n\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function (newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              }; // Create a new recorder\n\n              var tmpPredicateRecorder = new Proxy({}, handler); // Set the recorder group\n\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group); // Apply the predicates to the recorder (this is the step that records the changes)\n\n              newPredicate(tmpPredicateRecorder); // Push the group to the top-level recorder\n\n              ModelPredicateCreator.predicateGroupsMap.get(self).predicates.push(group);\n              return self;\n            };\n\n            return result_1;\n\n          default: // intentionally blank.\n\n        }\n\n        var field = propertyKey;\n\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n\n        var result = function (operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(self).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return self;\n        };\n\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  }; // transforms cb-style predicate into Proxy\n\n\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n\n  ModelPredicateCreator.createForSingleField = function (modelDefinition, fieldName, value) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition)[fieldName]('eq', value);\n  };\n\n  ModelPredicateCreator.createForPk = function (modelDefinition, model) {\n    var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n    var keyValues = extractPrimaryKeyValues(model, keyFields);\n    var modelPredicate = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n    keyFields.forEach(function (field, idx) {\n      var operand = keyValues[idx];\n      modelPredicate = modelPredicate[field]('eq', operand);\n    });\n    return modelPredicate;\n  };\n  /**\n   * Searches a `Model` table for records matching the given equalities object.\n   *\n   * This only matches against fields given in the equalities object. No other\n   * fields are tested by the predicate.\n   *\n   * @param modelDefinition The model we need a predicate for.\n   * @param flatEqualities An object holding field equalities to search for.\n   */\n\n\n  ModelPredicateCreator.createFromFlatEqualities = function (modelDefinition, flatEqualities) {\n    var e_1, _a;\n\n    var predicate = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n\n    try {\n      for (var _b = __values(Object.entries(flatEqualities)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            field = _d[0],\n            value = _d[1];\n\n        predicate = predicate[field]('eq', value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return predicate;\n  };\n\n  ModelPredicateCreator.createGroupFromExisting = function (modelDefinition, group, existingPredicates) {\n    var outer = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n    outer = outer[group](function (seed) {\n      var e_2, _a;\n\n      var _b;\n\n      var inner = seed;\n\n      try {\n        for (var existingPredicates_1 = __values(existingPredicates), existingPredicates_1_1 = existingPredicates_1.next(); !existingPredicates_1_1.done; existingPredicates_1_1 = existingPredicates_1.next()) {\n          var existing = existingPredicates_1_1.value;\n\n          if (typeof existing === 'function') {\n            inner = existing(inner);\n          } else {\n            (_b = ModelPredicateCreator.predicateGroupsMap.get(inner)) === null || _b === void 0 ? void 0 : _b.predicates.push(ModelPredicateCreator.predicateGroupsMap.get(existing));\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (existingPredicates_1_1 && !existingPredicates_1_1.done && (_a = existingPredicates_1.return)) _a.call(existingPredicates_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      return inner;\n    });\n    return outer;\n  };\n\n  ModelPredicateCreator.transformGraphQLtoPredicateAST = function (gql) {\n    var _this = this;\n\n    if (!isValid(gql)) {\n      throw new Error('Invalid QGL AST: ' + gql);\n    }\n\n    if (isGroup(gql)) {\n      var groupkey = Object.keys(gql)[0];\n      var children = this.transformGraphQLtoPredicateAST(gql[groupkey]);\n      return {\n        type: groupkey,\n        predicates: Array.isArray(children) ? children : [children]\n      };\n    } else if (isComparison(gql)) {\n      var operatorKey = Object.keys(gql)[0];\n      return {\n        operator: operatorKey,\n        operand: gql[operatorKey]\n      };\n    } else {\n      if (Array.isArray(gql)) {\n        return gql.map(function (o) {\n          return _this.transformGraphQLtoPredicateAST(o);\n        });\n      } else {\n        var fieldKey = Object.keys(gql)[0];\n        return __assign({\n          field: fieldKey\n        }, this.transformGraphQLtoPredicateAST(gql[fieldKey]));\n      }\n    }\n  };\n\n  ModelPredicateCreator.createFromAST = function (modelDefinition, ast) {\n    var predicate = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, this.transformGraphQLtoPredicateAST(ast));\n    return predicate;\n  };\n\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\n\nexport { ModelPredicateCreator };","map":{"version":3,"mappings":"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","names":["extractPrimaryKeyFieldNames","extractPrimaryKeyValues","ModelSortPredicateCreator","predicatesAllSet","WeakSet","isPredicatesAll","predicate","has","groupKeys","Set","isGroup","keys","Object","o","length","comparisonKeys","isComparison","Array","isArray","isValid","every","v","PredicateAll","Symbol","Predicates","add","ModelPredicateCreator","modelDefinition","fieldNames","fields","handler","Proxy","get","_","propertyKey","self","groupType","result_1","newPredicate","group","type","predicates","tmpPredicateRecorder","predicateGroupsMap","set","push","field","Error","modelName","result","operator","operand","throwOnInvalid","isValidPredicate","existing","undefined","createPredicateBuilder","fieldName","value","model","keyFields","keyValues","modelPredicate","forEach","idx","flatEqualities","entries","_c","existingPredicates","outer","inner","seed","existingPredicates_1_1","_b","gql","groupkey","children","transformGraphQLtoPredicateAST","operatorKey","map","fieldKey","ast","WeakMap"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/predicates/index.ts"],"sourcesContent":["import {\n\tAllOperators,\n\tModelPredicate,\n\tPersistentModel,\n\tPredicateExpression,\n\tPredicateGroups,\n\tPredicatesGroup,\n\tProducerModelPredicate,\n\tSchemaModel,\n} from '../types';\nimport { extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\n\nexport { ModelSortPredicateCreator } from './sort';\n\nconst predicatesAllSet = new WeakSet<ProducerModelPredicate<any>>();\n\nexport function isPredicatesAll(\n\tpredicate: any\n): predicate is typeof PredicateAll {\n\treturn predicatesAllSet.has(predicate);\n}\n\nconst groupKeys = new Set(['and', 'or', 'not']);\nconst isGroup = o => {\n\tconst keys = [...Object.keys(o)];\n\treturn keys.length === 1 && groupKeys.has(keys[0]);\n};\n\nexport const comparisonKeys = new Set([\n\t'eq',\n\t'ne',\n\t'gt',\n\t'lt',\n\t'ge',\n\t'le',\n\t'contains',\n\t'notContains',\n\t'beginsWith',\n\t'between',\n]);\nconst isComparison = o => {\n\tconst keys = [...Object.keys(o)];\n\treturn !Array.isArray(o) && keys.length === 1 && comparisonKeys.has(keys[0]);\n};\n\nconst isValid = o => {\n\tif (Array.isArray(o)) {\n\t\treturn o.every(v => isValid(v));\n\t} else {\n\t\treturn Object.keys(o).length === 1;\n\t}\n};\n\n// This symbol is not used at runtime, only its type (unique symbol)\nexport const PredicateAll = Symbol('A predicate that matches all records');\n\nexport class Predicates {\n\tpublic static get ALL(): typeof PredicateAll {\n\t\tconst predicate = <ProducerModelPredicate<any>>(c => c);\n\n\t\tpredicatesAllSet.add(predicate);\n\n\t\treturn <typeof PredicateAll>(<unknown>predicate);\n\t}\n}\n\nexport class ModelPredicateCreator {\n\tprivate static predicateGroupsMap = new WeakMap<\n\t\tModelPredicate<any>,\n\t\tPredicatesGroup<any>\n\t>();\n\n\tstatic createPredicateBuilder<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel\n\t) {\n\t\tconst { name: modelName } = modelDefinition;\n\t\tconst fieldNames = new Set<keyof T>(Object.keys(modelDefinition.fields));\n\n\t\tlet handler: ProxyHandler<ModelPredicate<T>>;\n\n\t\tconst predicate = new Proxy(\n\t\t\t{} as ModelPredicate<T>,\n\t\t\t(handler = {\n\t\t\t\tget(\n\t\t\t\t\t_,\n\t\t\t\t\tpropertyKey,\n\t\t\t\t\tself: ModelPredicate<T>\n\t\t\t\t): PredicateExpression<T, any> {\n\t\t\t\t\tconst groupType = propertyKey as keyof PredicateGroups<T>;\n\n\t\t\t\t\tswitch (groupType) {\n\t\t\t\t\t\tcase 'and':\n\t\t\t\t\t\tcase 'or':\n\t\t\t\t\t\tcase 'not':\n\t\t\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\t\t\tnewPredicate: (criteria: ModelPredicate<T>) => ModelPredicate<T>\n\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\tconst group: PredicatesGroup<T> = {\n\t\t\t\t\t\t\t\t\ttype: groupType,\n\t\t\t\t\t\t\t\t\tpredicates: [],\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Create a new recorder\n\t\t\t\t\t\t\t\tconst tmpPredicateRecorder = new Proxy(\n\t\t\t\t\t\t\t\t\t{} as ModelPredicate<T>,\n\t\t\t\t\t\t\t\t\thandler\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Set the recorder group\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap.set(\n\t\t\t\t\t\t\t\t\ttmpPredicateRecorder as any,\n\t\t\t\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Apply the predicates to the recorder (this is the step that records the changes)\n\t\t\t\t\t\t\t\tnewPredicate(tmpPredicateRecorder);\n\n\t\t\t\t\t\t\t\t// Push the group to the top-level recorder\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t\t\t.get(self as any)!\n\t\t\t\t\t\t\t\t\t.predicates.push(group);\n\n\t\t\t\t\t\t\t\treturn self;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t// intentionally blank.\n\t\t\t\t\t}\n\n\t\t\t\t\tconst field = propertyKey as keyof T;\n\n\t\t\t\t\tif (!fieldNames.has(field)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Invalid field for model. field: ${field}, model: ${modelName}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\toperator: keyof AllOperators,\n\t\t\t\t\t\toperand: any\n\t\t\t\t\t) => {\n\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t.get(self as any)!\n\t\t\t\t\t\t\t.predicates.push({ field, operator, operand });\n\t\t\t\t\t\treturn self;\n\t\t\t\t\t};\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\n\t\tconst group: PredicatesGroup<T> = {\n\t\t\ttype: 'and',\n\t\t\tpredicates: [],\n\t\t};\n\t\tModelPredicateCreator.predicateGroupsMap.set(predicate as any, group);\n\n\t\treturn predicate;\n\t}\n\n\tstatic isValidPredicate<T extends PersistentModel>(\n\t\tpredicate: any\n\t): predicate is ModelPredicate<T> {\n\t\treturn ModelPredicateCreator.predicateGroupsMap.has(predicate);\n\t}\n\n\tstatic getPredicates<T extends PersistentModel>(\n\t\tpredicate: ModelPredicate<T>,\n\t\tthrowOnInvalid: boolean = true\n\t) {\n\t\tif (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n\t\t\tthrow new Error('The predicate is not valid');\n\t\t}\n\n\t\treturn ModelPredicateCreator.predicateGroupsMap.get(predicate as any);\n\t}\n\n\t// transforms cb-style predicate into Proxy\n\tstatic createFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition?: SchemaModel,\n\t\texisting?: ProducerModelPredicate<T>\n\t) {\n\t\tif (!existing || !modelDefinition) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn existing(\n\t\t\tModelPredicateCreator.createPredicateBuilder(modelDefinition)\n\t\t);\n\t}\n\n\tstatic createForSingleField<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tfieldName: string,\n\t\tvalue: string\n\t) {\n\t\treturn ModelPredicateCreator.createPredicateBuilder<T>(modelDefinition)[\n\t\t\tfieldName\n\t\t](<any>'eq', <any>value);\n\t}\n\n\tstatic createForPk<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tmodel: T\n\t) {\n\t\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\t\tconst keyValues = extractPrimaryKeyValues(model, keyFields);\n\n\t\tlet modelPredicate =\n\t\t\tModelPredicateCreator.createPredicateBuilder<T>(modelDefinition);\n\n\t\tkeyFields.forEach((field, idx) => {\n\t\t\tconst operand = keyValues[idx];\n\t\t\tmodelPredicate = modelPredicate[field](<any>'eq', <any>operand);\n\t\t});\n\n\t\treturn modelPredicate;\n\t}\n\n\t/**\n\t * Searches a `Model` table for records matching the given equalities object.\n\t *\n\t * This only matches against fields given in the equalities object. No other\n\t * fields are tested by the predicate.\n\t *\n\t * @param modelDefinition The model we need a predicate for.\n\t * @param flatEqualities An object holding field equalities to search for.\n\t */\n\tstatic createFromFlatEqualities<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tflatEqualities: Record<string, any>\n\t) {\n\t\tlet predicate =\n\t\t\tModelPredicateCreator.createPredicateBuilder<T>(modelDefinition);\n\n\t\tfor (const [field, value] of Object.entries(flatEqualities)) {\n\t\t\tpredicate = predicate[field]('eq' as any, value);\n\t\t}\n\n\t\treturn predicate;\n\t}\n\n\tstatic createGroupFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tgroup: 'and' | 'or' | 'not',\n\t\texistingPredicates: (ProducerModelPredicate<T> | ModelPredicate<T>)[]\n\t) {\n\t\tlet outer =\n\t\t\tModelPredicateCreator.createPredicateBuilder<T>(modelDefinition);\n\n\t\touter = outer[group](seed => {\n\t\t\tlet inner = seed;\n\t\t\tfor (const existing of existingPredicates) {\n\t\t\t\tif (typeof existing === 'function') {\n\t\t\t\t\tinner = existing(inner);\n\t\t\t\t} else {\n\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t.get(inner)\n\t\t\t\t\t\t?.predicates.push(\n\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap.get(\n\t\t\t\t\t\t\t\texisting as ModelPredicate<T>\n\t\t\t\t\t\t\t)!\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn inner;\n\t\t});\n\n\t\treturn outer;\n\t}\n\n\tstatic transformGraphQLtoPredicateAST(gql: any) {\n\t\tif (!isValid(gql)) {\n\t\t\tthrow new Error('Invalid QGL AST: ' + gql);\n\t\t}\n\n\t\tif (isGroup(gql)) {\n\t\t\tconst groupkey = Object.keys(gql)[0];\n\t\t\tconst children = this.transformGraphQLtoPredicateAST(gql[groupkey]);\n\t\t\treturn {\n\t\t\t\ttype: groupkey,\n\t\t\t\tpredicates: Array.isArray(children) ? children : [children],\n\t\t\t};\n\t\t} else if (isComparison(gql)) {\n\t\t\tconst operatorKey = Object.keys(gql)[0];\n\t\t\treturn {\n\t\t\t\toperator: operatorKey,\n\t\t\t\toperand: gql[operatorKey],\n\t\t\t};\n\t\t} else {\n\t\t\tif (Array.isArray(gql)) {\n\t\t\t\treturn gql.map(o => this.transformGraphQLtoPredicateAST(o));\n\t\t\t} else {\n\t\t\t\tconst fieldKey = Object.keys(gql)[0];\n\t\t\t\treturn {\n\t\t\t\t\tfield: fieldKey,\n\t\t\t\t\t...this.transformGraphQLtoPredicateAST(gql[fieldKey]),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic createFromAST(\n\t\tmodelDefinition: SchemaModel,\n\t\tast: any\n\t): ModelPredicate<any> {\n\t\tconst predicate =\n\t\t\tModelPredicateCreator.createPredicateBuilder(modelDefinition);\n\n\t\tModelPredicateCreator.predicateGroupsMap.set(\n\t\t\tpredicate,\n\t\t\tthis.transformGraphQLtoPredicateAST(ast)\n\t\t);\n\n\t\treturn predicate;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
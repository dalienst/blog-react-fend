{"ast":null,"code":"import { __read, __values } from \"tslib\";\nexport function parseQueryString(querystring) {\n  var e_1, _a;\n\n  var query = {};\n  querystring = querystring.replace(/^\\?/, \"\");\n\n  if (querystring) {\n    try {\n      for (var _b = __values(querystring.split(\"&\")), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var pair = _c.value;\n\n        var _d = __read(pair.split(\"=\"), 2),\n            key = _d[0],\n            _e = _d[1],\n            value = _e === void 0 ? null : _e;\n\n        key = decodeURIComponent(key);\n\n        if (value) {\n          value = decodeURIComponent(value);\n        }\n\n        if (!(key in query)) {\n          query[key] = value;\n        } else if (Array.isArray(query[key])) {\n          query[key].push(value);\n        } else {\n          query[key] = [query[key], value];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n\n  return query;\n}","map":{"version":3,"mappings":";AAEA,OAAM,SAAUA,gBAAV,CAA2BC,WAA3B,EAA8C;;;AAClD,MAAMC,KAAK,GAAsB,EAAjC;AACAD,aAAW,GAAGA,WAAW,CAACE,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAd;;AAEA,MAAIF,WAAJ,EAAiB;;AACf,WAAmB,6BAAW,CAACG,KAAZ,CAAkB,GAAlB,IAAsBC,cAAzC,EAAyC,QAAzC,EAAyCA,cAAzC,EAA2C;AAAtC,YAAMC,IAAI,WAAV;;AACC,wBAAsBA,IAAI,CAACF,KAAL,CAAW,GAAX,CAAtB,EAAqC,CAArC;AAAA,YAACG,GAAG,QAAJ;AAAA,YAAMC,UAAN;AAAA,YAAMC,KAAK,mBAAG,IAAH,GAAOD,EAAlB;;AACJD,WAAG,GAAGG,kBAAkB,CAACH,GAAD,CAAxB;;AACA,YAAIE,KAAJ,EAAW;AACTA,eAAK,GAAGC,kBAAkB,CAACD,KAAD,CAA1B;AACD;;AACD,YAAI,EAAEF,GAAG,IAAIL,KAAT,CAAJ,EAAqB;AACnBA,eAAK,CAACK,GAAD,CAAL,GAAaE,KAAb;AACD,SAFD,MAEO,IAAIE,KAAK,CAACC,OAAN,CAAcV,KAAK,CAACK,GAAD,CAAnB,CAAJ,EAA+B;AACnCL,eAAK,CAACK,GAAD,CAAL,CAA6BM,IAA7B,CAAkCJ,KAAlC;AACF,SAFM,MAEA;AACLP,eAAK,CAACK,GAAD,CAAL,GAAa,CAACL,KAAK,CAACK,GAAD,CAAN,EAAuBE,KAAvB,CAAb;AACD;AACF;;;;;;;;;;;;AACF;;AAED,SAAOP,KAAP;AACD","names":["parseQueryString","querystring","query","replace","split","_c","pair","key","_e","value","decodeURIComponent","Array","isArray","push"],"sources":["/home/dalienst/node_modules/@aws-sdk/querystring-parser/src/index.ts"],"sourcesContent":["import { QueryParameterBag } from \"@aws-sdk/types\";\n\nexport function parseQueryString(querystring: string): QueryParameterBag {\n  const query: QueryParameterBag = {};\n  querystring = querystring.replace(/^\\?/, \"\");\n\n  if (querystring) {\n    for (const pair of querystring.split(\"&\")) {\n      let [key, value = null] = pair.split(\"=\");\n      key = decodeURIComponent(key);\n      if (value) {\n        value = decodeURIComponent(value);\n      }\n      if (!(key in query)) {\n        query[key] = value;\n      } else if (Array.isArray(query[key])) {\n        (query[key] as Array<string>).push(value as string);\n      } else {\n        query[key] = [query[key] as string, value as string];\n      }\n    }\n  }\n\n  return query;\n}\n"]},"metadata":{},"sourceType":"module"}
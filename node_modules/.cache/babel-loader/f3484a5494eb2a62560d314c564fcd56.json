{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __read, __spread } from \"tslib\";\nimport { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Hub');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nfunction isLegacyCallback(callback) {\n  return callback.onHubCapsule !== undefined;\n}\n\nvar HubClass =\n/** @class */\nfunction () {\n  function HubClass(name) {\n    this.listeners = [];\n    this.patterns = [];\n    this.protectedChannels = ['core', 'auth', 'api', 'analytics', 'interactions', 'pubsub', 'storage', 'ui', 'xr'];\n    this.name = name;\n  }\n  /**\n   * Used internally to remove a Hub listener.\n   *\n   * @remarks\n   * This private method is for internal use only. Instead of calling Hub.remove, call the result of Hub.listen.\n   */\n\n\n  HubClass.prototype._remove = function (channel, listener) {\n    if (channel instanceof RegExp) {\n      var pattern_1 = this.patterns.find(function (_a) {\n        var pattern = _a.pattern;\n        return pattern.source === channel.source;\n      });\n\n      if (!pattern_1) {\n        logger.warn(\"No listeners for \" + channel);\n        return;\n      }\n\n      this.patterns = __spread(this.patterns.filter(function (x) {\n        return x !== pattern_1;\n      }));\n    } else {\n      var holder = this.listeners[channel];\n\n      if (!holder) {\n        logger.warn(\"No listeners for \" + channel);\n        return;\n      }\n\n      this.listeners[channel] = __spread(holder.filter(function (_a) {\n        var callback = _a.callback;\n        return callback !== listener;\n      }));\n    }\n  };\n  /**\n   * @deprecated Instead of calling Hub.remove, call the result of Hub.listen.\n   */\n\n\n  HubClass.prototype.remove = function (channel, listener) {\n    this._remove(channel, listener);\n  };\n  /**\n   * Used to send a Hub event.\n   *\n   * @param channel - The channel on which the event will be broadcast\n   * @param payload - The HubPayload\n   * @param source  - The source of the event; defaults to ''\n   * @param ampSymbol - Symbol used to determine if the event is dispatched internally on a protected channel\n   *\n   */\n\n\n  HubClass.prototype.dispatch = function (channel, payload, source, ampSymbol) {\n    if (source === void 0) {\n      source = '';\n    }\n\n    if (this.protectedChannels.indexOf(channel) > -1) {\n      var hasAccess = ampSymbol === AMPLIFY_SYMBOL;\n\n      if (!hasAccess) {\n        logger.warn(\"WARNING: \" + channel + \" is protected and dispatching on it can have unintended consequences\");\n      }\n    }\n\n    var capsule = {\n      channel: channel,\n      payload: __assign({}, payload),\n      source: source,\n      patternInfo: []\n    };\n\n    try {\n      this._toListeners(capsule);\n    } catch (e) {\n      logger.error(e);\n    }\n  };\n  /**\n   * Used to listen for Hub events.\n   *\n   * @param channel - The channel on which to listen\n   * @param callback - The callback to execute when an event is received on the specified channel\n   * @param listenerName - The name of the listener; defaults to 'noname'\n   * @returns A function which can be called to cancel the listener.\n   *\n   */\n\n\n  HubClass.prototype.listen = function (channel, callback, listenerName) {\n    var _this = this;\n\n    if (listenerName === void 0) {\n      listenerName = 'noname';\n    }\n\n    var cb; // Check for legacy onHubCapsule callback for backwards compatability\n\n    if (isLegacyCallback(callback)) {\n      logger.warn(\"WARNING onHubCapsule is Deprecated. Please pass in a callback.\");\n      cb = callback.onHubCapsule.bind(callback);\n    } else if (typeof callback !== 'function') {\n      throw new Error('No callback supplied to Hub');\n    } else {\n      cb = callback;\n    }\n\n    if (channel instanceof RegExp) {\n      this.patterns.push({\n        pattern: channel,\n        callback: cb\n      });\n    } else {\n      var holder = this.listeners[channel];\n\n      if (!holder) {\n        holder = [];\n        this.listeners[channel] = holder;\n      }\n\n      holder.push({\n        name: listenerName,\n        callback: cb\n      });\n    }\n\n    return function () {\n      _this._remove(channel, cb);\n    };\n  };\n\n  HubClass.prototype._toListeners = function (capsule) {\n    var channel = capsule.channel,\n        payload = capsule.payload;\n    var holder = this.listeners[channel];\n\n    if (holder) {\n      holder.forEach(function (listener) {\n        logger.debug(\"Dispatching to \" + channel + \" with \", payload);\n\n        try {\n          listener.callback(capsule);\n        } catch (e) {\n          logger.error(e);\n        }\n      });\n    }\n\n    if (this.patterns.length > 0) {\n      if (!payload.message) {\n        logger.warn(\"Cannot perform pattern matching without a message key\");\n        return;\n      }\n\n      var payloadStr_1 = payload.message;\n      this.patterns.forEach(function (pattern) {\n        var match = payloadStr_1.match(pattern.pattern);\n\n        if (match) {\n          var _a = __read(match),\n              groups = _a.slice(1);\n\n          var dispatchingCapsule = __assign(__assign({}, capsule), {\n            patternInfo: groups\n          });\n\n          try {\n            pattern.callback(dispatchingCapsule);\n          } catch (e) {\n            logger.error(e);\n          }\n        }\n      });\n    }\n  };\n\n  return HubClass;\n}();\n\nexport { HubClass };\n/*We export a __default__ instance of HubClass to use it as a\npseudo Singleton for the main messaging bus, however you can still create\nyour own instance of HubClass() for a separate \"private bus\" of events.*/\n\nexport var Hub = new HubClass('__default__');","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","logger","AMPLIFY_SYMBOL","Symbol","for","isLegacyCallback","callback","onHubCapsule","undefined","name","HubClass","channel","listener","RegExp","pattern_1","patterns","find","_a","pattern","source","warn","__spread","filter","holder","listeners","_remove","payload","ampSymbol","protectedChannels","indexOf","hasAccess","capsule","patternInfo","_toListeners","e","error","listenerName","cb","bind","Error","push","_this","forEach","debug","length","message","payloadStr_1","match","groups","dispatchingCapsule","Hub"],"sources":["/home/dalienst/node_modules/@aws-amplify/core/src/Hub.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ConsoleLogger as Logger } from './Logger';\n\nconst logger = new Logger('Hub');\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\ninterface IPattern {\n\tpattern: RegExp;\n\tcallback: HubCallback;\n}\n\ninterface IListener {\n\tname: string;\n\tcallback: HubCallback;\n}\n\nexport type HubCapsule = {\n\tchannel: string;\n\tpayload: HubPayload;\n\tsource: string;\n\tpatternInfo?: string[];\n};\n\nexport type HubPayload = {\n\tevent: string;\n\tdata?: any;\n\tmessage?: string;\n};\n\nexport type HubCallback = (capsule: HubCapsule) => void;\n\nexport type LegacyCallback = { onHubCapsule: HubCallback };\n\nfunction isLegacyCallback(callback: any): callback is LegacyCallback {\n\treturn (<LegacyCallback>callback).onHubCapsule !== undefined;\n}\n\nexport class HubClass {\n\tname: string;\n\tprivate listeners: IListener[] = [];\n\tprivate patterns: IPattern[] = [];\n\n\tprotectedChannels = [\n\t\t'core',\n\t\t'auth',\n\t\t'api',\n\t\t'analytics',\n\t\t'interactions',\n\t\t'pubsub',\n\t\t'storage',\n\t\t'ui',\n\t\t'xr',\n\t];\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * Used internally to remove a Hub listener.\n\t *\n\t * @remarks\n\t * This private method is for internal use only. Instead of calling Hub.remove, call the result of Hub.listen.\n\t */\n\tprivate _remove(channel: string | RegExp, listener: HubCallback) {\n\t\tif (channel instanceof RegExp) {\n\t\t\tconst pattern = this.patterns.find(\n\t\t\t\t({ pattern }) => pattern.source === channel.source\n\t\t\t);\n\t\t\tif (!pattern) {\n\t\t\t\tlogger.warn(`No listeners for ${channel}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.patterns = [...this.patterns.filter(x => x !== pattern)];\n\t\t} else {\n\t\t\tconst holder = this.listeners[channel];\n\t\t\tif (!holder) {\n\t\t\t\tlogger.warn(`No listeners for ${channel}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.listeners[channel] = [\n\t\t\t\t...holder.filter(({ callback }) => callback !== listener),\n\t\t\t];\n\t\t}\n\t}\n\n\t/**\n\t * @deprecated Instead of calling Hub.remove, call the result of Hub.listen.\n\t */\n\tremove(channel: string | RegExp, listener: HubCallback) {\n\t\tthis._remove(channel, listener);\n\t}\n\n\t/**\n\t * Used to send a Hub event.\n\t *\n\t * @param channel - The channel on which the event will be broadcast\n\t * @param payload - The HubPayload\n\t * @param source  - The source of the event; defaults to ''\n\t * @param ampSymbol - Symbol used to determine if the event is dispatched internally on a protected channel\n\t *\n\t */\n\tdispatch(\n\t\tchannel: string,\n\t\tpayload: HubPayload,\n\t\tsource: string = '',\n\t\tampSymbol?: Symbol\n\t) {\n\t\tif (this.protectedChannels.indexOf(channel) > -1) {\n\t\t\tconst hasAccess = ampSymbol === AMPLIFY_SYMBOL;\n\n\t\t\tif (!hasAccess) {\n\t\t\t\tlogger.warn(\n\t\t\t\t\t`WARNING: ${channel} is protected and dispatching on it can have unintended consequences`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst capsule: HubCapsule = {\n\t\t\tchannel,\n\t\t\tpayload: { ...payload },\n\t\t\tsource,\n\t\t\tpatternInfo: [],\n\t\t};\n\n\t\ttry {\n\t\t\tthis._toListeners(capsule);\n\t\t} catch (e) {\n\t\t\tlogger.error(e);\n\t\t}\n\t}\n\n\t/**\n\t * Used to listen for Hub events.\n\t *\n\t * @param channel - The channel on which to listen\n\t * @param callback - The callback to execute when an event is received on the specified channel\n\t * @param listenerName - The name of the listener; defaults to 'noname'\n\t * @returns A function which can be called to cancel the listener.\n\t *\n\t */\n\tlisten(\n\t\tchannel: string | RegExp,\n\t\tcallback?: HubCallback | LegacyCallback,\n\t\tlistenerName = 'noname'\n\t) {\n\t\tlet cb: HubCallback;\n\t\t// Check for legacy onHubCapsule callback for backwards compatability\n\t\tif (isLegacyCallback(callback)) {\n\t\t\tlogger.warn(\n\t\t\t\t`WARNING onHubCapsule is Deprecated. Please pass in a callback.`\n\t\t\t);\n\t\t\tcb = callback.onHubCapsule.bind(callback);\n\t\t} else if (typeof callback !== 'function') {\n\t\t\tthrow new Error('No callback supplied to Hub');\n\t\t} else {\n\t\t\tcb = callback;\n\t\t}\n\n\t\tif (channel instanceof RegExp) {\n\t\t\tthis.patterns.push({\n\t\t\t\tpattern: channel,\n\t\t\t\tcallback: cb,\n\t\t\t});\n\t\t} else {\n\t\t\tlet holder = this.listeners[channel];\n\n\t\t\tif (!holder) {\n\t\t\t\tholder = [];\n\t\t\t\tthis.listeners[channel] = holder;\n\t\t\t}\n\n\t\t\tholder.push({\n\t\t\t\tname: listenerName,\n\t\t\t\tcallback: cb,\n\t\t\t});\n\t\t}\n\n\t\treturn () => {\n\t\t\tthis._remove(channel, cb);\n\t\t};\n\t}\n\n\tprivate _toListeners(capsule: HubCapsule) {\n\t\tconst { channel, payload } = capsule;\n\t\tconst holder = this.listeners[channel];\n\n\t\tif (holder) {\n\t\t\tholder.forEach(listener => {\n\t\t\t\tlogger.debug(`Dispatching to ${channel} with `, payload);\n\t\t\t\ttry {\n\t\t\t\t\tlistener.callback(capsule);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.error(e);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (this.patterns.length > 0) {\n\t\t\tif (!payload.message) {\n\t\t\t\tlogger.warn(`Cannot perform pattern matching without a message key`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst payloadStr = payload.message;\n\n\t\t\tthis.patterns.forEach(pattern => {\n\t\t\t\tconst match = payloadStr.match(pattern.pattern);\n\t\t\t\tif (match) {\n\t\t\t\t\tconst [, ...groups] = match;\n\t\t\t\t\tconst dispatchingCapsule: HubCapsule = {\n\t\t\t\t\t\t...capsule,\n\t\t\t\t\t\tpatternInfo: groups,\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpattern.callback(dispatchingCapsule);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogger.error(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\n/*We export a __default__ instance of HubClass to use it as a \npseudo Singleton for the main messaging bus, however you can still create\nyour own instance of HubClass() for a separate \"private bus\" of events.*/\nexport const Hub = new HubClass('__default__');\n"]},"metadata":{},"sourceType":"module"}
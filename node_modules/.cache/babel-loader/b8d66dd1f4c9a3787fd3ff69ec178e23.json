{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __read } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError, isNonRetryableError } from '@aws-amplify/core';\nimport { Cache } from '@aws-amplify/cache';\nimport { Auth } from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG, ConnectionState } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor } from '../../utils/ReconnectionMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\n\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\nvar customDomainPath = '/realtime';\n\nvar AWSAppSyncRealTimeProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n\n  function AWSAppSyncRealTimeProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this.reconnectionMonitor = new ReconnectionMonitor(); // Monitor the connection state and pass changes along to Hub\n\n    _this.connectionStateMonitorSubscription = _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionState) {\n      dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionState\n      }, \"Connection state is \" + connectionState);\n      _this.connectionState = connectionState; // Trigger START_RECONNECT when the connection is disrupted\n\n      if (connectionState === ConnectionState.ConnectionDisrupted) {\n        _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n      } // Trigger HALT_RECONNECT to halt reconnection attempts when the state is anything other than\n      //   ConnectionDisrupted or Connecting\n\n\n      if ([ConnectionState.Connected, ConnectionState.ConnectedPendingDisconnect, ConnectionState.ConnectedPendingKeepAlive, ConnectionState.ConnectedPendingNetwork, ConnectionState.ConnectedPendingNetwork, ConnectionState.ConnectionDisruptedPendingNetwork, ConnectionState.Disconnected].includes(connectionState)) {\n        _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n      }\n    });\n    return _this;\n  }\n  /**\n   * Mark the socket closed and release all active listeners\n   */\n\n\n  AWSAppSyncRealTimeProvider.prototype.close = function () {\n    // Mark the socket closed both in status and the connection monitor\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED); // Turn off the subscription monitor Hub publishing\n\n    this.connectionStateMonitorSubscription.unsubscribe(); // Complete all reconnect observers\n\n    this.reconnectionMonitor.close();\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n    return new WebSocket(url, protocol);\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  }; // Check if url matches standard domain pattern\n\n\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionStartActive_1 = false;\n        var subscriptionId_1 = uuid();\n\n        var startSubscription_1 = function () {\n          if (!subscriptionStartActive_1) {\n            subscriptionStartActive_1 = true;\n\n            var startSubscriptionPromise = _this._startSubscriptionWithAWSAppSyncRealTime({\n              options: options,\n              observer: observer,\n              subscriptionId: subscriptionId_1\n            }).catch(function (err) {\n              logger.debug(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err);\n\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            });\n\n            startSubscriptionPromise.finally(function () {\n              subscriptionStartActive_1 = false;\n            });\n          }\n        };\n\n        var reconnectSubscription_1; // Add an observable to the reconnection list to manage reconnection for this subscription\n\n        reconnectSubscription_1 = new Observable(function (observer) {\n          _this.reconnectionMonitor.addObserver(observer);\n        }).subscribe(function () {\n          startSubscription_1();\n        });\n        startSubscription_1();\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  // Cleanup reconnection subscription\n                  reconnectSubscription_1 === null || reconnectSubscription_1 === void 0 ? void 0 : reconnectSubscription_1.unsubscribe();\n                  _a.label = 1;\n\n                case 1:\n                  _a.trys.push([1, 3, 4, 5]); // Waiting that subscription has been connected before trying to unsubscribe\n\n\n                  return [4\n                  /*yield*/\n                  , this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n\n                case 2:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2\n                    /*return*/\n                    ];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n\n                  return [3\n                  /*break*/\n                  , 5];\n\n                case 3:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3\n                  /*break*/\n                  , 5];\n\n                case 4:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n\n                  return [7\n                  /*endfinally*/\n                  ];\n\n                case 5:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n        observer = _a.observer,\n        subscriptionId = _a.subscriptionId;\n\n    var _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _c, graphql_headers, _d, additionalHeaders, subscriptionState, data, dataString, headerObj, _e, _f, subscriptionMessage, stringToAWSRealTime, err_2, _g, subscriptionFailedCallback, subscriptionReadyCallback;\n\n      var _h;\n\n      var _this = this;\n\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _c = options.graphql_headers, graphql_headers = _c === void 0 ? function () {\n              return {};\n            } : _c, _d = options.additionalHeaders, additionalHeaders = _d === void 0 ? {} : _d;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            }; // Having a subscription id map will make it simple to forward messages received\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: undefined\n            });\n            dataString = JSON.stringify(data);\n            _e = [{}];\n            return [4\n            /*yield*/\n            , this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 1:\n            _f = [__assign.apply(void 0, _e.concat([_j.sent()]))];\n            return [4\n            /*yield*/\n            , graphql_headers()];\n\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), additionalHeaders]), (_h = {}, _h[USER_AGENT_HEADER] = Constants.userAgent, _h)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _j.label = 3;\n\n          case 3:\n            _j.trys.push([3, 5,, 6]);\n\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            return [4\n            /*yield*/\n            , this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 4:\n            _j.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_2 = _j.sent();\n\n            this._logStartSubscriptionError(subscriptionId, observer, err_2);\n\n            return [2\n            /*return*/\n            ];\n\n          case 6:\n            _g = (_b = this.subscriptionObserverMap.get(subscriptionId)) !== null && _b !== void 0 ? _b : {}, subscriptionFailedCallback = _g.subscriptionFailedCallback, subscriptionReadyCallback = _g.subscriptionReadyCallback; // This must be done before sending the message in order to be listening immediately\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Log logic for start subscription failures\n\n\n  AWSAppSyncRealTimeProvider.prototype._logStartSubscriptionError = function (subscriptionId, observer, err) {\n    var _a;\n\n    logger.debug({\n      err: err\n    });\n    var message = (_a = err['message']) !== null && _a !== void 0 ? _a : ''; // Resolving to give the state observer time to propogate the update\n\n    Promise.resolve(this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED)); // Capture the error only when the network didn't cause disruption\n\n    if (this.connectionState !== ConnectionState.ConnectionDisruptedPendingNetwork) {\n      // When the error is non-retriable, error out the observable\n      if (isNonRetryableError(err)) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n        });\n      } else {\n        logger.debug(CONTROL_MSG.CONNECTION_FAILED + \": \" + message);\n      }\n\n      var subscriptionFailedCallback = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback; // Notify concurrent unsubscription\n\n      if (typeof subscriptionFailedCallback === 'function') {\n        subscriptionFailedCallback();\n      }\n    }\n  }; // Waiting that subscription has been connected before trying to unsubscribe\n\n\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionObserver, subscriptionState;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n\n        if (subscriptionObserver) {\n          subscriptionState = subscriptionObserver.subscriptionState; // This in case unsubscribe is invoked before sending start subscription message\n\n          if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              var observer = subscriptionObserver.observer,\n                  subscriptionState = subscriptionObserver.subscriptionState,\n                  variables = subscriptionObserver.variables,\n                  query = subscriptionObserver.query;\n\n              _this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                subscriptionState: subscriptionState,\n                variables: variables,\n                query: query,\n                subscriptionReadyCallback: res,\n                subscriptionFailedCallback: rej\n              });\n            })];\n          }\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId); // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n\n      var tempSocket = this.awsRealTimeSocket; // Cleaning callbacks to avoid race condition, socket still exists\n\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    var _this = this;\n\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n\n    var _a = JSON.parse(message.data),\n        _b = _a.id,\n        id = _b === void 0 ? '' : _b,\n        payload = _a.payload,\n        type = _a.type;\n\n    var _c = this.subscriptionObserverMap.get(id) || {},\n        _d = _c.observer,\n        observer = _d === void 0 ? null : _d,\n        _e = _c.query,\n        query = _e === void 0 ? '' : _e,\n        _f = _c.variables,\n        variables = _f === void 0 ? {} : _f,\n        startAckTimeoutId = _c.startAckTimeoutId,\n        subscriptionReadyCallback = _c.subscriptionReadyCallback,\n        subscriptionFailedCallback = _c.subscriptionFailedCallback;\n\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: undefined,\n          subscriptionState: subscriptionState,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback\n        });\n      }\n\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(function () {\n        return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);\n      }, this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(function () {\n        _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: startAckTimeoutId,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback,\n          subscriptionState: subscriptionState\n        });\n        logger.debug(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload));\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n\n    if (subscriptionObserver) {\n      var observer = subscriptionObserver.observer,\n          query = subscriptionObserver.query,\n          variables = subscriptionObserver.variables;\n\n      if (!observer) {\n        return;\n      }\n\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        authenticationType = _a.authenticationType,\n        apiKey = _a.apiKey,\n        region = _a.region,\n        additionalHeaders = _a.additionalHeaders;\n\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, headerString, _a, _b, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3\n              /*break*/\n              , 5];\n              _c.label = 1;\n\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4\n              /*yield*/\n              , this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4\n              /*yield*/\n              , this._initializeRetryableHandshake(awsRealTimeUrl)];\n\n            case 3:\n              _c.sent();\n\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3\n              /*break*/\n              , 5];\n\n            case 4:\n              err_3 = _c.sent();\n              logger.debug('Connection exited with', err_3);\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n\n              this.awsRealTimeSocket = undefined;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3\n              /*break*/\n              , 5];\n\n            case 5:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, _a, errorType, errorCode;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                var newSocket = _this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n\n                newSocket.onclose = function () {\n                  rej(new Error('Connection handshake error'));\n                };\n\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n\n          case 2:\n            _b.sent(); // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                if (_this.awsRealTimeSocket) {\n                  var ackOk_1 = false;\n\n                  _this.awsRealTimeSocket.onerror = function (error) {\n                    logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                  };\n\n                  _this.awsRealTimeSocket.onclose = function (event) {\n                    logger.debug(\"WebSocket closed \" + event.reason);\n                    rej(new Error(JSON.stringify(event)));\n                  };\n\n                  _this.awsRealTimeSocket.onmessage = function (message) {\n                    logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                    var data = JSON.parse(message.data);\n                    var type = data.type,\n                        _a = data.payload,\n                        _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                        connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                      ackOk_1 = true;\n\n                      if (_this.awsRealTimeSocket) {\n                        _this.keepAliveTimeout = connectionTimeoutMs;\n                        _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n\n                        _this.awsRealTimeSocket.onerror = function (err) {\n                          logger.debug(err);\n\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n\n                        _this.awsRealTimeSocket.onclose = function (event) {\n                          logger.debug(\"WebSocket closed \" + event.reason);\n\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                      }\n\n                      res('Cool, connected to AWS AppSyncRealTime');\n                      return;\n                    }\n\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                      var _c = data.payload,\n                          _d = (_c === void 0 ? {} : _c).errors,\n                          _e = __read(_d === void 0 ? [] : _d, 1),\n                          _f = _e[0],\n                          _g = _f === void 0 ? {} : _f,\n                          _h = _g.errorType,\n                          errorType = _h === void 0 ? '' : _h,\n                          _j = _g.errorCode,\n                          errorCode = _j === void 0 ? 0 : _j;\n\n                      rej({\n                        errorType: errorType,\n                        errorCode: errorCode\n                      });\n                    }\n                  };\n\n                  var gqlInit = {\n                    type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                  };\n\n                  _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n                  var checkAckOk_1 = function (ackOk) {\n                    if (!ackOk) {\n                      _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n\n                      rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                    }\n                  };\n\n                  setTimeout(function () {\n                    return checkAckOk_1(ackOk_1);\n                  }, CONNECTION_INIT_TIMEOUT);\n                }\n              });\n            }()];\n\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_4 = _b.sent();\n            _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n        payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        apiKey = _a.apiKey,\n        region = _a.region,\n        additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            if (!(!authenticationType || !headerHandler[authenticationType])) return [3\n            /*break*/\n            , 1];\n            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n            return [2\n            /*return*/\n            , ''];\n\n          case 1:\n            handler = headerHandler[authenticationType];\n            host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n            logger.debug(\"Authenticating with \" + authenticationType);\n            return [4\n            /*yield*/\n            , handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 2:\n            result = _b.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Auth.currentSession()];\n\n          case 1:\n            session = _b.sent();\n            return [2\n            /*return*/\n            , {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Cache.getItem('federatedInfo')];\n\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3\n            /*break*/\n            , 2];\n            token = federatedInfo.token;\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , Auth.currentAuthenticatedUser()];\n\n          case 3:\n            currentUser = _b.sent();\n\n            if (currentUser) {\n              token = currentUser.token;\n            }\n\n            _b.label = 4;\n\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n\n            return [2\n            /*return*/\n            , {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n        host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2\n        /*return*/\n        , {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _b.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get().then(function (credentials) {\n              var _a = credentials,\n                  secretAccessKey = _a.secretAccessKey,\n                  accessKeyId = _a.accessKeyId,\n                  sessionToken = _a.sessionToken;\n              return {\n                secret_key: secretAccessKey,\n                access_key: accessKeyId,\n                session_token: sessionToken\n              };\n            })];\n\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2\n            /*return*/\n            , signed_params.headers];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n        additionalHeaders = _a.additionalHeaders;\n\n    if (!additionalHeaders || !additionalHeaders['Authorization']) {\n      throw new Error('No auth token specified');\n    }\n\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n\n\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\n\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"mappings":"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","names":["Observable","GraphQLError","url","v4","uuid","Buffer","Logger","Credentials","Signer","Hub","Constants","USER_AGENT_HEADER","jitteredExponentialRetry","NonRetryableError","isNonRetryableError","Cache","Auth","AbstractPubSubProvider","CONTROL_MSG","ConnectionState","AMPLIFY_SYMBOL","AWS_APPSYNC_REALTIME_HEADERS","CONNECTION_INIT_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT","MAX_DELAY_MS","MESSAGE_TYPES","NON_RETRYABLE_CODES","SOCKET_STATUS","START_ACK_TIMEOUT","SUBSCRIPTION_STATUS","CONNECTION_STATE_CHANGE","ConnectionStateMonitor","CONNECTION_CHANGE","ReconnectEvent","ReconnectionMonitor","logger","dispatchApiEvent","event","data","message","dispatch","standardDomainPattern","customDomainPath","__extends","options","_super","_this","CLOSED","Map","connectionStateMonitorSubscription","connectionStateMonitor","connectionStateObservable","subscribe","provider","connectionState","ConnectionDisrupted","reconnectionMonitor","record","START_RECONNECT","Connected","ConnectedPendingDisconnect","ConnectedPendingKeepAlive","ConnectedPendingNetwork","ConnectionDisruptedPendingNetwork","Disconnected","includes","HALT_RECONNECT","AWSAppSyncRealTimeProvider","socketStatus","CONNECTION_FAILED","unsubscribe","close","protocol","WebSocket","Error","_topics","_msg","_options","match","appSyncGraphqlEndpoint","observer","error","errors","complete","subscriptionStartActive_1","subscriptionId_1","startSubscription_1","startSubscriptionPromise","_startSubscriptionWithAWSAppSyncRealTime","subscriptionId","catch","debug","REALTIME_SUBSCRIPTION_INIT_ERROR","err","finally","reconnectSubscription_1","addObserver","_waitForSubscriptionToBeConnected","_a","subscriptionState","subscriptionObserverMap","get","CONNECTED","_sendUnsubscriptionMessage","err_1","_removeSubscriptionObserver","Object","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","authenticationType","query","variables","apiKey","region","_c","graphql_headers","_d","additionalHeaders","PENDING","set","startAckTimeoutId","undefined","dataString","JSON","stringify","_awsRealTimeHeaderBasedAuth","payload","canonicalUri","_j","headerObj","_h","userAgent","subscriptionMessage","id","extensions","authorization","type","GQL_START","stringToAWSRealTime","OPENING_CONNECTION","_initializeWebSocketConnection","_logStartSubscriptionError","err_2","_g","_b","subscriptionFailedCallback","subscriptionReadyCallback","setTimeout","_timeoutStartSubscriptionAck","call","awsRealTimeSocket","send","Promise","resolve","subscriptionObserver","res","rej","readyState","OPEN","READY","unsubscribeMessage","GQL_STOP","delete","_closeSocketIfRequired","bind","size","CLOSING_CONNECTION","bufferedAmount","keepAliveTimeoutId","clearTimeout","keepAliveAlertTimeoutId","tempSocket","onclose","onerror","_e","_f","GQL_DATA","next","GQL_START_ACK","SUBSCRIPTION_ACK","CONNECTION_ESTABLISHED","GQL_CONNECTION_KEEP_ALIVE","_errorDisconnect","TIMEOUT_DISCONNECT","keepAliveTimeout","KEEP_ALIVE_MISSED","KEEP_ALIVE","GQL_ERROR","FAILED","msg","promiseArray","push","CONNECTING","payloadString","headerString","headerQs","from","toString","payloadQs","discoverableEndpoint","isCustomDomain","concat","replace","isSSLEnabled","awsRealTimeUrl","_initializeRetryableHandshake","forEach","err_3","_initializeHandshake","newSocket","getNewWebSocket","onopen","ackOk_1","reason","onmessage","parse","connectionTimeoutMs","GQL_CONNECTION_ACK","_handleIncomingSubscriptionMessage","CONNECTION_CLOSED","GQL_CONNECTION_ERROR","errorType","errorCode","gqlInit","GQL_CONNECTION_INIT","checkAckOk_1","ackOk","err_4","headerHandler","API_KEY","_awsRealTimeApiKeyHeader","AWS_IAM","_awsRealTimeIAMHeader","OPENID_CONNECT","_awsRealTimeOPENIDHeader","AMAZON_COGNITO_USER_POOLS","_awsRealTimeCUPHeader","AWS_LAMBDA","_customAuthHeader","handler","host","result","currentSession","session","Authorization","getAccessToken","getJwtToken","getItem","federatedInfo","token","currentAuthenticatedUser","currentUser","dt","Date","dtStr","toISOString","endpointInfo","service","_ensureCredentials","credentialsOK","then","credentials","secretAccessKey","accessKeyId","sessionToken","secret_key","access_key","session_token","creds","request","method","headers","signed_params","sign","cred","shear","warn"],"sources":["/home/dalienst/node_modules/@aws-amplify/pubsub/src/Providers/AWSAppSyncRealTimeProvider/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { ProviderOptions } from '../../types/Provider';\nimport {\n\tLogger,\n\tCredentials,\n\tSigner,\n\tHub,\n\tConstants,\n\tUSER_AGENT_HEADER,\n\tjitteredExponentialRetry,\n\tNonRetryableError,\n\tICredentials,\n\tisNonRetryableError,\n} from '@aws-amplify/core';\nimport { Cache } from '@aws-amplify/cache';\nimport { Auth, GRAPHQL_AUTH_MODE } from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG, ConnectionState } from '../../types/PubSub';\n\nimport {\n\tAMPLIFY_SYMBOL,\n\tAWS_APPSYNC_REALTIME_HEADERS,\n\tCONNECTION_INIT_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_ALERT_TIMEOUT,\n\tMAX_DELAY_MS,\n\tMESSAGE_TYPES,\n\tNON_RETRYABLE_CODES,\n\tSOCKET_STATUS,\n\tSTART_ACK_TIMEOUT,\n\tSUBSCRIPTION_STATUS,\n\tCONNECTION_STATE_CHANGE,\n} from '../constants';\nimport {\n\tConnectionStateMonitor,\n\tCONNECTION_CHANGE,\n} from '../../utils/ConnectionStateMonitor';\nimport {\n\tReconnectEvent,\n\tReconnectionMonitor,\n} from '../../utils/ReconnectionMonitor';\n\nconst logger = new Logger('AWSAppSyncRealTimeProvider');\n\nconst dispatchApiEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('api', { event, data, message }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nexport type ObserverQuery = {\n\tobserver: ZenObservable.SubscriptionObserver<any>;\n\tquery: string;\n\tvariables: object;\n\tsubscriptionState: SUBSCRIPTION_STATUS;\n\tsubscriptionReadyCallback?: Function;\n\tsubscriptionFailedCallback?: Function;\n\tstartAckTimeoutId?: ReturnType<typeof setTimeout>;\n};\n\nconst standardDomainPattern =\n\t/^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\n\nconst customDomainPath = '/realtime';\n\ntype GraphqlAuthModes = keyof typeof GRAPHQL_AUTH_MODE;\n\nexport interface AWSAppSyncRealTimeProviderOptions extends ProviderOptions {\n\tappSyncGraphqlEndpoint?: string;\n\tauthenticationType?: GraphqlAuthModes;\n\tquery?: string;\n\tvariables?: object;\n\tapiKey?: string;\n\tregion?: string;\n\tgraphql_headers?: () => {} | (() => Promise<{}>);\n\tadditionalHeaders?: { [key: string]: string };\n}\n\ntype AWSAppSyncRealTimeAuthInput =\n\tPartial<AWSAppSyncRealTimeProviderOptions> & {\n\t\tcanonicalUri: string;\n\t\tpayload: string;\n\t};\n\nexport class AWSAppSyncRealTimeProvider extends AbstractPubSubProvider {\n\tprivate awsRealTimeSocket?: WebSocket;\n\tprivate socketStatus: SOCKET_STATUS = SOCKET_STATUS.CLOSED;\n\tprivate keepAliveTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n\tprivate keepAliveAlertTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate subscriptionObserverMap: Map<string, ObserverQuery> = new Map();\n\tprivate promiseArray: Array<{ res: Function; rej: Function }> = [];\n\tprivate connectionState: ConnectionState;\n\tprivate readonly connectionStateMonitor = new ConnectionStateMonitor();\n\tprivate readonly reconnectionMonitor = new ReconnectionMonitor();\n\tprivate connectionStateMonitorSubscription: ZenObservable.Subscription;\n\n\tconstructor(options: ProviderOptions = {}) {\n\t\tsuper(options);\n\t\t// Monitor the connection state and pass changes along to Hub\n\t\tthis.connectionStateMonitorSubscription =\n\t\t\tthis.connectionStateMonitor.connectionStateObservable.subscribe(\n\t\t\t\tconnectionState => {\n\t\t\t\t\tdispatchApiEvent(\n\t\t\t\t\t\tCONNECTION_STATE_CHANGE,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprovider: this,\n\t\t\t\t\t\t\tconnectionState,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t`Connection state is ${connectionState}`\n\t\t\t\t\t);\n\t\t\t\t\tthis.connectionState = connectionState;\n\n\t\t\t\t\t// Trigger START_RECONNECT when the connection is disrupted\n\t\t\t\t\tif (connectionState === ConnectionState.ConnectionDisrupted) {\n\t\t\t\t\t\tthis.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Trigger HALT_RECONNECT to halt reconnection attempts when the state is anything other than\n\t\t\t\t\t//   ConnectionDisrupted or Connecting\n\t\t\t\t\tif (\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tConnectionState.Connected,\n\t\t\t\t\t\t\tConnectionState.ConnectedPendingDisconnect,\n\t\t\t\t\t\t\tConnectionState.ConnectedPendingKeepAlive,\n\t\t\t\t\t\t\tConnectionState.ConnectedPendingNetwork,\n\t\t\t\t\t\t\tConnectionState.ConnectedPendingNetwork,\n\t\t\t\t\t\t\tConnectionState.ConnectionDisruptedPendingNetwork,\n\t\t\t\t\t\t\tConnectionState.Disconnected,\n\t\t\t\t\t\t].includes(connectionState)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t}\n\n\t/**\n\t * Mark the socket closed and release all active listeners\n\t */\n\tclose() {\n\t\t// Mark the socket closed both in status and the connection monitor\n\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n\n\t\t// Turn off the subscription monitor Hub publishing\n\t\tthis.connectionStateMonitorSubscription.unsubscribe();\n\t\t// Complete all reconnect observers\n\t\tthis.reconnectionMonitor.close();\n\t}\n\n\tgetNewWebSocket(url, protocol) {\n\t\treturn new WebSocket(url, protocol);\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSAppSyncRealTimeProvider';\n\t}\n\n\tnewClient(): Promise<any> {\n\t\tthrow new Error('Not used here');\n\t}\n\n\tpublic async publish(_topics: string[] | string, _msg: any, _options?: any) {\n\t\tthrow new Error('Operation not supported');\n\t}\n\n\t// Check if url matches standard domain pattern\n\tprivate isCustomDomain(url: string): boolean {\n\t\treturn url.match(standardDomainPattern) === null;\n\t}\n\n\tsubscribe(\n\t\t_topics: string[] | string,\n\t\toptions?: AWSAppSyncRealTimeProviderOptions\n\t): Observable<any> {\n\t\tconst appSyncGraphqlEndpoint = options?.appSyncGraphqlEndpoint;\n\n\t\treturn new Observable(observer => {\n\t\t\tif (!options || !appSyncGraphqlEndpoint) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`Subscribe only available for AWS AppSync endpoint`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tobserver.complete();\n\t\t\t} else {\n\t\t\t\tlet subscriptionStartActive = false;\n\t\t\t\tconst subscriptionId = uuid();\n\t\t\t\tconst startSubscription = () => {\n\t\t\t\t\tif (!subscriptionStartActive) {\n\t\t\t\t\t\tsubscriptionStartActive = true;\n\t\t\t\t\t\tconst startSubscriptionPromise =\n\t\t\t\t\t\t\tthis._startSubscriptionWithAWSAppSyncRealTime({\n\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\tobserver,\n\t\t\t\t\t\t\t\tsubscriptionId,\n\t\t\t\t\t\t\t}).catch<any>(err => {\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`${CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR}: ${err}`\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tstartSubscriptionPromise.finally(() => {\n\t\t\t\t\t\t\tsubscriptionStartActive = false;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tlet reconnectSubscription: ZenObservable.Subscription;\n\n\t\t\t\t// Add an observable to the reconnection list to manage reconnection for this subscription\n\t\t\t\treconnectSubscription = new Observable(observer => {\n\t\t\t\t\tthis.reconnectionMonitor.addObserver(observer);\n\t\t\t\t}).subscribe(() => {\n\t\t\t\t\tstartSubscription();\n\t\t\t\t});\n\n\t\t\t\tstartSubscription();\n\n\t\t\t\treturn async () => {\n\t\t\t\t\t// Cleanup reconnection subscription\n\t\t\t\t\treconnectSubscription?.unsubscribe();\n\n\t\t\t\t\t// Cleanup after unsubscribing or observer.complete was called after _startSubscriptionWithAWSAppSyncRealTime\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Waiting that subscription has been connected before trying to unsubscribe\n\t\t\t\t\t\tawait this._waitForSubscriptionToBeConnected(subscriptionId);\n\n\t\t\t\t\t\tconst { subscriptionState } =\n\t\t\t\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t\t\t\tif (!subscriptionState) {\n\t\t\t\t\t\t\t// subscription already unsubscribed\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n\t\t\t\t\t\t\tthis._sendUnsubscriptionMessage(subscriptionId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error('Subscription never connected');\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tlogger.debug(`Error while unsubscribing ${err}`);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._removeSubscriptionObserver(subscriptionId);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options\n\t\t\t.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n\t}\n\n\tprivate async _startSubscriptionWithAWSAppSyncRealTime({\n\t\toptions,\n\t\tobserver,\n\t\tsubscriptionId,\n\t}: {\n\t\toptions: AWSAppSyncRealTimeProviderOptions;\n\t\tobserver: ZenObservable.SubscriptionObserver<any>;\n\t\tsubscriptionId: string;\n\t}) {\n\t\tconst {\n\t\t\tappSyncGraphqlEndpoint,\n\t\t\tauthenticationType,\n\t\t\tquery,\n\t\t\tvariables,\n\t\t\tapiKey,\n\t\t\tregion,\n\t\t\tgraphql_headers = () => ({}),\n\t\t\tadditionalHeaders = {},\n\t\t} = options;\n\n\t\tconst subscriptionState: SUBSCRIPTION_STATUS = SUBSCRIPTION_STATUS.PENDING;\n\t\tconst data = {\n\t\t\tquery,\n\t\t\tvariables,\n\t\t};\n\t\t// Having a subscription id map will make it simple to forward messages received\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionState,\n\t\t\tstartAckTimeoutId: undefined,\n\t\t});\n\n\t\t// Preparing payload for subscription message\n\n\t\tconst dataString = JSON.stringify(data);\n\t\tconst headerObj = {\n\t\t\t...(await this._awsRealTimeHeaderBasedAuth({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tpayload: dataString,\n\t\t\t\tcanonicalUri: '',\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t})),\n\t\t\t...(await graphql_headers()),\n\t\t\t...additionalHeaders,\n\t\t\t[USER_AGENT_HEADER]: Constants.userAgent,\n\t\t};\n\n\t\tconst subscriptionMessage = {\n\t\t\tid: subscriptionId,\n\t\t\tpayload: {\n\t\t\t\tdata: dataString,\n\t\t\t\textensions: {\n\t\t\t\t\tauthorization: {\n\t\t\t\t\t\t...headerObj,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: MESSAGE_TYPES.GQL_START,\n\t\t};\n\n\t\tconst stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n\n\t\ttry {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n\t\t\tawait this._initializeWebSocketConnection({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tthis._logStartSubscriptionError(subscriptionId, observer, err);\n\t\t\treturn;\n\t\t}\n\n\t\t// Potential race condition can occur when unsubscribe is called during _initializeWebSocketConnection.\n\t\t// E.g.unsubscribe gets invoked prior to finishing WebSocket handshake or START_ACK.\n\t\t// Both subscriptionFailedCallback and subscriptionReadyCallback are used to synchronized this.\n\n\t\tconst { subscriptionFailedCallback, subscriptionReadyCallback } =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId) ?? {};\n\n\t\t// This must be done before sending the message in order to be listening immediately\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tsubscriptionState,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t\tstartAckTimeoutId: setTimeout(() => {\n\t\t\t\tthis._timeoutStartSubscriptionAck.call(this, subscriptionId);\n\t\t\t}, START_ACK_TIMEOUT),\n\t\t});\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t}\n\t}\n\n\t// Log logic for start subscription failures\n\tprivate _logStartSubscriptionError(subscriptionId, observer, err) {\n\t\tlogger.debug({ err });\n\t\tconst message = err['message'] ?? '';\n\t\t// Resolving to give the state observer time to propogate the update\n\t\tPromise.resolve(\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED)\n\t\t);\n\n\t\t// Capture the error only when the network didn't cause disruption\n\t\tif (\n\t\t\tthis.connectionState !== ConnectionState.ConnectionDisruptedPendingNetwork\n\t\t) {\n\t\t\t// When the error is non-retriable, error out the observable\n\t\t\tif (isNonRetryableError(err)) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.debug(`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`);\n\t\t\t}\n\n\t\t\tconst { subscriptionFailedCallback } =\n\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t// Notify concurrent unsubscription\n\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\tsubscriptionFailedCallback();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Waiting that subscription has been connected before trying to unsubscribe\n\tprivate async _waitForSubscriptionToBeConnected(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { subscriptionState } = subscriptionObserver;\n\t\t\t// This in case unsubscribe is invoked before sending start subscription message\n\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tconst { observer, subscriptionState, variables, query } =\n\t\t\t\t\t\tsubscriptionObserver;\n\t\t\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\t\t\tobserver,\n\t\t\t\t\t\tsubscriptionState,\n\t\t\t\t\t\tvariables,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tsubscriptionReadyCallback: res,\n\t\t\t\t\t\tsubscriptionFailedCallback: rej,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _sendUnsubscriptionMessage(subscriptionId: string) {\n\t\ttry {\n\t\t\tif (\n\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n\t\t\t\tthis.socketStatus === SOCKET_STATUS.READY\n\t\t\t) {\n\t\t\t\t// Preparing unsubscribe message to stop receiving messages for that subscription\n\t\t\t\tconst unsubscribeMessage = {\n\t\t\t\t\tid: subscriptionId,\n\t\t\t\t\ttype: MESSAGE_TYPES.GQL_STOP,\n\t\t\t\t};\n\t\t\t\tconst stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n\t\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n\t\t\tlogger.debug({ err });\n\t\t}\n\t}\n\n\tprivate _removeSubscriptionObserver(subscriptionId: string) {\n\t\tthis.subscriptionObserverMap.delete(subscriptionId);\n\n\t\t// Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t}\n\n\tprivate _closeSocketIfRequired() {\n\t\tif (this.subscriptionObserverMap.size > 0) {\n\t\t\t// Active subscriptions on the WebSocket\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.awsRealTimeSocket) {\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n\t\tif (this.awsRealTimeSocket.bufferedAmount > 0) {\n\t\t\t// Still data on the WebSocket\n\t\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t\t} else {\n\t\t\tlogger.debug('closing WebSocket...');\n\t\t\tif (this.keepAliveTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveTimeoutId);\n\t\t\t}\n\t\t\tif (this.keepAliveAlertTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\t}\n\t\t\tconst tempSocket = this.awsRealTimeSocket;\n\t\t\t// Cleaning callbacks to avoid race condition, socket still exists\n\t\t\ttempSocket.onclose = null;\n\t\t\ttempSocket.onerror = null;\n\t\t\ttempSocket.close(1000);\n\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t}\n\t}\n\n\tprivate _handleIncomingSubscriptionMessage(message: MessageEvent) {\n\t\tlogger.debug(\n\t\t\t`subscription message from AWS AppSync RealTime: ${message.data}`\n\t\t);\n\t\tconst { id = '', payload, type } = JSON.parse(message.data);\n\t\tconst {\n\t\t\tobserver = null,\n\t\t\tquery = '',\n\t\t\tvariables = {},\n\t\t\tstartAckTimeoutId,\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t} = this.subscriptionObserverMap.get(id) || {};\n\n\t\tlogger.debug({ id, observer, query, variables });\n\n\t\tif (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n\t\t\tif (observer) {\n\t\t\t\tobserver.next(payload);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`observer not found for id: ${id}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_START_ACK) {\n\t\t\tlogger.debug(\n\t\t\t\t`subscription ready for ${JSON.stringify({ query, variables })}`\n\t\t\t);\n\t\t\tif (typeof subscriptionReadyCallback === 'function') {\n\t\t\t\tsubscriptionReadyCallback();\n\t\t\t}\n\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\t\t\tdispatchApiEvent(\n\t\t\t\tCONTROL_MSG.SUBSCRIPTION_ACK,\n\t\t\t\t{ query, variables },\n\t\t\t\t'Connection established for subscription'\n\t\t\t);\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId: undefined,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\tCONNECTION_CHANGE.CONNECTION_ESTABLISHED\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n\t\t\tif (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n\t\t\tif (this.keepAliveAlertTimeoutId)\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\tthis.keepAliveTimeoutId = setTimeout(\n\t\t\t\t() => this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT),\n\t\t\t\tthis.keepAliveTimeout\n\t\t\t);\n\t\t\tthis.keepAliveAlertTimeoutId = setTimeout(() => {\n\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n\t\t\t}, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_ERROR) {\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t});\n\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`\n\t\t\t\t);\n\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\n\t\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\n\t\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\t\tsubscriptionFailedCallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _errorDisconnect(msg: string) {\n\t\tlogger.debug(`Disconnect error: ${msg}`);\n\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tthis.awsRealTimeSocket.close();\n\t\t}\n\n\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t}\n\n\tprivate _timeoutStartSubscriptionAck(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { observer, query, variables } = subscriptionObserver;\n\t\t\tif (!observer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\tobserver,\n\t\t\t\tquery,\n\t\t\t\tvariables,\n\t\t\t\tsubscriptionState: SUBSCRIPTION_STATUS.FAILED,\n\t\t\t});\n\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tlogger.debug(\n\t\t\t\t'timeoutStartSubscription',\n\t\t\t\tJSON.stringify({ query, variables })\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _initializeWebSocketConnection({\n\t\tappSyncGraphqlEndpoint,\n\t\tauthenticationType,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeProviderOptions) {\n\t\tif (this.socketStatus === SOCKET_STATUS.READY) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tthis.promiseArray.push({ res, rej });\n\n\t\t\tif (this.socketStatus === SOCKET_STATUS.CLOSED) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CONNECTING;\n\n\t\t\t\t\tconst payloadString = '{}';\n\t\t\t\t\tconst headerString = JSON.stringify(\n\t\t\t\t\t\tawait this._awsRealTimeHeaderBasedAuth({\n\t\t\t\t\t\t\tauthenticationType,\n\t\t\t\t\t\t\tpayload: payloadString,\n\t\t\t\t\t\t\tcanonicalUri: '/connect',\n\t\t\t\t\t\t\tapiKey,\n\t\t\t\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\t\t\t\tregion,\n\t\t\t\t\t\t\tadditionalHeaders,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tconst headerQs = Buffer.from(headerString).toString('base64');\n\n\t\t\t\t\tconst payloadQs = Buffer.from(payloadString).toString('base64');\n\n\t\t\t\t\tlet discoverableEndpoint = appSyncGraphqlEndpoint ?? '';\n\n\t\t\t\t\tif (this.isCustomDomain(discoverableEndpoint)) {\n\t\t\t\t\t\tdiscoverableEndpoint =\n\t\t\t\t\t\t\tdiscoverableEndpoint.concat(customDomainPath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t\t.replace('appsync-api', 'appsync-realtime-api')\n\t\t\t\t\t\t\t.replace('gogi-beta', 'grt-beta');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Creating websocket url with required query strings\n\t\t\t\t\tconst protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t.replace('https://', protocol)\n\t\t\t\t\t\t.replace('http://', protocol);\n\n\t\t\t\t\tconst awsRealTimeUrl = `${discoverableEndpoint}?header=${headerQs}&payload=${payloadQs}`;\n\n\t\t\t\t\tawait this._initializeRetryableHandshake(awsRealTimeUrl);\n\n\t\t\t\t\tthis.promiseArray.forEach(({ res }) => {\n\t\t\t\t\t\tlogger.debug('Notifying connection successful');\n\t\t\t\t\t\tres();\n\t\t\t\t\t});\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.READY;\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('Connection exited with', err);\n\t\t\t\t\tthis.promiseArray.forEach(({ rej }) => rej(err));\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.awsRealTimeSocket.close(3001);\n\t\t\t\t\t}\n\t\t\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _initializeRetryableHandshake(awsRealTimeUrl: string) {\n\t\tlogger.debug(`Initializaling retryable Handshake`);\n\t\tawait jitteredExponentialRetry(\n\t\t\tthis._initializeHandshake.bind(this),\n\t\t\t[awsRealTimeUrl],\n\t\t\tMAX_DELAY_MS\n\t\t);\n\t}\n\n\tprivate async _initializeHandshake(awsRealTimeUrl: string) {\n\t\tlogger.debug(`Initializing handshake ${awsRealTimeUrl}`);\n\t\t// Because connecting the socket is async, is waiting until connection is open\n\t\t// Step 1: connect websocket\n\t\ttry {\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise<void>((res, rej) => {\n\t\t\t\t\tconst newSocket = this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n\t\t\t\t\tnewSocket.onerror = () => {\n\t\t\t\t\t\tlogger.debug(`WebSocket connection error`);\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onclose = () => {\n\t\t\t\t\t\trej(new Error('Connection handshake error'));\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onopen = () => {\n\t\t\t\t\t\tthis.awsRealTimeSocket = newSocket;\n\t\t\t\t\t\treturn res();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})();\n\t\t\t// Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\tlet ackOk = false;\n\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = error => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket error ${JSON.stringify(error)}`);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\trej(new Error(JSON.stringify(event)));\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage = (message: MessageEvent) => {\n\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t`subscription message from AWS AppSyncRealTime: ${message.data} `\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst data = JSON.parse(message.data);\n\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\tconnectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT,\n\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t} = data;\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n\t\t\t\t\t\t\t\tackOk = true;\n\t\t\t\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\t\t\t\tthis.keepAliveTimeout = connectionTimeoutMs;\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage =\n\t\t\t\t\t\t\t\t\t\tthis._handleIncomingSubscriptionMessage.bind(this);\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = err => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tres('Cool, connected to AWS AppSyncRealTime');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\terrors: [{ errorType = '', errorCode = 0 } = {}] = [],\n\t\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t\t} = data;\n\n\t\t\t\t\t\t\t\trej({ errorType, errorCode });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst gqlInit = {\n\t\t\t\t\t\t\ttype: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n\t\t\t\t\t\tconst checkAckOk = (ackOk: boolean) => {\n\t\t\t\t\t\t\tif (!ackOk) {\n\t\t\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\t\t\tCONNECTION_CHANGE.CONNECTION_FAILED\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t`Connection timeout: ack from AWSAppSyncRealTime was not received after ${CONNECTION_INIT_TIMEOUT} ms`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tsetTimeout(() => checkAckOk(ackOk), CONNECTION_INIT_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})();\n\t\t} catch (err) {\n\t\t\tconst { errorType, errorCode } = err as {\n\t\t\t\terrorType: string;\n\t\t\t\terrorCode: number;\n\t\t\t};\n\n\t\t\tif (NON_RETRYABLE_CODES.includes(errorCode)) {\n\t\t\t\tthrow new NonRetryableError(errorType);\n\t\t\t} else if (errorType) {\n\t\t\t\tthrow new Error(errorType);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeHeaderBasedAuth({\n\t\tauthenticationType,\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeProviderOptions): Promise<any> {\n\t\tconst headerHandler: {\n\t\t\t[key in GraphqlAuthModes]: (AWSAppSyncRealTimeAuthInput) => {};\n\t\t} = {\n\t\t\tAPI_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n\t\t\tAWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n\t\t\tOPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n\t\t\tAMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n\t\t\tAWS_LAMBDA: this._customAuthHeader,\n\t\t};\n\n\t\tif (!authenticationType || !headerHandler[authenticationType]) {\n\t\t\tlogger.debug(`Authentication type ${authenticationType} not supported`);\n\t\t\treturn '';\n\t\t} else {\n\t\t\tconst handler = headerHandler[authenticationType];\n\n\t\t\tconst { host } = url.parse(appSyncGraphqlEndpoint ?? '');\n\n\t\t\tlogger.debug(`Authenticating with ${authenticationType}`);\n\n\t\t\tconst result = await handler({\n\t\t\t\tpayload,\n\t\t\t\tcanonicalUri,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tapiKey,\n\t\t\t\tregion,\n\t\t\t\thost,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeCUPHeader({ host }: AWSAppSyncRealTimeAuthInput) {\n\t\tconst session = await Auth.currentSession();\n\t\treturn {\n\t\t\tAuthorization: session.getAccessToken().getJwtToken(),\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeOPENIDHeader({\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tlet token;\n\t\t// backwards compatibility\n\t\tconst federatedInfo = await Cache.getItem('federatedInfo');\n\t\tif (federatedInfo) {\n\t\t\ttoken = federatedInfo.token;\n\t\t} else {\n\t\t\tconst currentUser = await Auth.currentAuthenticatedUser();\n\t\t\tif (currentUser) {\n\t\t\t\ttoken = currentUser.token;\n\t\t\t}\n\t\t}\n\t\tif (!token) {\n\t\t\tthrow new Error('No federated jwt');\n\t\t}\n\t\treturn {\n\t\t\tAuthorization: token,\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeApiKeyHeader({\n\t\tapiKey,\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst dt = new Date();\n\t\tconst dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n\n\t\treturn {\n\t\t\thost,\n\t\t\t'x-amz-date': dtStr,\n\t\t\t'x-api-key': apiKey,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeIAMHeader({\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tregion,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst endpointInfo = {\n\t\t\tregion,\n\t\t\tservice: 'appsync',\n\t\t};\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\t\tconst creds = await Credentials.get().then((credentials: any) => {\n\t\t\tconst { secretAccessKey, accessKeyId, sessionToken } =\n\t\t\t\tcredentials as ICredentials;\n\n\t\t\treturn {\n\t\t\t\tsecret_key: secretAccessKey,\n\t\t\t\taccess_key: accessKeyId,\n\t\t\t\tsession_token: sessionToken,\n\t\t\t};\n\t\t});\n\n\t\tconst request = {\n\t\t\turl: `${appSyncGraphqlEndpoint}${canonicalUri}`,\n\t\t\tdata: payload,\n\t\t\tmethod: 'POST',\n\t\t\theaders: { ...AWS_APPSYNC_REALTIME_HEADERS },\n\t\t};\n\n\t\tconst signed_params = Signer.sign(request, creds, endpointInfo);\n\t\treturn signed_params.headers;\n\t}\n\n\tprivate _customAuthHeader({\n\t\thost,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tif (!additionalHeaders || !additionalHeaders['Authorization']) {\n\t\t\tthrow new Error('No auth token specified');\n\t\t}\n\n\t\treturn {\n\t\t\tAuthorization: additionalHeaders.Authorization,\n\t\t\thost,\n\t\t};\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_ensureCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then((credentials: any) => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch((err: any) => {\n\t\t\t\tlogger.warn('ensure credentials error', err);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
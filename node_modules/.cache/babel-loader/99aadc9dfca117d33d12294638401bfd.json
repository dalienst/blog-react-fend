{"ast":null,"code":"import { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"./constants\";\nexport var getDefaultRetryQuota = function (initialRetryTokens) {\n  var MAX_CAPACITY = initialRetryTokens;\n  var availableCapacity = initialRetryTokens;\n\n  var getCapacityAmount = function (error) {\n    return error.name === \"TimeoutError\" ? TIMEOUT_RETRY_COST : RETRY_COST;\n  };\n\n  var hasRetryTokens = function (error) {\n    return getCapacityAmount(error) <= availableCapacity;\n  };\n\n  var retrieveRetryTokens = function (error) {\n    if (!hasRetryTokens(error)) {\n      // retryStrategy should stop retrying, and return last error\n      throw new Error(\"No retry token available\");\n    }\n\n    var capacityAmount = getCapacityAmount(error);\n    availableCapacity -= capacityAmount;\n    return capacityAmount;\n  };\n\n  var releaseRetryTokens = function (capacityReleaseAmount) {\n    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : NO_RETRY_INCREMENT;\n    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n  };\n\n  return Object.freeze({\n    hasRetryTokens: hasRetryTokens,\n    retrieveRetryTokens: retrieveRetryTokens,\n    releaseRetryTokens: releaseRetryTokens\n  });\n};","map":{"version":3,"mappings":"AAEA,SAASA,kBAAT,EAA6BC,UAA7B,EAAyCC,kBAAzC,QAAmE,aAAnE;AAGA,OAAO,IAAMC,oBAAoB,GAAG,UAACC,kBAAD,EAA2B;AAC7D,MAAMC,YAAY,GAAGD,kBAArB;AACA,MAAIE,iBAAiB,GAAGF,kBAAxB;;AAEA,MAAMG,iBAAiB,GAAG,UAACC,KAAD,EAAgB;AAAK,WAACA,KAAK,CAACC,IAAN,KAAe,cAAf,GAAgCP,kBAAhC,GAAqDD,UAAtD;AAAiE,GAAhH;;AAEA,MAAMS,cAAc,GAAG,UAACF,KAAD,EAAgB;AAAK,4BAAiB,CAACA,KAAD,CAAjB,IAA4BF,iBAA5B;AAA6C,GAAzF;;AAEA,MAAMK,mBAAmB,GAAG,UAACH,KAAD,EAAgB;AAC1C,QAAI,CAACE,cAAc,CAACF,KAAD,CAAnB,EAA4B;AAC1B;AACA,YAAM,IAAII,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,QAAMC,cAAc,GAAGN,iBAAiB,CAACC,KAAD,CAAxC;AACAF,qBAAiB,IAAIO,cAArB;AACA,WAAOA,cAAP;AACD,GARD;;AAUA,MAAMC,kBAAkB,GAAG,UAACC,qBAAD,EAA+B;AACxDT,qBAAiB,IAAIS,qBAAqB,SAArB,yBAAqB,WAArB,2BAAyBf,kBAA9C;AACAM,qBAAiB,GAAGU,IAAI,CAACC,GAAL,CAASX,iBAAT,EAA4BD,YAA5B,CAApB;AACD,GAHD;;AAKA,SAAOa,MAAM,CAACC,MAAP,CAAc;AACnBT,kBAAc,gBADK;AAEnBC,uBAAmB,qBAFA;AAGnBG,sBAAkB;AAHC,GAAd,CAAP;AAKD,CA5BM","names":["NO_RETRY_INCREMENT","RETRY_COST","TIMEOUT_RETRY_COST","getDefaultRetryQuota","initialRetryTokens","MAX_CAPACITY","availableCapacity","getCapacityAmount","error","name","hasRetryTokens","retrieveRetryTokens","Error","capacityAmount","releaseRetryTokens","capacityReleaseAmount","Math","min","Object","freeze"],"sources":["/home/dalienst/node_modules/@aws-sdk/middleware-retry/src/defaultRetryQuota.ts"],"sourcesContent":["import { SdkError } from \"@aws-sdk/smithy-client\";\n\nimport { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"./constants\";\nimport { RetryQuota } from \"./defaultStrategy\";\n\nexport const getDefaultRetryQuota = (initialRetryTokens: number): RetryQuota => {\n  const MAX_CAPACITY = initialRetryTokens;\n  let availableCapacity = initialRetryTokens;\n\n  const getCapacityAmount = (error: SdkError) => (error.name === \"TimeoutError\" ? TIMEOUT_RETRY_COST : RETRY_COST);\n\n  const hasRetryTokens = (error: SdkError) => getCapacityAmount(error) <= availableCapacity;\n\n  const retrieveRetryTokens = (error: SdkError) => {\n    if (!hasRetryTokens(error)) {\n      // retryStrategy should stop retrying, and return last error\n      throw new Error(\"No retry token available\");\n    }\n    const capacityAmount = getCapacityAmount(error);\n    availableCapacity -= capacityAmount;\n    return capacityAmount;\n  };\n\n  const releaseRetryTokens = (capacityReleaseAmount?: number) => {\n    availableCapacity += capacityReleaseAmount ?? NO_RETRY_INCREMENT;\n    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n  };\n\n  return Object.freeze({\n    hasRetryTokens,\n    retrieveRetryTokens,\n    releaseRetryTokens,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ConsoleLogger } from '@aws-amplify/core';\nimport { InAppMessageInteractionEvent, Notifications } from '@aws-amplify/notifications';\nimport isNil from 'lodash/isNil';\nimport RenderNothing from '../../../components/RenderNothing/RenderNothing.js';\nimport useInAppMessaging from '../useInAppMessaging/useInAppMessaging.js';\nimport { getContentProps, getPositionProp } from './utils.js';\nconst EMPTY_PROPS = Object.freeze({});\nconst logger = new ConsoleLogger('Notifications.InAppMessaging');\nconst {\n  InAppMessaging\n} = Notifications;\n/**\n * Utility hook for parsing a message and retrieving its corresponding UI component and props\n *\n * @param {UseMessageParams} props - platform specific UI components, action handler, and styles\n * @returns {UseMessage} message UI component and props\n */\n\nfunction useMessage(_ref) {\n  let {\n    components,\n    onMessageAction\n  } = _ref;\n  const {\n    clearMessage,\n    message\n  } = useInAppMessaging();\n  const {\n    BannerMessage,\n    CarouselMessage,\n    FullScreenMessage,\n    ModalMessage\n  } = components;\n\n  if (isNil(message)) {\n    return {\n      Component: RenderNothing,\n      props: EMPTY_PROPS\n    };\n  }\n\n  const {\n    content,\n    layout\n  } = message;\n\n  const onActionCallback = () => {\n    InAppMessaging.notifyMessageInteraction(message, InAppMessageInteractionEvent.MESSAGE_ACTION_TAKEN);\n    clearMessage();\n  };\n\n  const onClose = () => {\n    InAppMessaging.notifyMessageInteraction(message, InAppMessageInteractionEvent.MESSAGE_DISMISSED);\n    clearMessage();\n  };\n\n  const onDisplay = () => {\n    InAppMessaging.notifyMessageInteraction(message, InAppMessageInteractionEvent.MESSAGE_DISPLAYED);\n  };\n\n  switch (layout) {\n    case 'BOTTOM_BANNER':\n    case 'MIDDLE_BANNER':\n    case 'TOP_BANNER':\n      {\n        const props = Object.assign(Object.assign({}, getContentProps(content === null || content === void 0 ? void 0 : content[0], onMessageAction, onActionCallback)), {\n          layout,\n          onClose,\n          onDisplay,\n          position: getPositionProp(layout)\n        });\n        return {\n          Component: BannerMessage,\n          props\n        };\n      }\n\n    case 'CAROUSEL':\n      {\n        const props = {\n          data: content === null || content === void 0 ? void 0 : content.map(item => getContentProps(item, onMessageAction, onActionCallback)),\n          layout,\n          onClose,\n          onDisplay\n        };\n        return {\n          Component: CarouselMessage,\n          props\n        };\n      }\n\n    case 'FULL_SCREEN':\n      {\n        const props = Object.assign(Object.assign({}, getContentProps(content === null || content === void 0 ? void 0 : content[0], onMessageAction, onActionCallback)), {\n          layout,\n          onClose,\n          onDisplay\n        });\n        return {\n          Component: FullScreenMessage,\n          props\n        };\n      }\n\n    case 'MODAL':\n      {\n        const props = Object.assign(Object.assign({}, getContentProps(content === null || content === void 0 ? void 0 : content[0], onMessageAction, onActionCallback)), {\n          layout,\n          onClose,\n          onDisplay\n        });\n        return {\n          Component: ModalMessage,\n          props\n        };\n      }\n\n    default:\n      {\n        logger.info(`Received unknown InAppMessage layout: ${layout}`);\n        return {\n          Component: RenderNothing,\n          props: EMPTY_PROPS\n        };\n      }\n  }\n}\n\nexport { EMPTY_PROPS, useMessage as default };","map":{"version":3,"sources":["/home/dalienst/node_modules/@aws-amplify/ui-react-core/dist/esm/InAppMessaging/hooks/useMessage/useMessage.js"],"names":["ConsoleLogger","InAppMessageInteractionEvent","Notifications","isNil","RenderNothing","useInAppMessaging","getContentProps","getPositionProp","EMPTY_PROPS","Object","freeze","logger","InAppMessaging","useMessage","components","onMessageAction","clearMessage","message","BannerMessage","CarouselMessage","FullScreenMessage","ModalMessage","Component","props","content","layout","onActionCallback","notifyMessageInteraction","MESSAGE_ACTION_TAKEN","onClose","MESSAGE_DISMISSED","onDisplay","MESSAGE_DISPLAYED","assign","position","data","map","item","info","default"],"mappings":"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","sourcesContent":["import { ConsoleLogger } from '@aws-amplify/core';\nimport { InAppMessageInteractionEvent, Notifications } from '@aws-amplify/notifications';\nimport isNil from 'lodash/isNil';\nimport RenderNothing from '../../../components/RenderNothing/RenderNothing.js';\nimport useInAppMessaging from '../useInAppMessaging/useInAppMessaging.js';\nimport { getContentProps, getPositionProp } from './utils.js';\n\nconst EMPTY_PROPS = Object.freeze({});\nconst logger = new ConsoleLogger('Notifications.InAppMessaging');\nconst { InAppMessaging } = Notifications;\n/**\n * Utility hook for parsing a message and retrieving its corresponding UI component and props\n *\n * @param {UseMessageParams} props - platform specific UI components, action handler, and styles\n * @returns {UseMessage} message UI component and props\n */\nfunction useMessage({ components, onMessageAction, }) {\n    const { clearMessage, message } = useInAppMessaging();\n    const { BannerMessage, CarouselMessage, FullScreenMessage, ModalMessage } = components;\n    if (isNil(message)) {\n        return {\n            Component: RenderNothing,\n            props: EMPTY_PROPS,\n        };\n    }\n    const { content, layout } = message;\n    const onActionCallback = () => {\n        InAppMessaging.notifyMessageInteraction(message, InAppMessageInteractionEvent.MESSAGE_ACTION_TAKEN);\n        clearMessage();\n    };\n    const onClose = () => {\n        InAppMessaging.notifyMessageInteraction(message, InAppMessageInteractionEvent.MESSAGE_DISMISSED);\n        clearMessage();\n    };\n    const onDisplay = () => {\n        InAppMessaging.notifyMessageInteraction(message, InAppMessageInteractionEvent.MESSAGE_DISPLAYED);\n    };\n    switch (layout) {\n        case 'BOTTOM_BANNER':\n        case 'MIDDLE_BANNER':\n        case 'TOP_BANNER': {\n            const props = Object.assign(Object.assign({}, getContentProps(content === null || content === void 0 ? void 0 : content[0], onMessageAction, onActionCallback)), { layout,\n                onClose,\n                onDisplay, position: getPositionProp(layout) });\n            return { Component: BannerMessage, props };\n        }\n        case 'CAROUSEL': {\n            const props = {\n                data: content === null || content === void 0 ? void 0 : content.map((item) => getContentProps(item, onMessageAction, onActionCallback)),\n                layout,\n                onClose,\n                onDisplay,\n            };\n            return { Component: CarouselMessage, props };\n        }\n        case 'FULL_SCREEN': {\n            const props = Object.assign(Object.assign({}, getContentProps(content === null || content === void 0 ? void 0 : content[0], onMessageAction, onActionCallback)), { layout,\n                onClose,\n                onDisplay });\n            return { Component: FullScreenMessage, props };\n        }\n        case 'MODAL': {\n            const props = Object.assign(Object.assign({}, getContentProps(content === null || content === void 0 ? void 0 : content[0], onMessageAction, onActionCallback)), { layout,\n                onClose,\n                onDisplay });\n            return { Component: ModalMessage, props };\n        }\n        default: {\n            logger.info(`Received unknown InAppMessage layout: ${layout}`);\n            return {\n                Component: RenderNothing,\n                props: EMPTY_PROPS,\n            };\n        }\n    }\n}\n\nexport { EMPTY_PROPS, useMessage as default };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { API } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { AmplifyClass, Credentials, UniversalStorage } from '@aws-amplify/core';\nimport { DataStore } from '@aws-amplify/datastore'; // ! We have to use this exact reference, since it gets mutated with Amplify.Auth\n\nimport { Amplify } from './index';\nvar requiredModules = [// API cannot function without Auth\nAuth, // Auth cannot function without Credentials\nCredentials]; // These modules have been tested with SSR\n\nvar defaultModules = [API, Auth, DataStore];\nexport function withSSRContext(context) {\n  if (context === void 0) {\n    context = {};\n  }\n\n  var _a = context.modules,\n      modules = _a === void 0 ? defaultModules : _a,\n      req = context.req;\n  var previousConfig = Amplify.configure();\n  var amplify = new AmplifyClass();\n  var storage = new UniversalStorage({\n    req: req\n  });\n  requiredModules.forEach(function (m) {\n    if (!modules.includes(m)) {\n      // @ts-ignore This expression is not constructable.\n      // Type 'Function' has no construct signatures.ts(2351)\n      amplify.register(new m.constructor());\n    }\n  }); // Associate new module instances with this amplify\n\n  modules.forEach(function (m) {\n    amplify.register(new m.constructor());\n  }); // Configure new Amplify instances with previous configuration\n\n  amplify.configure(__assign(__assign({}, previousConfig), {\n    storage: storage\n  }));\n  return amplify;\n}","map":{"version":3,"mappings":";AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,gBAApC,QAA4D,mBAA5D;AACA,SAASC,SAAT,QAA0B,wBAA1B,C,CAEA;;AACA,SAASC,OAAT,QAAwB,SAAxB;AAEA,IAAMC,eAAe,GAAG,CACvB;AACAN,IAFuB,EAGvB;AACAE,WAJuB,CAAxB,C,CAOA;;AACA,IAAMK,cAAc,GAAG,CAACR,GAAD,EAAMC,IAAN,EAAYI,SAAZ,CAAvB;AAOA,OAAM,SAAUI,cAAV,CAAyBC,OAAzB,EAA8C;AAArB;AAAAA;AAAqB;;AAC3C;AAAA;AAAA,MAA0BC,iBAA1B;AACR,MAAMC,cAAc,GAAGN,OAAO,CAACO,SAAR,EAAvB;AACA,MAAMC,OAAO,GAAG,IAAIZ,YAAJ,EAAhB;AACA,MAAMa,OAAO,GAAG,IAAIX,gBAAJ,CAAqB;AAAEO,OAAG;AAAL,GAArB,CAAhB;AAEAJ,iBAAe,CAACS,OAAhB,CAAwB,aAAC;AACxB,QAAI,CAACC,OAAO,CAACC,QAAR,CAAiBC,CAAjB,CAAL,EAA0B;AACzB;AACA;AACAL,aAAO,CAACM,QAAR,CAAiB,IAAID,CAAC,CAACE,WAAN,EAAjB;AACA;AACD,GAND,EANmD,CAcnD;;AACAJ,SAAO,CAACD,OAAR,CAAgB,aAAC;AAChBF,WAAO,CAACM,QAAR,CAAiB,IAAID,CAAC,CAACE,WAAN,EAAjB;AACA,GAFD,EAfmD,CAmBnD;;AACAP,SAAO,CAACD,SAAR,CAAiBS,sBAAMV,cAAN,GAAoB;AAAEG,WAAO;AAAT,GAApB,CAAjB;AAEA,SAAOD,OAAP;AACA","names":["API","Auth","AmplifyClass","Credentials","UniversalStorage","DataStore","Amplify","requiredModules","defaultModules","withSSRContext","context","req","previousConfig","configure","amplify","storage","forEach","modules","includes","m","register","constructor","__assign"],"sources":["/home/dalienst/node_modules/aws-amplify/src/withSSRContext.ts"],"sourcesContent":["import { API } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { AmplifyClass, Credentials, UniversalStorage } from '@aws-amplify/core';\nimport { DataStore } from '@aws-amplify/datastore';\n\n// ! We have to use this exact reference, since it gets mutated with Amplify.Auth\nimport { Amplify } from './index';\n\nconst requiredModules = [\n\t// API cannot function without Auth\n\tAuth,\n\t// Auth cannot function without Credentials\n\tCredentials,\n];\n\n// These modules have been tested with SSR\nconst defaultModules = [API, Auth, DataStore];\n\ntype Context = {\n\treq?: any;\n\tmodules?: any[];\n};\n\nexport function withSSRContext(context: Context = {}) {\n\tconst { modules = defaultModules, req } = context;\n\tconst previousConfig = Amplify.configure();\n\tconst amplify = new AmplifyClass();\n\tconst storage = new UniversalStorage({ req });\n\n\trequiredModules.forEach(m => {\n\t\tif (!modules.includes(m)) {\n\t\t\t// @ts-ignore This expression is not constructable.\n\t\t\t// Type 'Function' has no construct signatures.ts(2351)\n\t\t\tamplify.register(new m.constructor());\n\t\t}\n\t});\n\n\t// Associate new module instances with this amplify\n\tmodules.forEach(m => {\n\t\tamplify.register(new m.constructor());\n\t});\n\n\t// Configure new Amplify instances with previous configuration\n\tamplify.configure({ ...previousConfig, storage });\n\n\treturn amplify;\n}\n"]},"metadata":{},"sourceType":"module"}
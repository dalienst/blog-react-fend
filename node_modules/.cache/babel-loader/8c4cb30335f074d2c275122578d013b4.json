{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectFacesRequest, DetectFacesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectFacesCommand, serializeAws_json1_1DetectFacesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects faces within an image that is provided as input.</p>\n *\n *          <p>\n *             <code>DetectFaces</code> detects the 100 largest faces in the image. For each face\n *       detected, the operation returns face details. These details include a bounding box of the\n *       face, a confidence value (that the bounding box contains a face), and a fixed set of\n *       attributes such as facial landmarks (for example, coordinates of eye and mouth),\n *       presence of beard, sunglasses, and so on. </p>\n *          <p>The face-detection algorithm is most effective on frontal faces. For non-frontal or\n *       obscured faces, the algorithm might not detect the faces or might detect faces with lower\n *       confidence. </p>\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the AWS CLI\n *        to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *\n *          <note>\n *             <p>This is a stateless API operation. That is, the operation does not persist any\n *         data.</p>\n *          </note>\n *\n *          <p>This operation requires permissions to perform the\n *       <code>rekognition:DetectFaces</code> action. </p>\n */\n\nvar DetectFacesCommand =\n/** @class */\nfunction (_super) {\n  __extends(DetectFacesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DetectFacesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DetectFacesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectFacesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectFacesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DetectFacesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectFacesCommand(input, context);\n  };\n\n  DetectFacesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectFacesCommand(output, context);\n  };\n\n  return DetectFacesCommand;\n}($Command);\n\nexport { DetectFacesCommand };","map":{"version":3,"mappings":";AACA,SAASA,kBAAT,EAA6BC,mBAA7B,QAAwD,oBAAxD;AACA,SACEC,wCADF,EAEEC,sCAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AAAA;AAAA;AAAwCC,wCAAxC,CAKE;AACA;;;AAEA,8BAAqBC,KAArB,EAAmD;AAAnD,gBACE;AACAC,yBAAO,IAFT;;AAAqBC;iBAA8B,CAGjD;AACD;AAED;;;;;AAGAC,6DACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;AAE9B,SAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AAEA,QAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;AAEQ,cAAM,GAAKF,aAAa,OAAxB;AACR,QAAMQ,UAAU,GAAG,mBAAnB;AACA,QAAMC,WAAW,GAAG,oBAApB;AACA,QAAMC,uBAAuB,GAA4B;AACvDC,YAAM,QADiD;AAEvDH,gBAAU,YAF6C;AAGvDC,iBAAW,aAH4C;AAIvDG,6BAAuB,EAAEzB,kBAAkB,CAAC0B,kBAJW;AAKvDC,8BAAwB,EAAE1B,mBAAmB,CAACyB;AALS,KAAzD;AAOQ,sBAAc,GAAKb,aAAa,eAAhC;AACR,WAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;AACrC,2BAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;AAAsE,KAFnE,EAGLS,uBAHK,CAAP;AAKD,GAzBD;;AA2BQZ,2CAAR,UAAkBH,KAAlB,EAAkDuB,OAAlD,EAAyE;AACvE,WAAO5B,sCAAsC,CAACK,KAAD,EAAQuB,OAAR,CAA7C;AACD,GAFO;;AAIApB,6CAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;AACjE,WAAO7B,wCAAwC,CAAC8B,MAAD,EAASD,OAAT,CAA/C;AACD,GAFO;;AAMV;AAAC,CAtDD,CAAwCzB,QAAxC","names":["DetectFacesRequest","DetectFacesResponse","deserializeAws_json1_1DetectFacesCommand","serializeAws_json1_1DetectFacesCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","DetectFacesCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/home/dalienst/node_modules/@aws-sdk/client-rekognition/commands/DetectFacesCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { DetectFacesRequest, DetectFacesResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1DetectFacesCommand,\n  serializeAws_json1_1DetectFacesCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DetectFacesCommandInput = DetectFacesRequest;\nexport type DetectFacesCommandOutput = DetectFacesResponse & __MetadataBearer;\n\n/**\n * <p>Detects faces within an image that is provided as input.</p>\n *\n *          <p>\n *             <code>DetectFaces</code> detects the 100 largest faces in the image. For each face\n *       detected, the operation returns face details. These details include a bounding box of the\n *       face, a confidence value (that the bounding box contains a face), and a fixed set of\n *       attributes such as facial landmarks (for example, coordinates of eye and mouth),\n *       presence of beard, sunglasses, and so on. </p>\n *          <p>The face-detection algorithm is most effective on frontal faces. For non-frontal or\n *       obscured faces, the algorithm might not detect the faces or might detect faces with lower\n *       confidence. </p>\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the AWS CLI\n *        to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *\n *          <note>\n *             <p>This is a stateless API operation. That is, the operation does not persist any\n *         data.</p>\n *          </note>\n *\n *          <p>This operation requires permissions to perform the\n *       <code>rekognition:DetectFaces</code> action. </p>\n */\nexport class DetectFacesCommand extends $Command<\n  DetectFacesCommandInput,\n  DetectFacesCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DetectFacesCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DetectFacesCommandInput, DetectFacesCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"DetectFacesCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DetectFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectFacesResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DetectFacesCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1DetectFacesCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<DetectFacesCommandOutput> {\n    return deserializeAws_json1_1DetectFacesCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __awaiter, __generator, __read } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Amplify, ConsoleLogger as Logger, parseAWSExports } from '@aws-amplify/core';\nimport { AmazonLocationServiceProvider } from './Providers/AmazonLocationServiceProvider';\nimport { validateCoordinates } from './util';\nvar logger = new Logger('Geo');\nvar DEFAULT_PROVIDER = 'AmazonLocationService';\n\nvar GeoClass =\n/** @class */\nfunction () {\n  function GeoClass() {\n    this._config = {};\n    this._pluggables = [];\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the name of the module category\n   * @returns {string} name of the module category\n   */\n\n\n  GeoClass.prototype.getModuleName = function () {\n    return GeoClass.MODULE;\n  };\n  /**\n   * add plugin into Geo category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n\n\n  GeoClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Geo') {\n      this._pluggables.push(pluggable);\n\n      var config = pluggable.configure(this._config[pluggable.getProviderName()]);\n      return config;\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  GeoClass.prototype.getPluggable = function (providerName) {\n    var pluggable = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName', providerName);\n      throw new Error('No plugin found in Geo for the provider');\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  GeoClass.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * Configure Geo\n   * @param {Object} config - Configuration object for Geo\n   * @return {Object} - Current configuration\n   */\n\n\n  GeoClass.prototype.configure = function (config) {\n    var _this = this;\n\n    logger.debug('configure Geo');\n    if (!config) return this._config;\n    var amplifyConfig = parseAWSExports(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Geo, config);\n\n    this._pluggables.forEach(function (pluggable) {\n      pluggable.configure(_this._config[pluggable.getProviderName()]);\n    });\n\n    if (this._pluggables.length === 0) {\n      this.addPluggable(new AmazonLocationServiceProvider());\n    }\n\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @param {string} provider\n   * @returns - Array of available map resources\n   */\n\n\n  GeoClass.prototype.getAvailableMaps = function (provider) {\n    if (provider === void 0) {\n      provider = DEFAULT_PROVIDER;\n    }\n\n    var prov = this.getPluggable(provider);\n    return prov.getAvailableMaps();\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @param {string} provider\n   * @returns - Map resource set as the default in amplify config\n   */\n\n\n  GeoClass.prototype.getDefaultMap = function (provider) {\n    if (provider === void 0) {\n      provider = DEFAULT_PROVIDER;\n    }\n\n    var prov = this.getPluggable(provider);\n    return prov.getDefaultMap();\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n\n\n  GeoClass.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.searchByText(text, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_1 = _b.sent();\n            logger.debug(error_1);\n            throw error_1;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Search for search term suggestions based on input text\n   * @param  {string} text - The text string that is to be search for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n   */\n\n\n  GeoClass.prototype.searchForSuggestions = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.searchForSuggestions(text, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_2 = _b.sent();\n            logger.debug(error_2);\n            throw error_2;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Search for location by unique ID\n   * @param  {string} placeId - Unique ID of the location that is to be searched for\n   * @param  {searchByPlaceIdOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place>} - Resolves to a place with the given placeId\n   */\n\n\n  GeoClass.prototype.searchByPlaceId = function (placeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var providerName, prov, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            providerName = DEFAULT_PROVIDER;\n            prov = this.getPluggable(providerName);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.searchByPlaceId(placeId, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            error_3 = _a.sent();\n            logger.debug(error_3);\n            throw error_3;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n\n\n  GeoClass.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, _b, lng, lat, error_4;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b = __read(coordinates, 2), lng = _b[0], lat = _b[1];\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            validateCoordinates(lng, lat);\n            return [4\n            /*yield*/\n            , prov.searchByCoordinates(coordinates, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            error_4 = _c.sent();\n            logger.debug(error_4);\n            throw error_4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences\n   * @param geofences - Single or array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<SaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n\n\n  GeoClass.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, geofenceInputArray, error_5;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n\n            if (!Array.isArray(geofences)) {\n              geofenceInputArray = [geofences];\n            } else {\n              geofenceInputArray = geofences;\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.saveGeofences(geofenceInputArray, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_5 = _b.sent();\n            logger.debug(error_5);\n            throw error_5;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Get a single geofence by geofenceId\n   * @param geofenceId: GeofenceId - The string id of the geofence to get\n   * @param options?: GeofenceOptions - Optional parameters for getting a geofence\n   * @returns Promise<Geofence> - Promise that resolves to a geofence object\n   */\n\n\n  GeoClass.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_6;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.getGeofence(geofenceId, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_6 = _b.sent();\n            logger.debug(error_6);\n            throw error_6;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n\n\n  GeoClass.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_7;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.listGeofences(options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_7 = _b.sent();\n            logger.debug(error_7);\n            throw error_7;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n\n\n  GeoClass.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, geofenceIdsInputArray, error_8;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n\n            if (!Array.isArray(geofenceIds)) {\n              geofenceIdsInputArray = [geofenceIds];\n            } else {\n              geofenceIdsInputArray = geofenceIds;\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.deleteGeofences(geofenceIdsInputArray, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_8 = _b.sent();\n            logger.debug(error_8);\n            throw error_8;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  GeoClass.MODULE = 'Geo';\n  return GeoClass;\n}();\n\nexport { GeoClass };\nexport var Geo = new GeoClass();\nAmplify.register(Geo);","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","parseAWSExports","AmazonLocationServiceProvider","validateCoordinates","logger","DEFAULT_PROVIDER","_config","_pluggables","debug","GeoClass","MODULE","pluggable","getCategory","push","config","configure","getProviderName","providerName","find","undefined","Error","filter","amplifyConfig","Object","assign","Geo","forEach","_this","length","addPluggable","provider","prov","getPluggable","getAvailableMaps","getDefaultMap","text","options","_a","searchByText","_b","error_1","searchForSuggestions","error_2","placeId","searchByPlaceId","error_3","coordinates","lng","lat","searchByCoordinates","_c","error_4","geofences","Array","isArray","geofenceInputArray","saveGeofences","error_5","geofenceId","getGeofence","error_6","listGeofences","error_7","geofenceIds","geofenceIdsInputArray","deleteGeofences","error_8","register"],"sources":["/home/dalienst/node_modules/@aws-amplify/geo/src/Geo.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tparseAWSExports,\n} from '@aws-amplify/core';\nimport { AmazonLocationServiceProvider } from './Providers/AmazonLocationServiceProvider';\n\nimport { validateCoordinates } from './util';\n\nimport {\n\tPlace,\n\tGeoConfig,\n\tCoordinates,\n\tSearchByTextOptions,\n\tSearchByCoordinatesOptions,\n\tGeoProvider,\n\tMapStyle,\n\tGeofenceId,\n\tGeofenceInput,\n\tGeofenceOptions,\n\tSaveGeofencesResults,\n\tGeofence,\n\tListGeofenceOptions,\n\tListGeofenceResults,\n\tDeleteGeofencesResults,\n\tsearchByPlaceIdOptions,\n} from './types';\n\nconst logger = new Logger('Geo');\n\nconst DEFAULT_PROVIDER = 'AmazonLocationService';\nexport class GeoClass {\n\tstatic MODULE = 'Geo';\n\t/**\n\t * @private\n\t */\n\tprivate _config: GeoConfig;\n\tprivate _pluggables: GeoProvider[];\n\n\tconstructor() {\n\t\tthis._config = {};\n\t\tthis._pluggables = [];\n\t\tlogger.debug('Geo Options', this._config);\n\t}\n\n\t/**\n\t * get the name of the module category\n\t * @returns {string} name of the module category\n\t */\n\tpublic getModuleName() {\n\t\treturn GeoClass.MODULE;\n\t}\n\n\t/**\n\t * add plugin into Geo category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic addPluggable(pluggable: GeoProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Geo') {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\tconst config = pluggable.configure(\n\t\t\t\tthis._config[pluggable.getProviderName()]\n\t\t\t);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic getPluggable(providerName: string) {\n\t\tconst pluggable = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t\tif (pluggable === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\t\tthrow new Error('No plugin found in Geo for the provider');\n\t\t} else return pluggable;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic removePluggable(providerName: string) {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\treturn;\n\t}\n\n\t/**\n\t * Configure Geo\n\t * @param {Object} config - Configuration object for Geo\n\t * @return {Object} - Current configuration\n\t */\n\tconfigure(config?) {\n\t\tlogger.debug('configure Geo');\n\n\t\tif (!config) return this._config;\n\n\t\tconst amplifyConfig = parseAWSExports(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Geo, config);\n\n\t\tthis._pluggables.forEach(pluggable => {\n\t\t\tpluggable.configure(this._config[pluggable.getProviderName()]);\n\t\t});\n\n\t\tif (this._pluggables.length === 0) {\n\t\t\tthis.addPluggable(new AmazonLocationServiceProvider());\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get the map resources that are currently available through the provider\n\t * @param {string} provider\n\t * @returns - Array of available map resources\n\t */\n\tpublic getAvailableMaps(provider = DEFAULT_PROVIDER): MapStyle[] {\n\t\tconst prov = this.getPluggable(provider);\n\n\t\treturn prov.getAvailableMaps();\n\t}\n\n\t/**\n\t * Get the map resource set as default in amplify config\n\t * @param {string} provider\n\t * @returns - Map resource set as the default in amplify config\n\t */\n\tpublic getDefaultMap(provider = DEFAULT_PROVIDER): MapStyle {\n\t\tconst prov = this.getPluggable(provider);\n\n\t\treturn prov.getDefaultMap();\n\t}\n\n\t/**\n\t * Search by text input with optional parameters\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n\t */\n\tpublic async searchByText(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<Place[]> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.searchByText(text, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Search for search term suggestions based on input text\n\t * @param  {string} text - The text string that is to be search for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n\t */\n\tpublic async searchForSuggestions(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t) {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.searchForSuggestions(text, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Search for location by unique ID\n\t * @param  {string} placeId - Unique ID of the location that is to be searched for\n\t * @param  {searchByPlaceIdOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place>} - Resolves to a place with the given placeId\n\t */\n\tpublic async searchByPlaceId(\n\t\tplaceId: string,\n\t\toptions?: searchByPlaceIdOptions\n\t) {\n\t\tconst providerName = DEFAULT_PROVIDER;\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.searchByPlaceId(placeId, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse geocoding search via a coordinate point on the map\n\t * @param coordinates - Coordinates array for the search input\n\t * @param options - Options parameters for the search\n\t * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n\t */\n\tpublic async searchByCoordinates(\n\t\tcoordinates: Coordinates,\n\t\toptions?: SearchByCoordinatesOptions\n\t): Promise<Place> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\tconst [lng, lat] = coordinates;\n\t\ttry {\n\t\t\tvalidateCoordinates(lng, lat);\n\t\t\treturn await prov.searchByCoordinates(coordinates, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Create geofences\n\t * @param geofences - Single or array of geofence objects to create\n\t * @param options? - Optional parameters for creating geofences\n\t * @returns {Promise<SaveGeofencesResults>} - Promise that resolves to an object with:\n\t *   successes: list of geofences successfully created\n\t *   errors: list of geofences that failed to create\n\t */\n\tpublic async saveGeofences(\n\t\tgeofences: GeofenceInput | GeofenceInput[],\n\t\toptions?: GeofenceOptions\n\t): Promise<SaveGeofencesResults> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\t// If single geofence input, make it an array for batch call\n\t\tlet geofenceInputArray;\n\t\tif (!Array.isArray(geofences)) {\n\t\t\tgeofenceInputArray = [geofences];\n\t\t} else {\n\t\t\tgeofenceInputArray = geofences;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await prov.saveGeofences(geofenceInputArray, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Get a single geofence by geofenceId\n\t * @param geofenceId: GeofenceId - The string id of the geofence to get\n\t * @param options?: GeofenceOptions - Optional parameters for getting a geofence\n\t * @returns Promise<Geofence> - Promise that resolves to a geofence object\n\t */\n\tpublic async getGeofence(\n\t\tgeofenceId: GeofenceId,\n\t\toptions?: GeofenceOptions\n\t): Promise<Geofence> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.getGeofence(geofenceId, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * List geofences\n\t * @param  options?: ListGeofenceOptions\n\t * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n\t *   entries: list of geofences - 100 geofences are listed per page\n\t *   nextToken: token for next page of geofences\n\t */\n\tpublic async listGeofences(\n\t\toptions?: ListGeofenceOptions\n\t): Promise<ListGeofenceResults> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.listGeofences(options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Delete geofences\n\t * @param geofenceIds: string|string[]\n\t * @param options?: GeofenceOptions\n\t * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n\t *  successes: list of geofences successfully deleted\n\t *  errors: list of geofences that failed to delete\n\t */\n\tpublic async deleteGeofences(\n\t\tgeofenceIds: string | string[],\n\t\toptions?: GeofenceOptions\n\t): Promise<DeleteGeofencesResults> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\t// If single geofence input, make it an array for batch call\n\t\tlet geofenceIdsInputArray;\n\t\tif (!Array.isArray(geofenceIds)) {\n\t\t\tgeofenceIdsInputArray = [geofenceIds];\n\t\t} else {\n\t\t\tgeofenceIdsInputArray = geofenceIds;\n\t\t}\n\n\t\t//  Delete geofences\n\t\ttry {\n\t\t\treturn await prov.deleteGeofences(geofenceIdsInputArray, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nexport const Geo = new GeoClass();\nAmplify.register(Geo);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeAttribute } from \"./escape-attribute\";\n/**\n * Represents an XML node.\n */\n\nvar XmlNode =\n/** @class */\nfunction () {\n  function XmlNode(name, children) {\n    if (children === void 0) {\n      children = [];\n    }\n\n    this.name = name;\n    this.children = children;\n    this.attributes = {};\n  }\n\n  XmlNode.prototype.withName = function (name) {\n    this.name = name;\n    return this;\n  };\n\n  XmlNode.prototype.addAttribute = function (name, value) {\n    this.attributes[name] = value;\n    return this;\n  };\n\n  XmlNode.prototype.addChildNode = function (child) {\n    this.children.push(child);\n    return this;\n  };\n\n  XmlNode.prototype.removeAttribute = function (name) {\n    delete this.attributes[name];\n    return this;\n  };\n\n  XmlNode.prototype.toString = function () {\n    var e_1, _a;\n\n    var hasChildren = Boolean(this.children.length);\n    var xmlText = \"<\" + this.name; // add attributes\n\n    var attributes = this.attributes;\n\n    try {\n      for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var attributeName = _c.value;\n        var attribute = attributes[attributeName];\n\n        if (typeof attribute !== \"undefined\" && attribute !== null) {\n          xmlText += \" \" + attributeName + \"=\\\"\" + escapeAttribute(\"\" + attribute) + \"\\\"\";\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return xmlText += !hasChildren ? \"/>\" : \">\" + this.children.map(function (c) {\n      return c.toString();\n    }).join(\"\") + \"</\" + this.name + \">\";\n  };\n\n  return XmlNode;\n}();\n\nexport { XmlNode };","map":{"version":3,"mappings":";AAAA,SAASA,eAAT,QAAgC,oBAAhC;AAGA;;;;AAGA;AAAA;AAAA;AAGE,mBAAoBC,IAApB,EAAkDC,QAAlD,EAA6E;AAA3B;AAAAA;AAA2B;;AAAzD;AAA8B;AAF1C,sBAAsC,EAAtC;AAEyE;;AAEjFC,yCAASF,IAAT,EAAqB;AACnB,SAAKA,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACD,GAHD;;AAKAE,6CAAaF,IAAb,EAA2BG,KAA3B,EAAqC;AACnC,SAAKC,UAAL,CAAgBJ,IAAhB,IAAwBG,KAAxB;AACA,WAAO,IAAP;AACD,GAHD;;AAKAD,6CAAaG,KAAb,EAA8B;AAC5B,SAAKJ,QAAL,CAAcK,IAAd,CAAmBD,KAAnB;AACA,WAAO,IAAP;AACD,GAHD;;AAKAH,gDAAgBF,IAAhB,EAA4B;AAC1B,WAAO,KAAKI,UAAL,CAAgBJ,IAAhB,CAAP;AACA,WAAO,IAAP;AACD,GAHD;;AAKAE;;;AACE,QAAMK,WAAW,GAAGC,OAAO,CAAC,KAAKP,QAAL,CAAcQ,MAAf,CAA3B;AACA,QAAIC,OAAO,GAAG,MAAI,KAAKV,IAAvB,CAFF,CAGE;;AACA,QAAMI,UAAU,GAAG,KAAKA,UAAxB;;;AACA,WAA4B,wBAAM,CAACO,IAAP,CAAYP,UAAZ,IAAuBQ,cAAnD,EAAmD,QAAnD,EAAmDA,cAAnD,EAAqD;AAAhD,YAAMC,aAAa,WAAnB;AACH,YAAMC,SAAS,GAAGV,UAAU,CAACS,aAAD,CAA5B;;AACA,YAAI,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAS,KAAK,IAAtD,EAA4D;AAC1DJ,iBAAO,IAAI,MAAIG,aAAJ,GAAiB,KAAjB,GAAsBd,eAAe,CAAC,KAAKe,SAAN,CAArC,GAAqD,IAAhE;AACD;AACF;;;;;;;;;;;;;AAED,WAAQJ,OAAO,IAAI,CAACH,WAAD,GAAe,IAAf,GAAsB,MAAI,KAAKN,QAAL,CAAcc,GAAd,CAAkB,UAACC,CAAD,EAAE;AAAK,cAAC,CAACC,QAAF;AAAY,KAArC,EAAuCC,IAAvC,CAA4C,EAA5C,CAAJ,GAAmD,IAAnD,GAAwD,KAAKlB,IAA7D,GAAiE,GAA1G;AACD,GAbD;;AAcF;AAAC,CAvCD","names":["escapeAttribute","name","children","XmlNode","value","attributes","child","push","hasChildren","Boolean","length","xmlText","keys","_c","attributeName","attribute","map","c","toString","join"],"sources":["/home/dalienst/node_modules/@aws-sdk/xml-builder/src/XmlNode.ts"],"sourcesContent":["import { escapeAttribute } from \"./escape-attribute\";\nimport { Stringable } from \"./stringable\";\n\n/**\n * Represents an XML node.\n */\nexport class XmlNode {\n  private attributes: { [name: string]: any } = {};\n\n  constructor(private name: string, public readonly children: Stringable[] = []) {}\n\n  withName(name: string): XmlNode {\n    this.name = name;\n    return this;\n  }\n\n  addAttribute(name: string, value: any): XmlNode {\n    this.attributes[name] = value;\n    return this;\n  }\n\n  addChildNode(child: Stringable): XmlNode {\n    this.children.push(child);\n    return this;\n  }\n\n  removeAttribute(name: string): XmlNode {\n    delete this.attributes[name];\n    return this;\n  }\n\n  toString(): string {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    // add attributes\n    const attributes = this.attributes;\n    for (const attributeName of Object.keys(attributes)) {\n      const attribute = attributes[attributeName];\n      if (typeof attribute !== \"undefined\" && attribute !== null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n\n    return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
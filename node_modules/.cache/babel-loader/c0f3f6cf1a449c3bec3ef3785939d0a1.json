{"ast":null,"code":"import { __awaiter } from '../../../node_modules/tslib/tslib.es6.js';\nimport { Auth } from 'aws-amplify';\nimport { getSortedFormFields } from '@aws-amplify/ui';\nimport isString from 'lodash/isString';\nimport { areEmptyArrays, areEmptyObjects } from '../../../utils/index.js';\nimport { isComponentRouteKey } from '../utils.js';\n\nconst defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\n\n\nfunction areSelectorDepsEqual(currentDeps, nextDeps) {\n  if (currentDeps.length !== nextDeps.length) {\n    return false;\n  }\n\n  return currentDeps.every((currentDep, index) => {\n    const nextDep = nextDeps[index];\n\n    if (areEmptyArrays(currentDep, nextDep) || areEmptyObjects(currentDep, nextDep)) {\n      return true;\n    }\n\n    return currentDep === nextDep;\n  });\n}\n\nconst getComparator = selector => (currentFacade, nextFacade) => {\n  const currentSelectorDeps = selector(currentFacade);\n  const nextSelectorDeps = selector(nextFacade); // Shallow compare the array values\n\n  return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\n\nconst getTotpSecretCodeCallback = user => function getTotpSecretCode() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield Auth.setupTOTP(user);\n  });\n};\n\nconst flattenFormFields = fields => fields.flatMap(_ref => {\n  let [name, options] = _ref;\n  return Object.assign({\n    name\n  }, options);\n});\n\nconst convertContactMethodsToFields = unverifiedContactMethods => {\n  return unverifiedContactMethods && Object.entries(unverifiedContactMethods).map(_ref2 => {\n    let [name, value] = _ref2;\n    const valueIsString = isString(value);\n\n    if (!valueIsString || !name) {\n      return {};\n    }\n\n    return {\n      name,\n      label: value,\n      type: 'radio',\n      value\n    };\n  });\n};\n/**\n * Retrieves default and custom (RWA only, to be updated) form field values from state machine\n * for subcomponent routes that render fields\n */\n\n\nconst getMachineFields = (route, state, unverifiedContactMethods) => {\n  if (isComponentRouteKey(route)) {\n    return route === 'verifyUser' ? convertContactMethodsToFields(unverifiedContactMethods) : flattenFormFields(getSortedFormFields(route, state));\n  }\n\n  return [];\n};\n\nexport { areSelectorDepsEqual, defaultComparator, getComparator, getMachineFields, getTotpSecretCodeCallback };","map":{"version":3,"sources":["/home/dalienst/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/utils.js"],"names":["__awaiter","Auth","getSortedFormFields","isString","areEmptyArrays","areEmptyObjects","isComponentRouteKey","defaultComparator","areSelectorDepsEqual","currentDeps","nextDeps","length","every","currentDep","index","nextDep","getComparator","selector","currentFacade","nextFacade","currentSelectorDeps","nextSelectorDeps","getTotpSecretCodeCallback","user","getTotpSecretCode","setupTOTP","flattenFormFields","fields","flatMap","name","options","Object","assign","convertContactMethodsToFields","unverifiedContactMethods","entries","map","value","valueIsString","label","type","getMachineFields","route","state"],"mappings":"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","sourcesContent":["import { __awaiter } from '../../../node_modules/tslib/tslib.es6.js';\nimport { Auth } from 'aws-amplify';\nimport { getSortedFormFields } from '@aws-amplify/ui';\nimport isString from 'lodash/isString';\nimport { areEmptyArrays, areEmptyObjects } from '../../../utils/index.js';\nimport { isComponentRouteKey } from '../utils.js';\n\nconst defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\nfunction areSelectorDepsEqual(currentDeps, nextDeps) {\n    if (currentDeps.length !== nextDeps.length) {\n        return false;\n    }\n    return currentDeps.every((currentDep, index) => {\n        const nextDep = nextDeps[index];\n        if (areEmptyArrays(currentDep, nextDep) ||\n            areEmptyObjects(currentDep, nextDep)) {\n            return true;\n        }\n        return currentDep === nextDep;\n    });\n}\nconst getComparator = (selector) => (currentFacade, nextFacade) => {\n    const currentSelectorDeps = selector(currentFacade);\n    const nextSelectorDeps = selector(nextFacade);\n    // Shallow compare the array values\n    return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\nconst getTotpSecretCodeCallback = (user) => function getTotpSecretCode() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield Auth.setupTOTP(user);\n    });\n};\nconst flattenFormFields = (fields) => fields.flatMap(([name, options]) => (Object.assign({ name }, options)));\nconst convertContactMethodsToFields = (unverifiedContactMethods) => {\n    return (unverifiedContactMethods &&\n        Object.entries(unverifiedContactMethods).map(([name, value]) => {\n            const valueIsString = isString(value);\n            if (!valueIsString || !name) {\n                return {};\n            }\n            return { name, label: value, type: 'radio', value };\n        }));\n};\n/**\n * Retrieves default and custom (RWA only, to be updated) form field values from state machine\n * for subcomponent routes that render fields\n */\nconst getMachineFields = (route, state, unverifiedContactMethods) => {\n    if (isComponentRouteKey(route)) {\n        return route === 'verifyUser'\n            ? convertContactMethodsToFields(unverifiedContactMethods)\n            : flattenFormFields(getSortedFormFields(route, state));\n    }\n    return [];\n};\n\nexport { areSelectorDepsEqual, defaultComparator, getComparator, getMachineFields, getTotpSecretCodeCallback };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { constructStack } from \"@aws-sdk/middleware-stack\";\n\nvar Client =\n/** @class */\nfunction () {\n  function Client(config) {\n    this.middlewareStack = constructStack();\n    this.config = config;\n  }\n\n  Client.prototype.send = function (command, optionsOrCb, cb) {\n    var options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n    var callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n    var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n\n    if (callback) {\n      handler(command).then(function (result) {\n        return callback(null, result.output);\n      }, function (err) {\n        return callback(err);\n      }).catch( // prevent any errors thrown in the callback from triggering an\n      // unhandled promise rejection\n      function () {});\n    } else {\n      return handler(command).then(function (result) {\n        return result.output;\n      });\n    }\n  };\n\n  Client.prototype.destroy = function () {\n    if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();\n  };\n\n  return Client;\n}();\n\nexport { Client };","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAA+B,2BAA/B;;AAeA;AAAA;AAAA;AAQE,kBAAYC,MAAZ,EAA+C;AAFxC,2BAAkBD,cAAc,EAAhC;AAGL,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAcDC,oCACEC,OADF,EAEEC,WAFF,EAGEC,EAHF,EAG4C;AAE1C,QAAMC,OAAO,GAAG,OAAOF,WAAP,KAAuB,UAAvB,GAAoCA,WAApC,GAAkDG,SAAlE;AACA,QAAMC,QAAQ,GAAG,OAAOJ,WAAP,KAAuB,UAAvB,GAAqCA,WAArC,GAA6FC,EAA9G;AACA,QAAMI,OAAO,GAAGN,OAAO,CAACO,iBAAR,CAA0B,KAAKC,eAA/B,EAAuD,KAAKV,MAA5D,EAAoEK,OAApE,CAAhB;;AACA,QAAIE,QAAJ,EAAc;AACZC,aAAO,CAACN,OAAD,CAAP,CACGS,IADH,CAEI,UAACC,MAAD,EAAO;AAAK,uBAAQ,CAAC,IAAD,EAAOA,MAAM,CAACC,MAAd,CAAR;AAA6B,OAF7C,EAGI,UAACC,GAAD,EAAS;AAAK,uBAAQ,CAACA,GAAD,CAAR;AAAa,OAH/B,EAKGC,KALH,EAMI;AACA;AACA,mBAAQ,CARZ;AAUD,KAXD,MAWO;AACL,aAAOP,OAAO,CAACN,OAAD,CAAP,CAAiBS,IAAjB,CAAsB,UAACC,MAAD,EAAO;AAAK,qBAAM,CAACC,MAAP;AAAa,OAA/C,CAAP;AACD;AACF,GAtBD;;AAwBAZ;AACE,QAAI,KAAKD,MAAL,CAAYgB,cAAZ,CAA2BC,OAA/B,EAAwC,KAAKjB,MAAL,CAAYgB,cAAZ,CAA2BC,OAA3B;AACzC,GAFD;;AAGF;AAAC,CAnDD","names":["constructStack","config","Client","command","optionsOrCb","cb","options","undefined","callback","handler","resolveMiddleware","middlewareStack","then","result","output","err","catch","requestHandler","destroy"],"sources":["/home/dalienst/node_modules/@aws-sdk/smithy-client/src/client.ts"],"sourcesContent":["import { constructStack } from \"@aws-sdk/middleware-stack\";\nimport { Client as IClient, Command, MetadataBearer, RequestHandler } from \"@aws-sdk/types\";\n\nexport interface SmithyConfiguration<HandlerOptions> {\n  requestHandler: RequestHandler<any, any, HandlerOptions>;\n  /**\n   * The API version set internally by the SDK, and is\n   * not planned to be used by customer code.\n   * @internal\n   */\n  readonly apiVersion: string;\n}\n\nexport type SmithyResolvedConfiguration<HandlerOptions> = SmithyConfiguration<HandlerOptions>;\n\nexport class Client<\n  HandlerOptions,\n  ClientInput extends object,\n  ClientOutput extends MetadataBearer,\n  ResolvedClientConfiguration extends SmithyResolvedConfiguration<HandlerOptions>\n> implements IClient<ClientInput, ClientOutput, ResolvedClientConfiguration> {\n  public middlewareStack = constructStack<ClientInput, ClientOutput>();\n  readonly config: ResolvedClientConfiguration;\n  constructor(config: ResolvedClientConfiguration) {\n    this.config = config;\n  }\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<ClientInput, InputType, ClientOutput, OutputType, SmithyResolvedConfiguration<HandlerOptions>>,\n    options?: HandlerOptions\n  ): Promise<OutputType>;\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<ClientInput, InputType, ClientOutput, OutputType, SmithyResolvedConfiguration<HandlerOptions>>,\n    cb: (err: any, data?: OutputType) => void\n  ): void;\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<ClientInput, InputType, ClientOutput, OutputType, SmithyResolvedConfiguration<HandlerOptions>>,\n    options: HandlerOptions,\n    cb: (err: any, data?: OutputType) => void\n  ): void;\n  send<InputType extends ClientInput, OutputType extends ClientOutput>(\n    command: Command<ClientInput, InputType, ClientOutput, OutputType, SmithyResolvedConfiguration<HandlerOptions>>,\n    optionsOrCb?: HandlerOptions | ((err: any, data?: OutputType) => void),\n    cb?: (err: any, data?: OutputType) => void\n  ): Promise<OutputType> | void {\n    const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n    const callback = typeof optionsOrCb === \"function\" ? (optionsOrCb as (err: any, data?: OutputType) => void) : cb;\n    const handler = command.resolveMiddleware(this.middlewareStack as any, this.config, options);\n    if (callback) {\n      handler(command)\n        .then(\n          (result) => callback(null, result.output),\n          (err: any) => callback(err)\n        )\n        .catch(\n          // prevent any errors thrown in the callback from triggering an\n          // unhandled promise rejection\n          () => {}\n        );\n    } else {\n      return handler(command).then((result) => result.output);\n    }\n  }\n\n  destroy() {\n    if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __rest, __values } from \"tslib\";\nimport { API } from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredBackoff, NonRetryableError, retry, BackgroundProcessManager } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, ProcessName } from '../../types';\nimport { extractTargetNamesFromSrc, USER, USER_AGENT_SUFFIX_DATASTORE, ID } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { getMutationErrorType } from './errorMaps';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\n\nvar MutationProcessor =\n/** @class */\nfunction () {\n  function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.storage = storage;\n    this.userClasses = userClasses;\n    this.outbox = outbox;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.MutationEvent = MutationEvent;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.conflictHandler = conflictHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.processing = false;\n    this.runningProcesses = new BackgroundProcessManager();\n    this.amplifyContext.API = this.amplifyContext.API || API;\n    this.generateQueries();\n  }\n\n  MutationProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1),\n            createMutation = _a[0];\n\n        var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1),\n            updateMutation = _b[0];\n\n        var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1),\n            deleteMutation = _c[0];\n\n        _this.typeQuery.set(model, [createMutation, updateMutation, deleteMutation]);\n      });\n    });\n  };\n\n  MutationProcessor.prototype.isReady = function () {\n    return this.observer !== undefined;\n  };\n\n  MutationProcessor.prototype.start = function () {\n    var _this = this;\n\n    this.runningProcesses = new BackgroundProcessManager();\n    var observable = new Observable(function (observer) {\n      _this.observer = observer;\n\n      try {\n        _this.resume();\n      } catch (error) {\n        logger.error('mutations processor start error', error);\n        throw error;\n      }\n\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.pause();\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      });\n    });\n    return observable;\n  };\n\n  MutationProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.runningProcesses.isOpen && this.runningProcesses.add(function (onTerminate) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var head, namespaceName, _loop_1, this_1, _a;\n\n                var _this = this;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      if (this.processing || !this.isReady() || !this.runningProcesses.isOpen) {\n                        return [2\n                        /*return*/\n                        ];\n                      }\n\n                      this.processing = true;\n                      namespaceName = USER;\n\n                      _loop_1 = function () {\n                        var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, authModeRetry_1, error_1, record, hasMore;\n\n                        var _a;\n\n                        return __generator(this, function (_b) {\n                          switch (_b.label) {\n                            case 0:\n                              model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                              modelConstructor = this_1.userClasses[model];\n                              result = undefined;\n                              opName = undefined;\n                              modelDefinition = undefined;\n                              _b.label = 1;\n\n                            case 1:\n                              _b.trys.push([1, 4,, 5]);\n\n                              return [4\n                              /*yield*/\n                              , getModelAuthModes({\n                                authModeStrategy: this_1.authModeStrategy,\n                                defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: model,\n                                schema: this_1.schema\n                              })];\n\n                            case 2:\n                              modelAuthModes = _b.sent();\n                              operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                              authModeAttempts_1 = 0;\n\n                              authModeRetry_1 = function () {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var response, error_2;\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        _a.trys.push([0, 2,, 4]);\n\n                                        logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4\n                                        /*yield*/\n                                        , this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1], onTerminate)];\n\n                                      case 1:\n                                        response = _a.sent();\n                                        logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [2\n                                        /*return*/\n                                        , response];\n\n                                      case 2:\n                                        error_2 = _a.sent();\n                                        authModeAttempts_1++;\n\n                                        if (authModeAttempts_1 >= operationAuthModes_1.length) {\n                                          logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                          throw error_2;\n                                        }\n\n                                        logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4\n                                        /*yield*/\n                                        , authModeRetry_1()];\n\n                                      case 3:\n                                        return [2\n                                        /*return*/\n                                        , _a.sent()];\n\n                                      case 4:\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              };\n\n                              return [4\n                              /*yield*/\n                              , authModeRetry_1()];\n\n                            case 3:\n                              _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                              return [3\n                              /*break*/\n                              , 5];\n\n                            case 4:\n                              error_1 = _b.sent();\n\n                              if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n                                return [2\n                                /*return*/\n                                , \"continue\"];\n                              }\n\n                              return [3\n                              /*break*/\n                              , 5];\n\n                            case 5:\n                              if (!(result === undefined)) return [3\n                              /*break*/\n                              , 7];\n                              logger.debug('done retrying');\n                              return [4\n                              /*yield*/\n                              , this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        return [4\n                                        /*yield*/\n                                        , this.outbox.dequeue(storage)];\n\n                                      case 1:\n                                        _a.sent();\n\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              })];\n\n                            case 6:\n                              _b.sent();\n\n                              return [2\n                              /*return*/\n                              , \"continue\"];\n\n                            case 7:\n                              record = result.data[opName];\n                              hasMore = false;\n                              return [4\n                              /*yield*/\n                              , this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        return [4\n                                        /*yield*/\n                                        , this.outbox.dequeue(storage, record, operation)];\n\n                                      case 1:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        _a.sent();\n\n                                        return [4\n                                        /*yield*/\n                                        , this.outbox.peek(storage)];\n\n                                      case 2:\n                                        hasMore = _a.sent() !== undefined;\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              })];\n\n                            case 8:\n                              _b.sent();\n\n                              this_1.observer.next({\n                                operation: operation,\n                                modelDefinition: modelDefinition,\n                                model: record,\n                                hasMore: hasMore\n                              });\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      };\n\n                      this_1 = this;\n                      _b.label = 1;\n\n                    case 1:\n                      _a = this.processing && this.runningProcesses.isOpen;\n                      if (!_a) return [3\n                      /*break*/\n                      , 3];\n                      return [4\n                      /*yield*/\n                      , this.outbox.peek(this.storage)];\n\n                    case 2:\n                      _a = (head = _b.sent()) !== undefined;\n                      _b.label = 3;\n\n                    case 3:\n                      if (!_a) return [3\n                      /*break*/\n                      , 5];\n                      return [5\n                      /*yield**/\n                      , _loop_1()];\n\n                    case 4:\n                      _b.sent();\n\n                      return [3\n                      /*break*/\n                      , 1];\n\n                    case 5:\n                      // pauses itself\n                      this.pause();\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, 'mutation resume loop')];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode, onTerminate) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , retry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation;\n\n                var _g;\n\n                return __generator(this, function (_h) {\n                  switch (_h.label) {\n                    case 0:\n                      _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 1:\n                      authToken = _h.sent();\n                      tryWith = {\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken,\n                        userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE\n                      };\n                      attempt = 0;\n                      opType = this.opTypeFromTransformerOperation(operation);\n                      _h.label = 2;\n\n                    case 2:\n                      _h.trys.push([2, 4,, 17]);\n\n                      return [4\n                      /*yield*/\n                      , this.amplifyContext.API.graphql(tryWith)];\n\n                    case 3:\n                      result = _h.sent(); // Use `as any` because TypeScript doesn't seem to like passing tuples\n                      // through generic params.\n\n                      return [2\n                      /*return*/\n                      , [result, opName, modelDefinition]];\n\n                    case 4:\n                      err_1 = _h.sent();\n                      if (!(err_1.errors && err_1.errors.length > 0)) return [3\n                      /*break*/\n                      , 15];\n                      _b = __read(err_1.errors, 1), error = _b[0];\n                      _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n\n                      if (error.errorType === 'Unauthorized') {\n                        throw new NonRetryableError('Unauthorized');\n                      }\n\n                      if (error.message === 'Network Error' || code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                      ) {\n                        if (!this.processing) {\n                          throw new NonRetryableError('Offline');\n                        } // TODO: Check errors on different env (react-native or other browsers)\n\n\n                        throw new Error('Network Error');\n                      }\n\n                      if (!(error.errorType === 'ConflictUnhandled')) return [3\n                      /*break*/\n                      , 13]; // TODO: add on ConflictConditionalCheck error query last from server\n\n                      attempt++;\n                      retryWith = void 0;\n                      if (!(attempt > MAX_ATTEMPTS)) return [3\n                      /*break*/\n                      , 5];\n                      retryWith = DISCARD;\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 5:\n                      _h.trys.push([5, 7,, 8]);\n\n                      return [4\n                      /*yield*/\n                      , this.conflictHandler({\n                        modelConstructor: modelConstructor,\n                        localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                        remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                        operation: opType,\n                        attempts: attempt\n                      })];\n\n                    case 6:\n                      retryWith = _h.sent();\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 7:\n                      err_2 = _h.sent();\n                      logger.warn('conflict trycatch', err_2);\n                      return [3\n                      /*break*/\n                      , 17];\n\n                    case 8:\n                      if (!(retryWith === DISCARD)) return [3\n                      /*break*/\n                      , 11];\n                      _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 9:\n                      authToken_1 = _h.sent();\n                      return [4\n                      /*yield*/\n                      , this.amplifyContext.API.graphql({\n                        query: query_1,\n                        variables: {\n                          id: variables.input.id\n                        },\n                        authMode: authMode,\n                        authToken: authToken_1,\n                        userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE\n                      })];\n\n                    case 10:\n                      serverData = _h.sent(); // onTerminate cancel graphql()\n\n                      return [2\n                      /*return*/\n                      , [serverData, opName_1, modelDefinition]];\n\n                    case 11:\n                      namespace = this.schema.namespaces[namespaceName];\n                      updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                      return [4\n                      /*yield*/\n                      , this.storage.save(updatedMutation)];\n\n                    case 12:\n                      _h.sent();\n\n                      throw new NonRetryableError('RetryMutation');\n\n                    case 13:\n                      try {\n                        this.errorHandler({\n                          recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                          localModel: variables.input,\n                          message: error.message,\n                          operation: operation,\n                          errorType: getMutationErrorType(error),\n                          errorInfo: error.errorInfo,\n                          process: ProcessName.mutate,\n                          cause: error,\n                          remoteModel: error.data ? this.modelInstanceCreator(modelConstructor, error.data) : null\n                        });\n                      } catch (err) {\n                        logger.warn('Mutation error handler failed with:', err);\n                      } finally {\n                        // Return empty tuple, dequeues the mutation\n                        return [2\n                        /*return*/\n                        , error.data ? [{\n                          data: (_g = {}, _g[opName] = error.data, _g)\n                        }, opName, modelDefinition] : []];\n                      }\n\n                      _h.label = 14;\n\n                    case 14:\n                      return [3\n                      /*break*/\n                      , 16];\n\n                    case 15:\n                      // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                      // These errors should not be retried.\n                      throw new NonRetryableError(err_1);\n\n                    case 16:\n                      return [3\n                      /*break*/\n                      , 17];\n\n                    case 17:\n                      if (tryWith) return [3\n                      /*break*/\n                      , 2];\n                      _h.label = 18;\n\n                    case 18:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, [model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent], safeJitteredBackoff, onTerminate)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n    var e_1, _a, e_2, _b, e_3, _c;\n\n    var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n    var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;\n    var queriesTuples = this.typeQuery.get(modelDefinition);\n\n    var _d = __read(queriesTuples.find(function (_a) {\n      var _b = __read(_a, 1),\n          transformerMutationType = _b[0];\n\n      return transformerMutationType === operation;\n    }), 3),\n        opName = _d[1],\n        query = _d[2];\n\n    var _e = JSON.parse(data),\n        _version = _e._version,\n        parsedData = __rest(_e, [\"_version\"]); // include all the fields that comprise a custom PK if one is specified\n\n\n    var deleteInput = {};\n\n    if (primaryKey === null || primaryKey === void 0 ? void 0 : primaryKey.length) {\n      try {\n        for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n          var pkField = primaryKey_1_1.value;\n          deleteInput[pkField] = parsedData[pkField];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    } else {\n      deleteInput[ID] = parsedData.id;\n    }\n\n    var mutationInput;\n\n    if (operation === TransformerMutationType.DELETE) {\n      // For DELETE mutations, only the key(s) are included in the input\n      mutationInput = deleteInput;\n    } else {\n      // Otherwise, we construct the mutation input with the following logic\n      mutationInput = {};\n      var modelFields = Object.values(modelDefinition.fields);\n\n      try {\n        for (var modelFields_1 = __values(modelFields), modelFields_1_1 = modelFields_1.next(); !modelFields_1_1.done; modelFields_1_1 = modelFields_1.next()) {\n          var _f = modelFields_1_1.value,\n              name_1 = _f.name,\n              type = _f.type,\n              association = _f.association; // model fields should be stripped out from the input\n\n          if (isModelFieldType(type)) {\n            // except for belongs to relations - we need to replace them with the correct foreign key(s)\n            if (isTargetNameAssociation(association) && association.connectionType === 'BELONGS_TO') {\n              var targetNames = extractTargetNamesFromSrc(association);\n\n              if (targetNames) {\n                try {\n                  // instead of including the connected model itself, we add its key(s) to the mutation input\n                  for (var targetNames_1 = (e_3 = void 0, __values(targetNames)), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n                    var targetName = targetNames_1_1.value;\n                    mutationInput[targetName] = parsedData[targetName];\n                  }\n                } catch (e_3_1) {\n                  e_3 = {\n                    error: e_3_1\n                  };\n                } finally {\n                  try {\n                    if (targetNames_1_1 && !targetNames_1_1.done && (_c = targetNames_1.return)) _c.call(targetNames_1);\n                  } finally {\n                    if (e_3) throw e_3.error;\n                  }\n                }\n              }\n            }\n\n            continue;\n          } // scalar fields / non-model types\n\n\n          if (operation === TransformerMutationType.UPDATE) {\n            if (!parsedData.hasOwnProperty(name_1)) {\n              // for update mutations - strip out a field if it's unchanged\n              continue;\n            }\n          } // all other fields are added to the input object\n\n\n          mutationInput[name_1] = parsedData[name_1];\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (modelFields_1_1 && !modelFields_1_1.done && (_b = modelFields_1.return)) _b.call(modelFields_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } // Build mutation variables input object\n\n\n    var input = __assign(__assign({}, mutationInput), {\n      _version: _version\n    });\n\n    var graphQLCondition = JSON.parse(condition);\n\n    var variables = __assign({\n      input: input\n    }, operation === TransformerMutationType.CREATE ? {} : {\n      condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null\n    });\n\n    return [query, variables, graphQLCondition, opName, modelDefinition];\n  };\n\n  MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n    switch (operation) {\n      case TransformerMutationType.CREATE:\n        return OpType.INSERT;\n\n      case TransformerMutationType.DELETE:\n        return OpType.DELETE;\n\n      case TransformerMutationType.UPDATE:\n        return OpType.UPDATE;\n\n      case TransformerMutationType.GET:\n        // Intentionally blank\n        break;\n\n      default:\n        throw new Error(\"Invalid operation \" + operation);\n    } // because it makes TS happy ...\n\n\n    return undefined;\n  };\n\n  MutationProcessor.prototype.pause = function () {\n    this.processing = false;\n  };\n\n  return MutationProcessor;\n}();\n\nvar MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nvar originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\n\nexport var safeJitteredBackoff = function (attempt, _args, error) {\n  var attemptResult = originalJitteredBackoff(attempt); // If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n\n  if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === 'Network Error') {\n    return MAX_RETRY_DELAY_MS;\n  }\n\n  return attemptResult;\n};\nexport { MutationProcessor };","map":{"version":3,"mappings":"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","names":["API","ConsoleLogger","Logger","jitteredBackoff","NonRetryableError","retry","BackgroundProcessManager","Observable","DISCARD","isModelFieldType","isTargetNameAssociation","OpType","ProcessName","extractTargetNamesFromSrc","USER","USER_AGENT_SUFFIX_DATASTORE","ID","buildGraphQLOperation","createMutationInstanceFromModelOperation","getModelAuthModes","TransformerMutationType","getTokenForCustomAuth","getMutationErrorType","MAX_ATTEMPTS","logger","schema","storage","userClasses","outbox","modelInstanceCreator","MutationEvent","amplifyConfig","authModeStrategy","errorHandler","conflictHandler","amplifyContext","WeakMap","generateQueries","MutationProcessor","Object","values","namespaces","forEach","namespace","models","filter","_a","syncable","createMutation","updateMutation","deleteMutation","_this","typeQuery","set","model","observer","undefined","runningProcesses","observable","resume","error","addCleaner","pause","close","open","isOpen","add","onTerminate","processing","isReady","namespaceName","head","operation","data","condition","modelConstructor","this_1","result","opName","modelDefinition","defaultAuthMode","aws_appsync_authenticationType","modelName","modelAuthModes","_b","operationAuthModes_1","toUpperCase","authModeAttempts_1","authModeRetry_1","debug","jitteredRetry","response","length","error_2","error_1","message","runExclusive","dequeue","record","hasMore","peek","next","mutationEvent","authMode","createQueryVariables","query","variables","graphQLCondition","authToken","_h","tryWith","userAgentSuffix","attempt","opType","opTypeFromTransformerOperation","graphql","err_1","errors","_c","_d","code","errorType","Error","retryWith","localModel","input","remoteModel","attempts","warn","err_2","_e","_f","opName_1","query_1","authToken_1","id","serverData","updatedMutation","relationships","save","recoverySuggestion","errorInfo","process","mutate","cause","err","_g","safeJitteredBackoff","queriesTuples","get","_version","parsedData","deleteInput","primaryKey","primaryKey_1_1","pkField","mutationInput","DELETE","modelFields","fields","modelFields_1_1","name_1","type","association","connectionType","targetNames","targetNames_1_1","targetName","UPDATE","hasOwnProperty","JSON","parse","CREATE","keys","INSERT","GET","MAX_RETRY_DELAY_MS","originalJitteredBackoff","_args","attemptResult"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/sync/processors/mutation.ts"],"sourcesContent":["import { API, GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport {\n\tConsoleLogger as Logger,\n\tjitteredBackoff,\n\tNonRetryableError,\n\tretry,\n\tBackgroundProcessManager,\n} from '@aws-amplify/core';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { MutationEvent } from '../';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport { ExclusiveStorage as Storage } from '../../storage/storage';\nimport {\n\tAuthModeStrategy,\n\tConflictHandler,\n\tDISCARD,\n\tErrorHandler,\n\tGraphQLCondition,\n\tInternalSchema,\n\tisModelFieldType,\n\tisTargetNameAssociation,\n\tModelInstanceMetadata,\n\tOpType,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tSchemaModel,\n\tTypeConstructorMap,\n\tProcessName,\n\tAmplifyContext,\n} from '../../types';\nimport {\n\textractTargetNamesFromSrc,\n\tUSER,\n\tUSER_AGENT_SUFFIX_DATASTORE,\n\tID,\n} from '../../util';\nimport { MutationEventOutbox } from '../outbox';\nimport {\n\tbuildGraphQLOperation,\n\tcreateMutationInstanceFromModelOperation,\n\tgetModelAuthModes,\n\tTransformerMutationType,\n\tgetTokenForCustomAuth,\n} from '../utils';\nimport { getMutationErrorType } from './errorMaps';\n\nconst MAX_ATTEMPTS = 10;\n\nconst logger = new Logger('DataStore');\n\ntype MutationProcessorEvent = {\n\toperation: TransformerMutationType;\n\tmodelDefinition: SchemaModel;\n\tmodel: PersistentModel;\n\thasMore: boolean;\n};\n\nclass MutationProcessor {\n\tprivate observer!: ZenObservable.Observer<MutationProcessorEvent>;\n\tprivate readonly typeQuery = new WeakMap<\n\t\tSchemaModel,\n\t\t[TransformerMutationType, string, string][]\n\t>();\n\tprivate processing: boolean = false;\n\n\tprivate runningProcesses = new BackgroundProcessManager();\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly storage: Storage,\n\t\tprivate readonly userClasses: TypeConstructorMap,\n\t\tprivate readonly outbox: MutationEventOutbox,\n\t\tprivate readonly modelInstanceCreator: ModelInstanceCreator,\n\t\tprivate readonly MutationEvent: PersistentModelConstructor<MutationEvent>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly errorHandler: ErrorHandler,\n\t\tprivate readonly conflictHandler: ConflictHandler,\n\t\tprivate readonly amplifyContext: AmplifyContext\n\t) {\n\t\tthis.amplifyContext.API = this.amplifyContext.API || API;\n\t\tthis.generateQueries();\n\t}\n\n\tprivate generateQueries() {\n\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\tObject.values(namespace.models)\n\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t.forEach(model => {\n\t\t\t\t\tconst [createMutation] = buildGraphQLOperation(\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t'CREATE'\n\t\t\t\t\t);\n\t\t\t\t\tconst [updateMutation] = buildGraphQLOperation(\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t'UPDATE'\n\t\t\t\t\t);\n\t\t\t\t\tconst [deleteMutation] = buildGraphQLOperation(\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t'DELETE'\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.typeQuery.set(model, [\n\t\t\t\t\t\tcreateMutation,\n\t\t\t\t\t\tupdateMutation,\n\t\t\t\t\t\tdeleteMutation,\n\t\t\t\t\t]);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate isReady() {\n\t\treturn this.observer !== undefined;\n\t}\n\n\tpublic start(): Observable<MutationProcessorEvent> {\n\t\tthis.runningProcesses = new BackgroundProcessManager();\n\n\t\tconst observable = new Observable<MutationProcessorEvent>(observer => {\n\t\t\tthis.observer = observer;\n\n\t\t\ttry {\n\t\t\t\tthis.resume();\n\t\t\t} catch (error) {\n\t\t\t\tlogger.error('mutations processor start error', error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\treturn this.runningProcesses.addCleaner(async () => {\n\t\t\t\tthis.pause();\n\t\t\t});\n\t\t});\n\n\t\treturn observable;\n\t}\n\n\tpublic async stop() {\n\t\tawait this.runningProcesses.close();\n\t\tawait this.runningProcesses.open();\n\t}\n\n\tpublic async resume(): Promise<void> {\n\t\tawait (this.runningProcesses.isOpen &&\n\t\t\tthis.runningProcesses.add(async onTerminate => {\n\t\t\t\tif (\n\t\t\t\t\tthis.processing ||\n\t\t\t\t\t!this.isReady() ||\n\t\t\t\t\t!this.runningProcesses.isOpen\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.processing = true;\n\t\t\t\tlet head: MutationEvent;\n\t\t\t\tconst namespaceName = USER;\n\n\t\t\t\t// start to drain outbox\n\t\t\t\twhile (\n\t\t\t\t\tthis.processing &&\n\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t(head = await this.outbox.peek(this.storage)) !== undefined\n\t\t\t\t) {\n\t\t\t\t\tconst { model, operation, data, condition } = head;\n\t\t\t\t\tconst modelConstructor = this.userClasses[\n\t\t\t\t\t\tmodel\n\t\t\t\t\t] as PersistentModelConstructor<MutationEvent>;\n\t\t\t\t\tlet result: GraphQLResult<Record<string, PersistentModel>> =\n\t\t\t\t\t\tundefined!;\n\t\t\t\t\tlet opName: string = undefined!;\n\t\t\t\t\tlet modelDefinition: SchemaModel = undefined!;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\t\t\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\t\t\t\t\tdefaultAuthMode:\n\t\t\t\t\t\t\t\tthis.amplifyConfig.aws_appsync_authenticationType,\n\t\t\t\t\t\t\tmodelName: model,\n\t\t\t\t\t\t\tschema: this.schema,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst operationAuthModes = modelAuthModes[operation.toUpperCase()];\n\n\t\t\t\t\t\tlet authModeAttempts = 0;\n\t\t\t\t\t\tconst authModeRetry = async () => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`Attempting mutation with authMode: ${operationAuthModes[authModeAttempts]}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst response = await this.jitteredRetry(\n\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t\t\tcondition,\n\t\t\t\t\t\t\t\t\tmodelConstructor as any,\n\t\t\t\t\t\t\t\t\tthis.MutationEvent,\n\t\t\t\t\t\t\t\t\thead,\n\t\t\t\t\t\t\t\t\toperationAuthModes[authModeAttempts],\n\t\t\t\t\t\t\t\t\tonTerminate\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`Mutation sent successfully with authMode: ${operationAuthModes[authModeAttempts]}`\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn response;\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tauthModeAttempts++;\n\t\t\t\t\t\t\t\tif (authModeAttempts >= operationAuthModes.length) {\n\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t`Mutation failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\toperationAuthModes[authModeAttempts - 1]\n\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`Mutation failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\toperationAuthModes[authModeAttempts - 1]\n\t\t\t\t\t\t\t\t\t}. Retrying with authMode: ${\n\t\t\t\t\t\t\t\t\t\toperationAuthModes[authModeAttempts]\n\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn await authModeRetry();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t[result, opName, modelDefinition] = await authModeRetry();\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\terror.message === 'Offline' ||\n\t\t\t\t\t\t\terror.message === 'RetryMutation'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (result === undefined) {\n\t\t\t\t\t\tlogger.debug('done retrying');\n\t\t\t\t\t\tawait this.storage.runExclusive(async storage => {\n\t\t\t\t\t\t\tawait this.outbox.dequeue(storage);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst record = result.data![opName!];\n\t\t\t\t\tlet hasMore = false;\n\n\t\t\t\t\tawait this.storage.runExclusive(async storage => {\n\t\t\t\t\t\t// using runExclusive to prevent possible race condition\n\t\t\t\t\t\t// when another record gets enqueued between dequeue and peek\n\t\t\t\t\t\tawait this.outbox.dequeue(storage, record, operation);\n\t\t\t\t\t\thasMore = (await this.outbox.peek(storage)) !== undefined;\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.observer.next!({\n\t\t\t\t\t\toperation,\n\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\tmodel: record,\n\t\t\t\t\t\thasMore,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// pauses itself\n\t\t\t\tthis.pause();\n\t\t\t}, 'mutation resume loop'));\n\t}\n\n\tprivate async jitteredRetry(\n\t\tnamespaceName: string,\n\t\tmodel: string,\n\t\toperation: TransformerMutationType,\n\t\tdata: string,\n\t\tcondition: string,\n\t\tmodelConstructor: PersistentModelConstructor<PersistentModel>,\n\t\tMutationEvent: PersistentModelConstructor<MutationEvent>,\n\t\tmutationEvent: MutationEvent,\n\t\tauthMode: GRAPHQL_AUTH_MODE,\n\t\tonTerminate: Promise<void>\n\t): Promise<\n\t\t[GraphQLResult<Record<string, PersistentModel>>, string, SchemaModel]\n\t> {\n\t\treturn await retry(\n\t\t\tasync (\n\t\t\t\tmodel: string,\n\t\t\t\toperation: TransformerMutationType,\n\t\t\t\tdata: string,\n\t\t\t\tcondition: string,\n\t\t\t\tmodelConstructor: PersistentModelConstructor<PersistentModel>,\n\t\t\t\tMutationEvent: PersistentModelConstructor<MutationEvent>,\n\t\t\t\tmutationEvent: MutationEvent\n\t\t\t) => {\n\t\t\t\tconst [query, variables, graphQLCondition, opName, modelDefinition] =\n\t\t\t\t\tthis.createQueryVariables(\n\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tcondition\n\t\t\t\t\t);\n\n\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\tauthMode,\n\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t);\n\n\t\t\t\tconst tryWith = {\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tauthMode,\n\t\t\t\t\tauthToken,\n\t\t\t\t\tuserAgentSuffix: USER_AGENT_SUFFIX_DATASTORE,\n\t\t\t\t};\n\t\t\t\tlet attempt = 0;\n\n\t\t\t\tconst opType = this.opTypeFromTransformerOperation(operation);\n\n\t\t\t\tdo {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = <GraphQLResult<Record<string, PersistentModel>>>(\n\t\t\t\t\t\t\tawait this.amplifyContext.API.graphql(tryWith)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Use `as any` because TypeScript doesn't seem to like passing tuples\n\t\t\t\t\t\t// through generic params.\n\t\t\t\t\t\treturn [result, opName, modelDefinition] as any;\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tif (err.errors && err.errors.length > 0) {\n\t\t\t\t\t\t\tconst [error] = err.errors;\n\t\t\t\t\t\t\tconst { originalError: { code = null } = {} } = error;\n\n\t\t\t\t\t\t\tif (error.errorType === 'Unauthorized') {\n\t\t\t\t\t\t\t\tthrow new NonRetryableError('Unauthorized');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\terror.message === 'Network Error' ||\n\t\t\t\t\t\t\t\tcode === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tif (!this.processing) {\n\t\t\t\t\t\t\t\t\tthrow new NonRetryableError('Offline');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// TODO: Check errors on different env (react-native or other browsers)\n\t\t\t\t\t\t\t\tthrow new Error('Network Error');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (error.errorType === 'ConflictUnhandled') {\n\t\t\t\t\t\t\t\t// TODO: add on ConflictConditionalCheck error query last from server\n\t\t\t\t\t\t\t\tattempt++;\n\t\t\t\t\t\t\t\tlet retryWith: PersistentModel | typeof DISCARD;\n\n\t\t\t\t\t\t\t\tif (attempt > MAX_ATTEMPTS) {\n\t\t\t\t\t\t\t\t\tretryWith = DISCARD;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tretryWith = await this.conflictHandler!({\n\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\tlocalModel: this.modelInstanceCreator(\n\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\tvariables.input\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tremoteModel: this.modelInstanceCreator(\n\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\terror.data\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\toperation: opType,\n\t\t\t\t\t\t\t\t\t\t\tattempts: attempt,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t\tlogger.warn('conflict trycatch', err);\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (retryWith === DISCARD) {\n\t\t\t\t\t\t\t\t\t// Query latest from server and notify merger\n\n\t\t\t\t\t\t\t\t\tconst [[, opName, query]] = buildGraphQLOperation(\n\t\t\t\t\t\t\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t'GET'\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tconst serverData = <\n\t\t\t\t\t\t\t\t\t\tGraphQLResult<Record<string, PersistentModel>>\n\t\t\t\t\t\t\t\t\t>await this.amplifyContext.API.graphql({\n\t\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t\tvariables: { id: variables.input.id },\n\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\t\t\t\t\tuserAgentSuffix: USER_AGENT_SUFFIX_DATASTORE,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// onTerminate cancel graphql()\n\n\t\t\t\t\t\t\t\t\treturn [serverData, opName, modelDefinition];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst namespace = this.schema.namespaces[namespaceName];\n\n\t\t\t\t\t\t\t\t// convert retry with to tryWith\n\t\t\t\t\t\t\t\tconst updatedMutation =\n\t\t\t\t\t\t\t\t\tcreateMutationInstanceFromModelOperation(\n\t\t\t\t\t\t\t\t\t\tnamespace.relationships!,\n\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\topType,\n\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\tretryWith,\n\t\t\t\t\t\t\t\t\t\tgraphQLCondition,\n\t\t\t\t\t\t\t\t\t\tMutationEvent,\n\t\t\t\t\t\t\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\t\t\t\t\t\t\tmutationEvent.id\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tawait this.storage.save(updatedMutation);\n\n\t\t\t\t\t\t\t\tthrow new NonRetryableError('RetryMutation');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tthis.errorHandler({\n\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\tlocalModel: variables.input,\n\t\t\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\terrorType: getMutationErrorType(error),\n\t\t\t\t\t\t\t\t\t\terrorInfo: error.errorInfo,\n\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.mutate,\n\t\t\t\t\t\t\t\t\t\tcause: error,\n\t\t\t\t\t\t\t\t\t\tremoteModel: error.data\n\t\t\t\t\t\t\t\t\t\t\t? this.modelInstanceCreator(modelConstructor, error.data)\n\t\t\t\t\t\t\t\t\t\t\t: null!,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\tlogger.warn('Mutation error handler failed with:', err);\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t// Return empty tuple, dequeues the mutation\n\t\t\t\t\t\t\t\t\treturn error.data\n\t\t\t\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\t\t\t{ data: { [opName]: error.data } },\n\t\t\t\t\t\t\t\t\t\t\t\topName,\n\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t\t\t: [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n\t\t\t\t\t\t\t// These errors should not be retried.\n\t\t\t\t\t\t\tthrow new NonRetryableError(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} while (tryWith);\n\t\t\t},\n\t\t\t[\n\t\t\t\tmodel,\n\t\t\t\toperation,\n\t\t\t\tdata,\n\t\t\t\tcondition,\n\t\t\t\tmodelConstructor,\n\t\t\t\tMutationEvent,\n\t\t\t\tmutationEvent,\n\t\t\t],\n\t\t\tsafeJitteredBackoff,\n\t\t\tonTerminate\n\t\t);\n\t}\n\n\tprivate createQueryVariables(\n\t\tnamespaceName: string,\n\t\tmodel: string,\n\t\toperation: TransformerMutationType,\n\t\tdata: string,\n\t\tcondition: string\n\t): [string, Record<string, any>, GraphQLCondition, string, SchemaModel] {\n\t\tconst modelDefinition = this.schema.namespaces[namespaceName].models[model];\n\t\tconst { primaryKey } = this.schema.namespaces[namespaceName].keys![model];\n\n\t\tconst queriesTuples = this.typeQuery.get(modelDefinition);\n\n\t\tconst [, opName, query] = queriesTuples!.find(\n\t\t\t([transformerMutationType]) => transformerMutationType === operation\n\t\t)!;\n\n\t\tconst { _version, ...parsedData } = <ModelInstanceMetadata>JSON.parse(data);\n\n\t\t// include all the fields that comprise a custom PK if one is specified\n\t\tconst deleteInput = {};\n\t\tif (primaryKey?.length) {\n\t\t\tfor (const pkField of primaryKey) {\n\t\t\t\tdeleteInput[pkField] = parsedData[pkField];\n\t\t\t}\n\t\t} else {\n\t\t\tdeleteInput[ID] = (<any>parsedData).id;\n\t\t}\n\n\t\tlet mutationInput;\n\n\t\tif (operation === TransformerMutationType.DELETE) {\n\t\t\t// For DELETE mutations, only the key(s) are included in the input\n\t\t\tmutationInput = <ModelInstanceMetadata>deleteInput;\n\t\t} else {\n\t\t\t// Otherwise, we construct the mutation input with the following logic\n\t\t\tmutationInput = {};\n\t\t\tconst modelFields = Object.values(modelDefinition.fields);\n\n\t\t\tfor (const { name, type, association } of modelFields) {\n\t\t\t\t// model fields should be stripped out from the input\n\t\t\t\tif (isModelFieldType(type)) {\n\t\t\t\t\t// except for belongs to relations - we need to replace them with the correct foreign key(s)\n\t\t\t\t\tif (\n\t\t\t\t\t\tisTargetNameAssociation(association) &&\n\t\t\t\t\t\tassociation.connectionType === 'BELONGS_TO'\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst targetNames: string[] | undefined =\n\t\t\t\t\t\t\textractTargetNamesFromSrc(association);\n\n\t\t\t\t\t\tif (targetNames) {\n\t\t\t\t\t\t\t// instead of including the connected model itself, we add its key(s) to the mutation input\n\t\t\t\t\t\t\tfor (const targetName of targetNames) {\n\t\t\t\t\t\t\t\tmutationInput[targetName] = parsedData[targetName];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// scalar fields / non-model types\n\n\t\t\t\tif (operation === TransformerMutationType.UPDATE) {\n\t\t\t\t\tif (!parsedData.hasOwnProperty(name)) {\n\t\t\t\t\t\t// for update mutations - strip out a field if it's unchanged\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// all other fields are added to the input object\n\t\t\t\tmutationInput[name] = parsedData[name];\n\t\t\t}\n\t\t}\n\n\t\t// Build mutation variables input object\n\t\tconst input: ModelInstanceMetadata = {\n\t\t\t...mutationInput,\n\t\t\t_version,\n\t\t};\n\n\t\tconst graphQLCondition = <GraphQLCondition>JSON.parse(condition);\n\n\t\tconst variables = {\n\t\t\tinput,\n\t\t\t...(operation === TransformerMutationType.CREATE\n\t\t\t\t? {}\n\t\t\t\t: {\n\t\t\t\t\t\tcondition:\n\t\t\t\t\t\t\tObject.keys(graphQLCondition).length > 0\n\t\t\t\t\t\t\t\t? graphQLCondition\n\t\t\t\t\t\t\t\t: null,\n\t\t\t\t  }),\n\t\t};\n\t\treturn [query, variables, graphQLCondition, opName, modelDefinition];\n\t}\n\n\tprivate opTypeFromTransformerOperation(\n\t\toperation: TransformerMutationType\n\t): OpType {\n\t\tswitch (operation) {\n\t\t\tcase TransformerMutationType.CREATE:\n\t\t\t\treturn OpType.INSERT;\n\t\t\tcase TransformerMutationType.DELETE:\n\t\t\t\treturn OpType.DELETE;\n\t\t\tcase TransformerMutationType.UPDATE:\n\t\t\t\treturn OpType.UPDATE;\n\t\t\tcase TransformerMutationType.GET: // Intentionally blank\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid operation ${operation}`);\n\t\t}\n\n\t\t// because it makes TS happy ...\n\t\treturn undefined!;\n\t}\n\n\tpublic pause() {\n\t\tthis.processing = false;\n\t}\n}\n\nconst MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nconst originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\nexport const safeJitteredBackoff: typeof originalJitteredBackoff = (\n\tattempt,\n\t_args,\n\terror\n) => {\n\tconst attemptResult = originalJitteredBackoff(attempt);\n\n\t// If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n\tif (attemptResult === false && error?.message === 'Network Error') {\n\t\treturn MAX_RETRY_DELAY_MS;\n\t}\n\n\treturn attemptResult;\n};\n\nexport { MutationProcessor };\n"]},"metadata":{},"sourceType":"module"}
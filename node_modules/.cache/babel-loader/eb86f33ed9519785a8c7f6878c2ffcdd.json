{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { delegate } from '../vendor/dom-utils';\nimport { ConsoleLogger as Logger, browserOrNode } from '@aws-amplify/core';\nvar logger = new Logger('EventTracker');\nvar defaultOpts = {\n  enable: false,\n  events: ['click'],\n  selectorPrefix: 'data-amplify-analytics-',\n  provider: 'AWSPinpoint'\n};\n\nvar EventTracker =\n/** @class */\nfunction () {\n  function EventTracker(tracker, opts) {\n    if (!browserOrNode().isBrowser || !window.addEventListener) {\n      logger.debug('not in the supported web environment');\n      return;\n    }\n\n    this._config = Object.assign({}, defaultOpts, opts);\n    this._tracker = tracker;\n    this._delegates = {};\n    this._trackFunc = this._trackFunc.bind(this);\n    logger.debug('initialize pageview tracker with opts', this._config);\n    this.configure(this._config);\n  }\n\n  EventTracker.prototype.configure = function (opts) {\n    var _this = this;\n\n    Object.assign(this._config, opts);\n\n    if (!this._config.enable) {\n      Object.keys(this._delegates).forEach(function (key) {\n        if (typeof _this._delegates[key].destroy === 'function') _this._delegates[key].destroy();\n      });\n      this._delegates = {};\n    } else if (this._config.enable && Object.keys(this._delegates).length === 0) {\n      var selector_1 = '[' + this._config.selectorPrefix + 'on]';\n\n      this._config.events.forEach(function (evt) {\n        _this._delegates[evt] = delegate(document, evt, selector_1, _this._trackFunc, {\n          composed: true,\n          useCapture: true\n        });\n      });\n    }\n\n    return this._config;\n  };\n\n  EventTracker.prototype._trackFunc = function (event, element) {\n    return __awaiter(this, void 0, void 0, function () {\n      var customAttrs, events, eventName, attrs, defaultAttrs, _a, attributes;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            customAttrs = {};\n            events = element.getAttribute(this._config.selectorPrefix + 'on').split(/\\s*,\\s*/);\n            eventName = element.getAttribute(this._config.selectorPrefix + 'name');\n            attrs = element.getAttribute(this._config.selectorPrefix + 'attrs');\n\n            if (attrs) {\n              attrs.split(/\\s*,\\s*/).forEach(function (attr) {\n                var tmp = attr.trim().split(/\\s*:\\s*/);\n                customAttrs[tmp[0]] = tmp[1];\n              });\n            }\n\n            if (!(typeof this._config.attributes === 'function')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this._config.attributes()];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = this._config.attributes;\n            _b.label = 3;\n\n          case 3:\n            defaultAttrs = _a;\n            attributes = Object.assign({\n              type: event.type,\n              target: event.target.localName + \" with id \" + event.target.id\n            }, defaultAttrs, customAttrs);\n            logger.debug('events needed to be recorded', events);\n            logger.debug('attributes needed to be attached', customAttrs);\n\n            if (events.indexOf(event.type) < 0) {\n              logger.debug(\"event \" + event.type + \" is not selected to be recorded\");\n              return [2\n              /*return*/\n              ];\n            }\n\n            this._tracker({\n              name: eventName || 'event',\n              attributes: attributes\n            }, this._config.provider).catch(function (e) {\n              logger.debug(\"Failed to record the \" + event.type + \" event', \" + e);\n            });\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return EventTracker;\n}();\n\nexport { EventTracker };","map":{"version":3,"mappings":"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","names":["delegate","ConsoleLogger","Logger","browserOrNode","logger","defaultOpts","enable","events","selectorPrefix","provider","tracker","opts","isBrowser","window","addEventListener","debug","_config","Object","assign","_tracker","_delegates","_trackFunc","bind","configure","EventTracker","keys","forEach","_this","key","destroy","length","selector_1","evt","document","composed","useCapture","event","element","customAttrs","getAttribute","split","eventName","attrs","tmp","attr","trim","attributes","_a","defaultAttrs","type","target","localName","id","indexOf","name","catch","e"],"sources":["/home/dalienst/node_modules/@aws-amplify/analytics/src/trackers/EventTracker.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { delegate } from '../vendor/dom-utils';\nimport { EventTrackOpts } from '../types';\nimport { ConsoleLogger as Logger, browserOrNode } from '@aws-amplify/core';\n\nconst logger = new Logger('EventTracker');\n\nconst defaultOpts: EventTrackOpts = {\n\tenable: false,\n\tevents: ['click'],\n\tselectorPrefix: 'data-amplify-analytics-',\n\tprovider: 'AWSPinpoint',\n};\n\nexport class EventTracker {\n\tprivate _tracker;\n\tprivate _config: EventTrackOpts;\n\tprivate _delegates;\n\n\tconstructor(tracker, opts) {\n\t\tif (!browserOrNode().isBrowser || !window.addEventListener) {\n\t\t\tlogger.debug('not in the supported web environment');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._config = Object.assign({}, defaultOpts, opts);\n\t\tthis._tracker = tracker;\n\t\tthis._delegates = {};\n\t\tthis._trackFunc = this._trackFunc.bind(this);\n\n\t\tlogger.debug('initialize pageview tracker with opts', this._config);\n\n\t\tthis.configure(this._config);\n\t}\n\n\tconfigure(opts?: EventTrackOpts) {\n\t\tObject.assign(this._config, opts);\n\n\t\tif (!this._config.enable) {\n\t\t\tObject.keys(this._delegates).forEach(key => {\n\t\t\t\tif (typeof this._delegates[key].destroy === 'function')\n\t\t\t\t\tthis._delegates[key].destroy();\n\t\t\t});\n\t\t\tthis._delegates = {};\n\t\t} else if (\n\t\t\tthis._config.enable &&\n\t\t\tObject.keys(this._delegates).length === 0\n\t\t) {\n\t\t\tconst selector = '[' + this._config.selectorPrefix + 'on]';\n\t\t\tthis._config.events.forEach(evt => {\n\t\t\t\tthis._delegates[evt] = delegate(\n\t\t\t\t\tdocument,\n\t\t\t\t\tevt,\n\t\t\t\t\tselector,\n\t\t\t\t\tthis._trackFunc,\n\t\t\t\t\t{ composed: true, useCapture: true }\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn this._config;\n\t}\n\n\tprivate async _trackFunc(event, element) {\n\t\t// the events specifed in 'amplify-analytics-on' selector\n\t\tconst customAttrs = {};\n\t\tconst events = element\n\t\t\t.getAttribute(this._config.selectorPrefix + 'on')\n\t\t\t.split(/\\s*,\\s*/);\n\t\tconst eventName = element.getAttribute(\n\t\t\tthis._config.selectorPrefix + 'name'\n\t\t);\n\n\t\tconst attrs = element.getAttribute(this._config.selectorPrefix + 'attrs');\n\t\tif (attrs) {\n\t\t\tattrs.split(/\\s*,\\s*/).forEach(attr => {\n\t\t\t\tconst tmp = attr.trim().split(/\\s*:\\s*/);\n\t\t\t\tcustomAttrs[tmp[0]] = tmp[1];\n\t\t\t});\n\t\t}\n\n\t\tconst defaultAttrs =\n\t\t\ttypeof this._config.attributes === 'function'\n\t\t\t\t? await this._config.attributes()\n\t\t\t\t: this._config.attributes;\n\n\t\tconst attributes = Object.assign(\n\t\t\t{\n\t\t\t\ttype: event.type,\n\t\t\t\ttarget: `${event.target.localName} with id ${event.target.id}`,\n\t\t\t},\n\t\t\tdefaultAttrs,\n\t\t\tcustomAttrs\n\t\t);\n\n\t\tlogger.debug('events needed to be recorded', events);\n\t\tlogger.debug('attributes needed to be attached', customAttrs);\n\t\tif (events.indexOf(event.type) < 0) {\n\t\t\tlogger.debug(`event ${event.type} is not selected to be recorded`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._tracker(\n\t\t\t{\n\t\t\t\tname: eventName || 'event',\n\t\t\t\tattributes,\n\t\t\t},\n\t\t\tthis._config.provider\n\t\t).catch(e => {\n\t\t\tlogger.debug(`Failed to record the ${event.type} event', ${e}`);\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\n\nexport function locationConstraintMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var CreateBucketConfiguration, region;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              CreateBucketConfiguration = args.input.CreateBucketConfiguration;\n              return [4\n              /*yield*/\n              , options.region()];\n\n            case 1:\n              region = _a.sent();\n\n              if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {\n                args = __assign(__assign({}, args), {\n                  input: __assign(__assign({}, args.input), {\n                    CreateBucketConfiguration: region === \"us-east-1\" ? undefined : {\n                      LocationConstraint: region\n                    }\n                  })\n                });\n              }\n\n              return [2\n              /*return*/\n              , next(args)];\n          }\n        });\n      });\n    };\n  };\n}\nexport var locationConstraintMiddlewareOptions = {\n  step: \"initialize\",\n  tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n  name: \"locationConstraintMiddleware\",\n  override: true\n};\nexport var getLocationConstraintPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAYA;;;;;;AAMA,OAAM,SAAUA,4BAAV,CACJC,OADI,EACqC;AAD3C;;AAGE,SAAO,UACLC,IADK,EAC+B;AACD,qBACnCC,IADmC,EACE;AAAA;;;;;AAE7BC,uCAAyB,GAAKD,IAAI,CAACE,KAAL,CAAUD,yBAAxC;AAEO;AAAA;AAAA,gBAAMH,OAAO,CAACK,MAAR,EAAN;;;AAATA,oBAAM,GAAGC,SAAT;;AACN,kBAAI,CAACH,yBAAD,IAA8B,CAACA,yBAAyB,CAACI,kBAA7D,EAAiF;AAC/EL,oBAAI,yBACCA,IADD,GACK;AACPE,uBAAK,wBACAF,IAAI,CAACE,KADL,GACU;AACbD,6CAAyB,EAAEE,MAAM,KAAK,WAAX,GAAyBG,SAAzB,GAAqC;AAAED,wCAAkB,EAAEF;AAAtB;AADnD,mBADV;AADE,iBADL,CAAJ;AAOD;;AAED;AAAA;AAAA,gBAAOJ,IAAI,CAACC,IAAD,CAAX;;;OAfqC;AAgBtC,KAjBoC;AAiBpC,GAnBD;AAoBD;AAED,OAAO,IAAMO,mCAAmC,GAA6B;AAC3EC,MAAI,EAAE,YADqE;AAE3EC,MAAI,EAAE,CAAC,qBAAD,EAAwB,6BAAxB,CAFqE;AAG3EC,MAAI,EAAE,8BAHqE;AAI3EC,UAAQ,EAAE;AAJiE,CAAtE;AAOP,OAAO,IAAMC,2BAA2B,GAAG,UAACC,MAAD,EAAyC;AAA0B,SAAC;AAC7GC,gBAAY,EAAE,UAACC,WAAD,EAAY;AACxBA,iBAAW,CAACC,GAAZ,CAAgBnB,4BAA4B,CAACgB,MAAD,CAA5C,EAAsDN,mCAAtD;AACD;AAH4G,GAAD;AAI5G,CAJK","names":["locationConstraintMiddleware","options","next","args","CreateBucketConfiguration","input","region","_a","LocationConstraint","undefined","locationConstraintMiddlewareOptions","step","tags","name","override","getLocationConstraintPlugin","config","applyToStack","clientStack","add"],"sources":["/home/dalienst/node_modules/@aws-sdk/middleware-location-constraint/src/index.ts"],"sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { LocationConstraintResolvedConfig } from \"./configuration\";\n\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\n\nexport function locationConstraintMiddleware(\n  options: LocationConstraintResolvedConfig\n): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const { CreateBucketConfiguration } = args.input;\n    //After region config resolution, region is a Provider<string>\n    const region = await options.region();\n    if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {\n      args = {\n        ...args,\n        input: {\n          ...args.input,\n          CreateBucketConfiguration: region === \"us-east-1\" ? undefined : { LocationConstraint: region },\n        },\n      };\n    }\n\n    return next(args);\n  };\n}\n\nexport const locationConstraintMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n  name: \"locationConstraintMiddleware\",\n  override: true,\n};\n\nexport const getLocationConstraintPlugin = (config: LocationConstraintResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __read } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger, parseAWSExports } from '@aws-amplify/core';\nimport { AWSS3Provider } from './providers';\nimport axios from 'axios';\nimport { AWSS3UploadTask } from './providers/AWSS3UploadTask';\nvar logger = new Logger('StorageClass');\nvar loggerStorageInstance = new Logger('Storage'); // Logging relating to Storage instance management\n\nvar DEFAULT_PROVIDER = 'AWSS3';\n/**\n * Provide storage methods to use AWS S3\n */\n\nvar Storage =\n/** @class */\nfunction () {\n  /**\n   * Initialize Storage\n   * @param {Object} config - Configuration object for storage\n   */\n  function Storage() {\n    this._config = {};\n    this._pluggables = [];\n    this._cancelTokenSourceMap = new WeakMap();\n    logger.debug('Storage Options', this._config);\n    this.get = this.get.bind(this);\n    this.put = this.put.bind(this);\n    this.remove = this.remove.bind(this);\n    this.list = this.list.bind(this);\n  }\n\n  Storage.prototype.getModuleName = function () {\n    return 'Storage';\n  };\n  /**\n   * add plugin into Storage category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n\n\n  Storage.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Storage') {\n      this._pluggables.push(pluggable);\n\n      var config = {};\n      config = pluggable.configure(this._config[pluggable.getProviderName()]);\n      return config;\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Storage.prototype.getPluggable = function (providerName) {\n    var pluggable = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Storage.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * Configure Storage\n   * @param {Object} config - Configuration object for storage\n   * @return {Object} - Current configuration\n   */\n\n\n  Storage.prototype.configure = function (config) {\n    var _this = this;\n\n    var _a;\n\n    logger.debug('configure Storage');\n    if (!config) return this._config;\n    var amplifyConfig = parseAWSExports(config);\n    var storageConfig = (_a = amplifyConfig.Storage) !== null && _a !== void 0 ? _a : {};\n    var defaultProviderConfigKeys = ['bucket', 'region', 'level', 'track', 'customPrefix', 'serverSideEncryption', 'SSECustomerAlgorithm', 'SSECustomerKey', 'SSECustomerKeyMD5', 'SSEKMSKeyId'];\n\n    var hasDefaultProviderConfigKeys = function (config) {\n      return Object.keys(config).find(function (key) {\n        return defaultProviderConfigKeys.includes(key);\n      });\n    };\n\n    if (hasDefaultProviderConfigKeys(storageConfig) && !storageConfig[DEFAULT_PROVIDER]) {\n      storageConfig[DEFAULT_PROVIDER] = {};\n    }\n\n    Object.entries(storageConfig).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          value = _b[1];\n\n      if (key && defaultProviderConfigKeys.includes(key) && value !== undefined) {\n        storageConfig[DEFAULT_PROVIDER][key] = value;\n        delete storageConfig[key];\n      }\n    }); // only update new values for each provider\n\n    Object.keys(storageConfig).forEach(function (providerName) {\n      if (typeof storageConfig[providerName] !== 'string') {\n        _this._config[providerName] = __assign(__assign({}, _this._config[providerName]), storageConfig[providerName]);\n      }\n    });\n\n    this._pluggables.forEach(function (pluggable) {\n      pluggable.configure(_this._config[pluggable.getProviderName()]);\n    });\n\n    if (this._pluggables.length === 0) {\n      this.addPluggable(new AWSS3Provider());\n    }\n\n    return this._config;\n  };\n\n  Storage.prototype.getCancellableTokenSource = function () {\n    return axios.CancelToken.source();\n  };\n\n  Storage.prototype.updateRequestToBeCancellable = function (request, cancelTokenSource) {\n    this._cancelTokenSourceMap.set(request, cancelTokenSource);\n  };\n\n  Storage.prototype.isUploadTask = function (x) {\n    return typeof x !== 'undefined' && typeof x['pause'] === 'function' && typeof x['resume'] === 'function';\n  };\n\n  Storage.prototype.cancel = function (request, message) {\n    if (request instanceof AWSS3UploadTask) {\n      return request._cancel();\n    }\n\n    var cancelTokenSource = this._cancelTokenSourceMap.get(request);\n\n    if (cancelTokenSource) {\n      cancelTokenSource.cancel(message);\n    } else {\n      logger.debug('The request does not map to any cancel token');\n    }\n  };\n\n  Storage.prototype.copy = function (src, dest, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    var cancelTokenSource = this.getCancellableTokenSource();\n\n    if (typeof prov.copy !== 'function') {\n      return Promise.reject(\".copy is not implemented on provider \" + prov.getProviderName());\n    }\n\n    var responsePromise = prov.copy(src, dest, __assign(__assign({}, config), {\n      cancelTokenSource: cancelTokenSource\n    }));\n    this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n    return responsePromise;\n  };\n\n  Storage.prototype.get = function (key, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    var cancelTokenSource = this.getCancellableTokenSource();\n    var responsePromise = prov.get(key, __assign(__assign({}, config), {\n      cancelTokenSource: cancelTokenSource\n    }));\n    this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n    return responsePromise;\n  };\n\n  Storage.prototype.isCancelError = function (error) {\n    return axios.isCancel(error);\n  };\n\n  Storage.prototype.put = function (key, object, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    var cancelTokenSource = this.getCancellableTokenSource();\n    var response = prov.put(key, object, __assign(__assign({}, config), {\n      cancelTokenSource: cancelTokenSource\n    }));\n\n    if (!this.isUploadTask(response)) {\n      this.updateRequestToBeCancellable(response, cancelTokenSource);\n    }\n\n    return response;\n  };\n\n  Storage.prototype.remove = function (key, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    return prov.remove(key, config);\n  };\n\n  Storage.prototype.list = function (path, config) {\n    var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    return prov.list(path, config);\n  };\n\n  return Storage;\n}();\n\nexport { Storage };\n/**\n * Configure & register Storage singleton instance.\n */\n\nvar _instance = null;\n\nvar getInstance = function () {\n  if (_instance) {\n    return _instance;\n  }\n\n  loggerStorageInstance.debug('Create Storage Instance, debug');\n  _instance = new Storage();\n  _instance.vault = new Storage();\n  var old_configure = _instance.configure;\n\n  _instance.configure = function (options) {\n    loggerStorageInstance.debug('storage configure called');\n\n    var vaultConfig = __assign({}, old_configure.call(_instance, options)); // set level private for each provider for the vault\n\n\n    Object.keys(vaultConfig).forEach(function (providerName) {\n      if (typeof vaultConfig[providerName] !== 'string') {\n        vaultConfig[providerName] = __assign(__assign({}, vaultConfig[providerName]), {\n          level: 'private'\n        });\n      }\n    });\n    loggerStorageInstance.debug('storage vault configure called');\n\n    _instance.vault.configure(vaultConfig);\n  };\n\n  return _instance;\n};\n\nexport var StorageInstance = getInstance();\nAmplify.register(StorageInstance);","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","parseAWSExports","AWSS3Provider","axios","AWSS3UploadTask","logger","loggerStorageInstance","DEFAULT_PROVIDER","_config","_pluggables","_cancelTokenSourceMap","WeakMap","debug","get","bind","put","remove","list","Storage","pluggable","getCategory","push","config","configure","getProviderName","providerName","find","undefined","filter","amplifyConfig","storageConfig","_a","defaultProviderConfigKeys","hasDefaultProviderConfigKeys","keys","includes","key","Object","entries","forEach","_b","value","_this","__assign","length","addPluggable","CancelToken","source","request","cancelTokenSource","set","x","message","_cancel","cancel","src","dest","provider","prov","Promise","reject","getCancellableTokenSource","copy","responsePromise","updateRequestToBeCancellable","error","isCancel","object","response","isUploadTask","path","_instance","getInstance","vault","old_configure","vaultConfig","call","options","level","StorageInstance","register"],"sources":["/home/dalienst/node_modules/@aws-amplify/storage/src/Storage.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tparseAWSExports,\n} from '@aws-amplify/core';\nimport { AWSS3Provider } from './providers';\nimport {\n\tStorageCopySource,\n\tStorageCopyDestination,\n\tStorageGetConfig,\n\tStorageProvider,\n\tStoragePutConfig,\n\tStorageRemoveConfig,\n\tStorageListConfig,\n\tStorageCopyConfig,\n\tStorageProviderWithCopy,\n\tStorageGetOutput,\n\tStoragePutOutput,\n\tStorageRemoveOutput,\n\tStorageListOutput,\n\tStorageCopyOutput,\n\tUploadTask,\n} from './types';\nimport axios, { CancelTokenSource } from 'axios';\nimport { PutObjectCommandInput } from '@aws-sdk/client-s3';\nimport { AWSS3UploadTask } from './providers/AWSS3UploadTask';\n\nconst logger = new Logger('StorageClass');\nconst loggerStorageInstance = new Logger('Storage'); // Logging relating to Storage instance management\n\nconst DEFAULT_PROVIDER = 'AWSS3';\n/**\n * Provide storage methods to use AWS S3\n */\nexport class Storage {\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\tprivate _pluggables: StorageProvider[];\n\n\t/**\n\t * Similar to the API module. This weak map allows users to cancel their in-flight request made using the Storage\n\t * module. For every get or put request, a unique cancel token will be generated and injected to it's underlying\n\t * AxiosHttpHandler. This map maintains a mapping of Request to CancelTokenSource. When .cancel is invoked, it will\n\t * attempt to retrieve it's corresponding cancelTokenSource and cancel the in-flight request.\n\t */\n\tprivate _cancelTokenSourceMap: WeakMap<Promise<any>, CancelTokenSource>;\n\n\t/**\n\t * @public\n\t */\n\tpublic vault: Storage;\n\n\t/**\n\t * Initialize Storage\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor() {\n\t\tthis._config = {};\n\t\tthis._pluggables = [];\n\t\tthis._cancelTokenSourceMap = new WeakMap<Promise<any>, CancelTokenSource>();\n\t\tlogger.debug('Storage Options', this._config);\n\n\t\tthis.get = this.get.bind(this);\n\t\tthis.put = this.put.bind(this);\n\t\tthis.remove = this.remove.bind(this);\n\t\tthis.list = this.list.bind(this);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Storage';\n\t}\n\n\t/**\n\t * add plugin into Storage category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic addPluggable(pluggable: StorageProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Storage') {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\tlet config = {};\n\n\t\t\tconfig = pluggable.configure(this._config[pluggable.getProviderName()]);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic getPluggable(providerName: string) {\n\t\tconst pluggable = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t\tif (pluggable === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\t\treturn null;\n\t\t} else return pluggable;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic removePluggable(providerName: string) {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\treturn;\n\t}\n\n\t/**\n\t * Configure Storage\n\t * @param {Object} config - Configuration object for storage\n\t * @return {Object} - Current configuration\n\t */\n\tconfigure(config?) {\n\t\tlogger.debug('configure Storage');\n\t\tif (!config) return this._config;\n\n\t\tconst amplifyConfig = parseAWSExports(config);\n\n\t\tconst storageConfig = amplifyConfig.Storage ?? {};\n\n\t\tconst defaultProviderConfigKeys = [\n\t\t\t'bucket',\n\t\t\t'region',\n\t\t\t'level',\n\t\t\t'track',\n\t\t\t'customPrefix',\n\t\t\t'serverSideEncryption',\n\t\t\t'SSECustomerAlgorithm',\n\t\t\t'SSECustomerKey',\n\t\t\t'SSECustomerKeyMD5',\n\t\t\t'SSEKMSKeyId',\n\t\t];\n\n\t\tconst hasDefaultProviderConfigKeys = (config: object) =>\n\t\t\tObject.keys(config).find(key => defaultProviderConfigKeys.includes(key));\n\n\t\tif (\n\t\t\thasDefaultProviderConfigKeys(storageConfig) &&\n\t\t\t!storageConfig[DEFAULT_PROVIDER]\n\t\t) {\n\t\t\tstorageConfig[DEFAULT_PROVIDER] = {};\n\t\t}\n\n\t\tObject.entries(storageConfig).forEach(([key, value]) => {\n\t\t\tif (\n\t\t\t\tkey &&\n\t\t\t\tdefaultProviderConfigKeys.includes(key) &&\n\t\t\t\tvalue !== undefined\n\t\t\t) {\n\t\t\t\tstorageConfig[DEFAULT_PROVIDER][key] = value;\n\t\t\t\tdelete storageConfig[key];\n\t\t\t}\n\t\t});\n\n\t\t// only update new values for each provider\n\t\tObject.keys(storageConfig).forEach(providerName => {\n\t\t\tif (typeof storageConfig[providerName] !== 'string') {\n\t\t\t\tthis._config[providerName] = {\n\t\t\t\t\t...this._config[providerName],\n\t\t\t\t\t...storageConfig[providerName],\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tthis._pluggables.forEach(pluggable => {\n\t\t\tpluggable.configure(this._config[pluggable.getProviderName()]);\n\t\t});\n\n\t\tif (this._pluggables.length === 0) {\n\t\t\tthis.addPluggable(new AWSS3Provider());\n\t\t}\n\n\t\treturn this._config;\n\t}\n\n\tprivate getCancellableTokenSource(): CancelTokenSource {\n\t\treturn axios.CancelToken.source();\n\t}\n\n\tprivate updateRequestToBeCancellable(\n\t\trequest: Promise<any>,\n\t\tcancelTokenSource: CancelTokenSource\n\t) {\n\t\tthis._cancelTokenSourceMap.set(request, cancelTokenSource);\n\t}\n\n\tprivate isUploadTask(x: unknown): x is UploadTask {\n\t\treturn (\n\t\t\ttypeof x !== 'undefined' &&\n\t\t\ttypeof x['pause'] === 'function' &&\n\t\t\ttypeof x['resume'] === 'function'\n\t\t);\n\t}\n\n\t/**\n\t * Cancels an inflight request\n\t *\n\t * @param request - The request to cancel\n\t * @param [message] - A message to include in the cancelation exception\n\t */\n\tpublic cancel(request: UploadTask, message?: string): Promise<boolean>;\n\tpublic cancel(request: Promise<any>, message?: string): void;\n\tpublic cancel(\n\t\trequest: Promise<any> | UploadTask,\n\t\tmessage?: string\n\t): void | Promise<boolean> {\n\t\tif (request instanceof AWSS3UploadTask) {\n\t\t\treturn request._cancel();\n\t\t}\n\t\tconst cancelTokenSource = this._cancelTokenSourceMap.get(\n\t\t\trequest as Promise<any>\n\t\t);\n\t\tif (cancelTokenSource) {\n\t\t\tcancelTokenSource.cancel(message);\n\t\t} else {\n\t\t\tlogger.debug('The request does not map to any cancel token');\n\t\t}\n\t}\n\n\t/**\n\t * Copies a file from src to dest.\n\t *\n\t * @param src - The source object.\n\t * @param dest - The destination object.\n\t * @param [config] - config for the Storage operation.\n\t * @return A promise resolves to the copied object's key.\n\t */\n\tpublic copy<T extends Record<string, any>>(\n\t\tsrc: StorageCopySource,\n\t\tdest: StorageCopyDestination,\n\t\tconfig?: StorageCopyConfig<T>\n\t): StorageCopyOutput<T>;\n\tpublic copy<T extends StorageProviderWithCopy = AWSS3Provider>(\n\t\tsrc: Parameters<T['copy']>[0],\n\t\tdest: Parameters<T['copy']>[1],\n\t\tconfig?: StorageCopyConfig<T>\n\t): StorageCopyOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageCopyOutput<T>;\n\t\t}\n\t\tconst cancelTokenSource = this.getCancellableTokenSource();\n\t\tif (typeof prov.copy !== 'function') {\n\t\t\treturn Promise.reject(\n\t\t\t\t`.copy is not implemented on provider ${prov.getProviderName()}`\n\t\t\t) as StorageCopyOutput<T>;\n\t\t}\n\t\tconst responsePromise = prov.copy(src, dest, {\n\t\t\t...config,\n\t\t\tcancelTokenSource,\n\t\t});\n\t\tthis.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n\t\treturn responsePromise as StorageCopyOutput<T>;\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param key - key of the object\n\t * @param [config] - config for the Storage operation.\n\t * @return - A promise resolves to either a presigned url or the object\n\t */\n\t// Adding & { download?: boolean }, if not T extends { download: true } ? ... : ... will not work properly\n\tpublic get<T extends Record<string, any> & { download?: boolean }>(\n\t\tkey: string,\n\t\tconfig?: StorageGetConfig<T>\n\t): StorageGetOutput<T>;\n\tpublic get<\n\t\tT extends StorageProvider | { [key: string]: any; download?: boolean }\n\t>(key: string, config?: StorageGetConfig<T>): StorageGetOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageGetOutput<T>;\n\t\t}\n\t\tconst cancelTokenSource = this.getCancellableTokenSource();\n\t\tconst responsePromise = prov.get(key, {\n\t\t\t...config,\n\t\t\tcancelTokenSource,\n\t\t});\n\t\tthis.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n\t\treturn responsePromise as StorageGetOutput<T>;\n\t}\n\n\tpublic isCancelError(error: any) {\n\t\treturn axios.isCancel(error);\n\t}\n\n\t/**\n\t * Put a file in storage bucket specified to configure method\n\t * @param key - key of the object\n\t * @param object - File to be put in bucket\n\t * @param [config] - { level : private|protected|public, contentType: MIME Types,\n\t *  progressCallback: function }\n\t * @return - promise resolves to object on success\n\t */\n\tpublic put<T extends Record<string, any>>(\n\t\tkey: string,\n\t\tobject: any,\n\t\tconfig?: StoragePutConfig<T>\n\t): StoragePutOutput<T>;\n\tpublic put<T extends StorageProvider = AWSS3Provider>(\n\t\tkey: string,\n\t\tobject: Omit<PutObjectCommandInput['Body'], 'ReadableStream' | 'Readable'>,\n\t\tconfig?: StoragePutConfig<T>\n\t): StoragePutOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StoragePutOutput<T>;\n\t\t}\n\t\tconst cancelTokenSource = this.getCancellableTokenSource();\n\t\tconst response = prov.put(key, object, {\n\t\t\t...config,\n\t\t\tcancelTokenSource,\n\t\t});\n\t\tif (!this.isUploadTask(response)) {\n\t\t\tthis.updateRequestToBeCancellable(response, cancelTokenSource);\n\t\t}\n\t\treturn response as StoragePutOutput<T>;\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param key - key of the object\n\t * @param [config] - { level : private|protected|public }\n\t * @return - Promise resolves upon successful removal of the object\n\t */\n\tpublic remove<T extends Record<string, any>>(\n\t\tkey: string,\n\t\tconfig?: StorageRemoveConfig<T>\n\t): StorageRemoveOutput<T>;\n\tpublic remove<T extends StorageProvider = AWSS3Provider>(\n\t\tkey: string,\n\t\tconfig?: StorageRemoveConfig<T>\n\t): StorageRemoveOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageRemoveOutput<T>;\n\t\t}\n\t\treturn prov.remove(key, config) as StorageRemoveOutput<T>;\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param path - the path that contains objects\n\t * @param [config] - { level : private|protected|public, maxKeys: NUMBER }\n\t * @return - Promise resolves to list of keys for all objects in path\n\t */\n\tpublic list<T extends Record<string, any>>(\n\t\tkey: string,\n\t\tconfig?: StorageListConfig<T>\n\t): StorageListOutput<T>;\n\tpublic list<T extends StorageProvider = AWSS3Provider>(\n\t\tpath: string,\n\t\tconfig?: StorageListConfig<T>\n\t): StorageListOutput<T> {\n\t\tconst provider = config?.provider || DEFAULT_PROVIDER;\n\t\tconst prov = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === provider\n\t\t);\n\t\tif (prov === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', provider);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No plugin found in Storage for the provider'\n\t\t\t) as StorageListOutput<T>;\n\t\t}\n\t\treturn prov.list(path, config) as StorageListOutput<T>;\n\t}\n}\n\n/**\n * Configure & register Storage singleton instance.\n */\nlet _instance: Storage = null;\nconst getInstance = () => {\n\tif (_instance) {\n\t\treturn _instance;\n\t}\n\tloggerStorageInstance.debug('Create Storage Instance, debug');\n\t_instance = new Storage();\n\t_instance.vault = new Storage();\n\n\tconst old_configure = _instance.configure;\n\t_instance.configure = options => {\n\t\tloggerStorageInstance.debug('storage configure called');\n\t\tconst vaultConfig = { ...old_configure.call(_instance, options) };\n\n\t\t// set level private for each provider for the vault\n\t\tObject.keys(vaultConfig).forEach(providerName => {\n\t\t\tif (typeof vaultConfig[providerName] !== 'string') {\n\t\t\t\tvaultConfig[providerName] = {\n\t\t\t\t\t...vaultConfig[providerName],\n\t\t\t\t\tlevel: 'private',\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tloggerStorageInstance.debug('storage vault configure called');\n\t\t_instance.vault.configure(vaultConfig);\n\t};\n\treturn _instance;\n};\n\nexport const StorageInstance: Storage = getInstance();\nAmplify.register(StorageInstance);\n"]},"metadata":{},"sourceType":"module"}
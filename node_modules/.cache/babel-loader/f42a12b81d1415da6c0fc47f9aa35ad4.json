{"ast":null,"code":"import { __awaiter, __generator, __read, __values } from \"tslib\";\nimport { OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, indexNameFromKeys, monotonicUlidFactory } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\n\nvar AsyncStorageDatabase =\n/** @class */\nfunction () {\n  function AsyncStorageDatabase() {\n    /**\n     * Maps storeNames to a map of ulid->id\n     */\n    this._collectionInMemoryIndex = new Map();\n    this.storage = createInMemoryStore();\n  }\n  /**\n   * Collection index is map of stores (i.e. sync, metadata, mutation event, and data)\n   * @param storeName {string} - Name of the store\n   * @returns Map of ulid->id\n   */\n\n\n  AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n    if (!this._collectionInMemoryIndex.has(storeName)) {\n      this._collectionInMemoryIndex.set(storeName, new Map());\n    }\n\n    return this._collectionInMemoryIndex.get(storeName);\n  };\n  /**\n   * Return ULID for store if it exists, otherwise create a new one\n   * @param storeName {string} - Name of the store\n   * @returns ulid\n   */\n\n\n  AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n    if (!monotonicFactoriesMap.has(storeName)) {\n      monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n    }\n\n    return monotonicFactoriesMap.get(storeName);\n  };\n\n  AsyncStorageDatabase.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n\n      var e_1, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            this._collectionInMemoryIndex.clear();\n\n            return [4\n            /*yield*/\n            , this.storage.getAllKeys()];\n\n          case 1:\n            allKeys = _c.sent();\n            keysForCollectionEntries = [];\n            _c.label = 2;\n\n          case 2:\n            _c.trys.push([2, 12, 13, 14]);\n\n            allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n            _c.label = 3;\n\n          case 3:\n            if (!!allKeys_1_1.done) return [3\n            /*break*/\n            , 11];\n            key = allKeys_1_1.value;\n            _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n            if (!(dbName === DB_NAME)) return [3\n            /*break*/\n            , 10];\n            if (!(recordType === DATA)) return [3\n            /*break*/\n            , 9];\n            ulid = void 0;\n            if (!(id === undefined)) return [3\n            /*break*/\n            , 7];\n            id_1 = ulidOrId;\n            newUlid = this.getMonotonicFactory(storeName)();\n            oldKey = this.getLegacyKeyForItem(storeName, id_1);\n            newKey = this.getKeyForItem(storeName, id_1, newUlid);\n            return [4\n            /*yield*/\n            , this.storage.getItem(oldKey)];\n\n          case 4:\n            item = _c.sent();\n            return [4\n            /*yield*/\n            , this.storage.setItem(newKey, item)];\n\n          case 5:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , this.storage.removeItem(oldKey)];\n\n          case 6:\n            _c.sent();\n\n            ulid = newUlid;\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            ulid = ulidOrId;\n            _c.label = 8;\n\n          case 8:\n            this.getCollectionIndex(storeName).set(id, ulid);\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            if (recordType === COLLECTION) {\n              keysForCollectionEntries.push(key);\n            }\n\n            _c.label = 10;\n\n          case 10:\n            allKeys_1_1 = allKeys_1.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 11:\n            return [3\n            /*break*/\n            , 14];\n\n          case 12:\n            e_1_1 = _c.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            try {\n              if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            if (!(keysForCollectionEntries.length > 0)) return [3\n            /*break*/\n            , 16];\n            return [4\n            /*yield*/\n            , this.storage.multiRemove(keysForCollectionEntries)];\n\n          case 15:\n            _c.sent();\n\n            _c.label = 16;\n\n          case 16:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.save = function (item, storeName, keys, keyValuesPath) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var idxName, ulid, itemKey;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            idxName = indexNameFromKeys(keys);\n            ulid = ((_a = this.getCollectionIndex(storeName)) === null || _a === void 0 ? void 0 : _a.get(idxName)) || this.getMonotonicFactory(storeName)();\n            itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid); // Set key in collection index\n\n            (_b = this.getCollectionIndex(storeName)) === null || _b === void 0 ? void 0 : _b.set(keyValuesPath, ulid); // Save item in db\n\n            return [4\n            /*yield*/\n            , this.storage.setItem(itemKey, JSON.stringify(item))];\n\n          case 1:\n            // Save item in db\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.batchSave = function (storeName, items, keys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, _loop_1, this_1, items_1, items_1_1, item, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n\n      var e_2, _a, e_3, _b;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            result = [];\n            collection = this.getCollectionIndex(storeName);\n            keysToDelete = new Set();\n            keysToSave = new Set();\n            allItemsKeys = [];\n            itemsMap = {};\n\n            _loop_1 = function (item) {\n              // Extract keys from concatenated key path, map to item values\n              var keyValues = keys.map(function (field) {\n                return item[field];\n              });\n              var _deleted = item._deleted; // If id is in the store, retrieve, otherwise generate new ULID\n\n              var ulid = collection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) || this_1.getMonotonicFactory(storeName)(); // Generate the \"longer key\" for the item\n\n              var key = this_1.getKeyForItem(storeName, keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR), ulid);\n              allItemsKeys.push(key);\n              itemsMap[key] = {\n                ulid: ulid,\n                model: item\n              };\n\n              if (_deleted) {\n                keysToDelete.add(key);\n              } else {\n                keysToSave.add(key);\n              }\n            };\n\n            this_1 = this;\n\n            try {\n              /* Populate allItemKeys, keysToDelete, and keysToSave */\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n\n                _loop_1(item);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.storage.multiGet(allItemsKeys)];\n\n          case 1:\n            existingRecordsMap = _c.sent();\n            existingRecordsKeys = existingRecordsMap.filter(function (_a) {\n              var _b = __read(_a, 2),\n                  v = _b[1];\n\n              return !!v;\n            }).reduce(function (set, _a) {\n              var _b = __read(_a, 1),\n                  k = _b[0];\n\n              return set.add(k);\n            }, new Set()); // Delete\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              if (keysToDelete.size === 0) {\n                resolve();\n                return;\n              }\n\n              var keysToDeleteArray = Array.from(keysToDelete);\n              keysToDeleteArray.forEach(function (key) {\n                // key: full db key\n                // keys: PK and/or SK keys\n                var primaryKeyValues = keys.map(function (field) {\n                  return itemsMap[key].model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.delete(primaryKeyValues);\n              });\n\n              _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n\n          case 2:\n            // Delete\n            _c.sent(); // Save\n\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              if (keysToSave.size === 0) {\n                resolve();\n                return;\n              }\n\n              var entriesToSet = Array.from(keysToSave).map(function (key) {\n                return [key, JSON.stringify(itemsMap[key].model)];\n              });\n              keysToSave.forEach(function (key) {\n                var _a = itemsMap[key],\n                    model = _a.model,\n                    ulid = _a.ulid; // Retrieve values from model, use as key for collection index\n\n                var keyValues = keys.map(function (field) {\n                  return model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.set(keyValues, ulid);\n              });\n\n              _this.storage.multiSet(entriesToSet, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n\n          case 3:\n            // Save\n            _c.sent();\n\n            try {\n              for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                key = allItemsKeys_1_1.value;\n\n                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                  result.push([itemsMap[key].model, OpType.DELETE]);\n                } else if (keysToSave.has(key)) {\n                  result.push([itemsMap[key].model, existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT]);\n                }\n              }\n            } catch (e_3_1) {\n              e_3 = {\n                error: e_3_1\n              };\n            } finally {\n              try {\n                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n              } finally {\n                if (e_3) throw e_3.error;\n              }\n            }\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.get = function (keyValuePath, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey, recordAsString, record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(keyValuePath);\n            itemKey = this.getKeyForItem(storeName, keyValuePath, ulid);\n            return [4\n            /*yield*/\n            , this.storage.getItem(itemKey)];\n\n          case 1:\n            recordAsString = _a.sent();\n            record = recordAsString && JSON.parse(recordAsString);\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = __read(firstOrLast === QueryOne.FIRST ? function () {\n              var e_4, _a, _b;\n\n              var id, ulid;\n\n              try {\n                for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                  _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                  break;\n                } // Get first element of the set\n\n              } catch (e_4_1) {\n                e_4 = {\n                  error: e_4_1\n                };\n              } finally {\n                try {\n                  if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                } finally {\n                  if (e_4) throw e_4.error;\n                }\n              }\n\n              return [id, ulid];\n            }() : function () {\n              var e_5, _a, _b;\n\n              var id, ulid;\n\n              try {\n                for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                  _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                  ;\n                } // Get last element of the set\n\n              } catch (e_5_1) {\n                e_5 = {\n                  error: e_5_1\n                };\n              } finally {\n                try {\n                  if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                } finally {\n                  if (e_5) throw e_5.error;\n                }\n              }\n\n              return [id, ulid];\n            }(), 2), itemId = _a[0], ulid = _a[1];\n            itemKey = this.getKeyForItem(storeName, itemId, ulid);\n            _b = itemKey;\n            if (!_b) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.storage.getItem(itemKey)];\n\n          case 1:\n            _b = _c.sent();\n            _c.label = 2;\n\n          case 2:\n            itemString = _b;\n            result = itemString ? JSON.parse(itemString) || undefined : undefined;\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * This function gets all the records stored in async storage for a particular storeName\n   * It then loads all the records for that filtered set of keys using multiGet()\n   */\n\n\n  AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n\n      var e_6, _e;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n            start = Math.max(0, page * limit) || 0;\n            end = limit > 0 ? start + limit : undefined;\n            keysForStore = [];\n            count = 0;\n\n            try {\n              for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                count++;\n\n                if (count <= start) {\n                  continue;\n                }\n\n                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n\n                if (count === end) {\n                  break;\n                }\n              }\n            } catch (e_6_1) {\n              e_6 = {\n                error: e_6_1\n              };\n            } finally {\n              try {\n                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n              } finally {\n                if (e_6) throw e_6.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.storage.multiGet(keysForStore)];\n\n          case 1:\n            storeRecordStrings = _f.sent();\n            records = storeRecordStrings.filter(function (_a) {\n              var _b = __read(_a, 2),\n                  value = _b[1];\n\n              return value;\n            }).map(function (_a) {\n              var _b = __read(_a, 2),\n                  value = _b[1];\n\n              return JSON.parse(value);\n            });\n            return [2\n            /*return*/\n            , records];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.delete = function (key, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(key);\n            itemKey = this.getKeyForItem(storeName, key, ulid);\n            this.getCollectionIndex(storeName).delete(key);\n            return [4\n            /*yield*/\n            , this.storage.removeItem(itemKey)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Clear the AsyncStorage of all DataStore entries\n   */\n\n\n  AsyncStorageDatabase.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, allDataStoreKeys;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.storage.getAllKeys()];\n\n          case 1:\n            allKeys = _a.sent();\n            allDataStoreKeys = allKeys.filter(function (key) {\n              return key.startsWith(DB_NAME);\n            });\n            return [4\n            /*yield*/\n            , this.storage.multiRemove(allDataStoreKeys)];\n\n          case 2:\n            _a.sent();\n\n            this._collectionInMemoryIndex.clear();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n  };\n\n  AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n  };\n\n  AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n    return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n  };\n\n  return AsyncStorageDatabase;\n}();\n\nexport default AsyncStorageDatabase;","map":{"version":3,"mappings":"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","names":["OpType","QueryOne","DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR","indexNameFromKeys","monotonicUlidFactory","createInMemoryStore","DB_NAME","COLLECTION","DATA","monotonicFactoriesMap","Map","AsyncStorageDatabase","storeName","_collectionInMemoryIndex","has","set","get","clear","storage","getAllKeys","allKeys","_c","keysForCollectionEntries","allKeys_1","allKeys_1_1","key","_a","split","dbName","recordType","ulidOrId","id","ulid","undefined","id_1","newUlid","getMonotonicFactory","oldKey","getLegacyKeyForItem","newKey","getKeyForItem","getItem","item","setItem","removeItem","getCollectionIndex","push","length","multiRemove","keys","keyValuesPath","idxName","itemKey","_b","JSON","stringify","items","result","collection","keysToDelete","Set","keysToSave","allItemsKeys","itemsMap","keyValues","map","field","join","this_1","model","_deleted","add","items_1","items_1_1","multiGet","existingRecordsMap","existingRecordsKeys","filter","v","reduce","k","Promise","resolve","reject","size","keysToDeleteArray","Array","from","forEach","primaryKeyValues","delete","_this","errors","entriesToSet","multiSet","allItemsKeys_1","allItemsKeys_1_1","DELETE","UPDATE","INSERT","keyValuePath","recordAsString","record","parse","firstOrLast","FIRST","collection_1_1","collection_2_1","itemId","itemString","pagination","page","limit","start","Math","max","end","keysForStore","count","collection_3","collection_3_1","_d","storeRecordStrings","_f","records","value","allDataStoreKeys","startsWith","getKeyPrefixForStoreItems"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/storage/adapter/AsyncStorageDatabase.ts"],"sourcesContent":["import { ULID } from 'ulid';\nimport {\n\tModelInstanceMetadata,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tQueryOne,\n} from '../../types';\nimport {\n\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR,\n\tindexNameFromKeys,\n\tmonotonicUlidFactory,\n} from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\n\nconst DB_NAME = '@AmplifyDatastore';\nconst COLLECTION = 'Collection';\nconst DATA = 'Data';\n\nconst monotonicFactoriesMap = new Map<string, ULID>();\n\nclass AsyncStorageDatabase {\n\t/**\n\t * Maps storeNames to a map of ulid->id\n\t */\n\tprivate _collectionInMemoryIndex = new Map<string, Map<string, string>>();\n\n\tprivate storage = createInMemoryStore();\n\n\t/**\n\t * Collection index is map of stores (i.e. sync, metadata, mutation event, and data)\n\t * @param storeName {string} - Name of the store\n\t * @returns Map of ulid->id\n\t */\n\tprivate getCollectionIndex(storeName: string) {\n\t\tif (!this._collectionInMemoryIndex.has(storeName)) {\n\t\t\tthis._collectionInMemoryIndex.set(storeName, new Map());\n\t\t}\n\n\t\treturn this._collectionInMemoryIndex.get(storeName);\n\t}\n\n\t/**\n\t * Return ULID for store if it exists, otherwise create a new one\n\t * @param storeName {string} - Name of the store\n\t * @returns ulid\n\t */\n\tprivate getMonotonicFactory(storeName: string): ULID {\n\t\tif (!monotonicFactoriesMap.has(storeName)) {\n\t\t\tmonotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n\t\t}\n\n\t\treturn monotonicFactoriesMap.get(storeName)!;\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis._collectionInMemoryIndex.clear();\n\n\t\tconst allKeys: string[] = await this.storage.getAllKeys();\n\n\t\tconst keysForCollectionEntries: string[] = [];\n\n\t\tfor (const key of allKeys) {\n\t\t\tconst [dbName, storeName, recordType, ulidOrId, id] = key.split('::');\n\n\t\t\tif (dbName === DB_NAME) {\n\t\t\t\tif (recordType === DATA) {\n\t\t\t\t\tlet ulid: string;\n\n\t\t\t\t\tif (id === undefined) {\n\t\t\t\t\t\t// It is an old entry (without ulid). Need to migrate to new key format\n\n\t\t\t\t\t\tconst id = ulidOrId;\n\n\t\t\t\t\t\tconst newUlid = this.getMonotonicFactory(storeName)();\n\n\t\t\t\t\t\tconst oldKey = this.getLegacyKeyForItem(storeName, id);\n\t\t\t\t\t\tconst newKey = this.getKeyForItem(storeName, id, newUlid);\n\n\t\t\t\t\t\tconst item = await this.storage.getItem(oldKey);\n\n\t\t\t\t\t\tawait this.storage.setItem(newKey, item!);\n\t\t\t\t\t\tawait this.storage.removeItem(oldKey);\n\n\t\t\t\t\t\tulid = newUlid;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tulid = ulidOrId;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getCollectionIndex(storeName)!.set(id, ulid);\n\t\t\t\t} else if (recordType === COLLECTION) {\n\t\t\t\t\tkeysForCollectionEntries.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (keysForCollectionEntries.length > 0) {\n\t\t\tawait this.storage.multiRemove(keysForCollectionEntries);\n\t\t}\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\titem: T,\n\t\tstoreName: string,\n\t\tkeys: string[],\n\t\tkeyValuesPath: string\n\t) {\n\t\tconst idxName = indexNameFromKeys(keys);\n\n\t\tconst ulid =\n\t\t\tthis.getCollectionIndex(storeName)?.get(idxName) ||\n\t\t\tthis.getMonotonicFactory(storeName)();\n\n\t\t// Retrieve db key for item\n\t\tconst itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid);\n\n\t\t// Set key in collection index\n\t\tthis.getCollectionIndex(storeName)?.set(keyValuesPath, ulid);\n\n\t\t// Save item in db\n\t\tawait this.storage.setItem(itemKey, JSON.stringify(item));\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\titems: ModelInstanceMetadata[],\n\t\tkeys: string[]\n\t): Promise<[T, OpType][]> {\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst collection = this.getCollectionIndex(storeName)!;\n\n\t\tconst keysToDelete = new Set<string>();\n\t\tconst keysToSave = new Set<string>();\n\t\tconst allItemsKeys: string[] = [];\n\t\tconst itemsMap: Record<string, { ulid: string; model: T }> = {};\n\n\t\t/* Populate allItemKeys, keysToDelete, and keysToSave */\n\t\tfor (const item of items) {\n\t\t\t// Extract keys from concatenated key path, map to item values\n\t\t\tconst keyValues = keys.map(field => item[field]);\n\n\t\t\tconst { _deleted } = item;\n\n\t\t\t// If id is in the store, retrieve, otherwise generate new ULID\n\t\t\tconst ulid =\n\t\t\t\tcollection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) ||\n\t\t\t\tthis.getMonotonicFactory(storeName)();\n\n\t\t\t// Generate the \"longer key\" for the item\n\t\t\tconst key = this.getKeyForItem(\n\t\t\t\tstoreName,\n\t\t\t\tkeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR),\n\t\t\t\tulid\n\t\t\t);\n\n\t\t\tallItemsKeys.push(key);\n\t\t\titemsMap[key] = { ulid, model: <T>(<unknown>item) };\n\n\t\t\tif (_deleted) {\n\t\t\t\tkeysToDelete.add(key);\n\t\t\t} else {\n\t\t\t\tkeysToSave.add(key);\n\t\t\t}\n\t\t}\n\n\t\tconst existingRecordsMap: [string, string][] = await this.storage.multiGet(\n\t\t\tallItemsKeys\n\t\t);\n\t\tconst existingRecordsKeys = existingRecordsMap\n\t\t\t.filter(([, v]) => !!v)\n\t\t\t.reduce((set, [k]) => set.add(k), new Set<string>());\n\n\t\t// Delete\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tif (keysToDelete.size === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst keysToDeleteArray = Array.from(keysToDelete);\n\n\t\t\tkeysToDeleteArray.forEach(key => {\n\t\t\t\t// key: full db key\n\t\t\t\t// keys: PK and/or SK keys\n\t\t\t\tconst primaryKeyValues: string = keys\n\t\t\t\t\t.map(field => itemsMap[key].model[field])\n\t\t\t\t\t.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n\n\t\t\t\tcollection.delete(primaryKeyValues);\n\t\t\t});\n\n\t\t\tthis.storage.multiRemove(keysToDeleteArray, (errors?: Error[]) => {\n\t\t\t\tif (errors && errors.length > 0) {\n\t\t\t\t\treject(errors);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Save\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tif (keysToSave.size === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst entriesToSet = Array.from(keysToSave).map(key => [\n\t\t\t\tkey,\n\t\t\t\tJSON.stringify(itemsMap[key].model),\n\t\t\t]);\n\n\t\t\tkeysToSave.forEach(key => {\n\t\t\t\tconst { model, ulid } = itemsMap[key];\n\n\t\t\t\t// Retrieve values from model, use as key for collection index\n\t\t\t\tconst keyValues: string = keys\n\t\t\t\t\t.map(field => model[field])\n\t\t\t\t\t.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n\n\t\t\t\tcollection.set(keyValues, ulid);\n\t\t\t});\n\n\t\t\tthis.storage.multiSet(entriesToSet, (errors?: Error[]) => {\n\t\t\t\tif (errors && errors.length > 0) {\n\t\t\t\t\treject(errors);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tfor (const key of allItemsKeys) {\n\t\t\tif (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n\t\t\t\tresult.push([itemsMap[key].model, OpType.DELETE]);\n\t\t\t} else if (keysToSave.has(key)) {\n\t\t\t\tresult.push([\n\t\t\t\t\titemsMap[key].model,\n\t\t\t\t\texistingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync get<T extends PersistentModel>(\n\t\tkeyValuePath: string,\n\t\tstoreName: string\n\t): Promise<T> {\n\t\tconst ulid = this.getCollectionIndex(storeName)!.get(keyValuePath)!;\n\t\tconst itemKey = this.getKeyForItem(storeName, keyValuePath, ulid);\n\t\tconst recordAsString = await this.storage.getItem(itemKey);\n\t\tconst record = recordAsString && JSON.parse(recordAsString);\n\t\treturn record;\n\t}\n\n\tasync getOne(firstOrLast: QueryOne, storeName: string) {\n\t\tconst collection = this.getCollectionIndex(storeName)!;\n\n\t\tconst [itemId, ulid] =\n\t\t\tfirstOrLast === QueryOne.FIRST\n\t\t\t\t? (() => {\n\t\t\t\t\t\tlet id: string, ulid: string;\n\t\t\t\t\t\tfor ([id, ulid] of collection) break; // Get first element of the set\n\t\t\t\t\t\treturn [id!, ulid!];\n\t\t\t\t  })()\n\t\t\t\t: (() => {\n\t\t\t\t\t\tlet id: string, ulid: string;\n\t\t\t\t\t\tfor ([id, ulid] of collection); // Get last element of the set\n\t\t\t\t\t\treturn [id!, ulid!];\n\t\t\t\t  })();\n\t\tconst itemKey = this.getKeyForItem(storeName, itemId, ulid);\n\n\t\tconst itemString = itemKey && (await this.storage.getItem(itemKey));\n\n\t\tconst result = itemString ? JSON.parse(itemString) || undefined : undefined;\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * This function gets all the records stored in async storage for a particular storeName\n\t * It then loads all the records for that filtered set of keys using multiGet()\n\t */\n\tasync getAll<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tconst collection = this.getCollectionIndex(storeName)!;\n\n\t\tconst { page = 0, limit = 0 } = pagination || {};\n\t\tconst start = Math.max(0, page * limit) || 0;\n\t\tconst end = limit > 0 ? start + limit : undefined;\n\n\t\tconst keysForStore: string[] = [];\n\t\tlet count = 0;\n\t\tfor (const [id, ulid] of collection) {\n\t\t\tcount++;\n\n\t\t\tif (count <= start) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tkeysForStore.push(this.getKeyForItem(storeName, id, ulid));\n\n\t\t\tif (count === end) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst storeRecordStrings = await this.storage.multiGet(keysForStore);\n\t\tconst records = storeRecordStrings\n\t\t\t.filter(([, value]) => value)\n\t\t\t.map(([, value]) => JSON.parse(value));\n\n\t\treturn records;\n\t}\n\n\tasync delete(key: string, storeName: string) {\n\t\tconst ulid = this.getCollectionIndex(storeName)!.get(key)!;\n\t\tconst itemKey = this.getKeyForItem(storeName, key, ulid);\n\t\tthis.getCollectionIndex(storeName)!.delete(key);\n\t\tawait this.storage.removeItem(itemKey);\n\t}\n\n\t/**\n\t * Clear the AsyncStorage of all DataStore entries\n\t */\n\tasync clear() {\n\t\tconst allKeys = await this.storage.getAllKeys();\n\t\tconst allDataStoreKeys = allKeys.filter(key => key.startsWith(DB_NAME));\n\t\tawait this.storage.multiRemove(allDataStoreKeys);\n\t\tthis._collectionInMemoryIndex.clear();\n\t}\n\n\tprivate getKeyForItem(storeName: string, id: string, ulid: string): string {\n\t\treturn `${this.getKeyPrefixForStoreItems(storeName)}::${ulid}::${id}`;\n\t}\n\n\tprivate getLegacyKeyForItem(storeName: string, id: string): string {\n\t\treturn `${this.getKeyPrefixForStoreItems(storeName)}::${id}`;\n\t}\n\n\tprivate getKeyPrefixForStoreItems(storeName: string): string {\n\t\treturn `${DB_NAME}::${storeName}::${DATA}`;\n\t}\n}\n\nexport default AsyncStorageDatabase;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { OpType } from '../types';\nimport { getIdentifierValue } from './utils'; // https://github.com/aws-amplify/amplify-js/blob/datastore-docs/packages/datastore/docs/sync-engine.md#merger\n\nvar ModelMerger =\n/** @class */\nfunction () {\n  function ModelMerger(outbox, ownSymbol) {\n    this.outbox = outbox;\n    this.ownSymbol = ownSymbol;\n  }\n  /**\n   *\n   * @param storage Storage adapter that contains the data.\n   * @param model The model from an outbox mutation.\n   * @returns The type of operation (INSERT/UPDATE/DELETE)\n   */\n\n\n  ModelMerger.prototype.merge = function (storage, model, modelDefinition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, mutationsForModel, isDelete;\n\n      var _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.outbox.getForModel(storage, model, modelDefinition)];\n\n          case 1:\n            mutationsForModel = _c.sent();\n            isDelete = model._deleted;\n            if (!(mutationsForModel.length === 0)) return [3\n            /*break*/\n            , 5];\n            if (!isDelete) return [3\n            /*break*/\n            , 3];\n            result = OpType.DELETE;\n            return [4\n            /*yield*/\n            , storage.delete(model, undefined, this.ownSymbol)];\n\n          case 2:\n            _c.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , storage.save(model, undefined, this.ownSymbol)];\n\n          case 4:\n            _a = __read.apply(void 0, [_c.sent(), 1]), _b = __read(_a[0], 2), result = _b[1];\n            _c.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  ModelMerger.prototype.mergePage = function (storage, modelConstructor, items, modelDefinition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var itemsMap, items_1, items_1_1, item, modelId, page;\n\n      var e_1, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            itemsMap = new Map();\n\n            try {\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n                modelId = getIdentifierValue(modelDefinition, item);\n                itemsMap.set(modelId, item);\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n\n            page = __spread(itemsMap.values());\n            return [4\n            /*yield*/\n            , storage.batchSave(modelConstructor, page, this.ownSymbol)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  return ModelMerger;\n}();\n\nexport { ModelMerger };","map":{"version":3,"mappings":";AACA,SAECA,MAFD,QAKO,UALP;AAOA,SAASC,kBAAT,QAAmC,SAAnC,C,CAEA;;AACA;AAAA;AAAA;AACC,uBACkBC,MADlB,EAEkBC,SAFlB,EAEmC;AADjB;AACA;AACd;AAEJ;;;;;;;;AAMaC,gCAAb,UACCC,OADD,EAECC,KAFD,EAGCC,eAHD,EAG6B;;;;;;;;;AAGF;AAAA;AAAA,cAAM,KAAKL,MAAL,CAAYM,WAAZ,CAC/BH,OAD+B,EAE/BC,KAF+B,EAG/BC,eAH+B,CAAN;;;AAApBE,6BAAiB,GAAGC,SAApB;AAMAC,oBAAQ,GAAGL,KAAK,CAACM,QAAjB;kBAEFH,iBAAiB,CAACI,MAAlB,KAA6B,IAA7B;AAAA;AAAA;iBACCF;AAAA;AAAA;AACHG,kBAAM,GAAGd,MAAM,CAACe,MAAhB;AACA;AAAA;AAAA,cAAMV,OAAO,CAACW,MAAR,CAAeV,KAAf,EAAsBW,SAAtB,EAAiC,KAAKd,SAAtC,CAAN;;;AAAAO;;;;;;;AAEe;AAAA;AAAA,cAAML,OAAO,CAACa,IAAR,CAAaZ,KAAb,EAAoBW,SAApB,EAA+B,KAAKd,SAApC,CAAN;;;AAAfgB,uDAACC,qBAAD,EAAIN,cAAJ;;;;AAIF;AAAA;AAAA,cAAOA,MAAP;;;;AACA,GAxBY;;AA0BAV,oCAAb,UACCC,OADD,EAECgB,gBAFD,EAGCC,KAHD,EAICf,eAJD,EAI6B;;;;;;;;;AAEtBgB,oBAAQ,GAAuC,IAAIC,GAAJ,EAA/C;;;AAEN,mBAAmBC,2BAAKC,0BAAxB,EAAwB,eAAxB,EAAwBA,0BAAxB,EAA0B;AAAfC,oBAAI,kBAAJ;AAEJC,uBAAO,GAAG3B,kBAAkB,CAACM,eAAD,EAAkBoB,IAAlB,CAA5B;AAENJ,wBAAQ,CAACM,GAAT,CAAaD,OAAb,EAAsBD,IAAtB;AACA;;;;;;;;;;;;;AAEKG,gBAAI,YAAOP,QAAQ,CAACQ,MAAT,EAAP,CAAJ;AAEC;AAAA;AAAA,cAAM1B,OAAO,CAAC2B,SAAR,CAAkBX,gBAAlB,EAAoCS,IAApC,EAA0C,KAAK3B,SAA/C,CAAN;;;AAAP;AAAA;AAAA,cAAOiB,SAAP;;;;AACA,GAlBY;;AAmBd;AAAC,CAzDD;;AA2DA,SAAShB,WAAT","names":["OpType","getIdentifierValue","outbox","ownSymbol","ModelMerger","storage","model","modelDefinition","getForModel","mutationsForModel","_c","isDelete","_deleted","length","result","DELETE","delete","undefined","save","_a","_b","modelConstructor","items","itemsMap","Map","items_1","items_1_1","item","modelId","set","page","values","batchSave"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/sync/merger.ts"],"sourcesContent":["import { Storage } from '../storage/storage';\nimport {\n\tModelInstanceMetadata,\n\tOpType,\n\tPersistentModelConstructor,\n\tSchemaModel,\n} from '../types';\nimport { MutationEventOutbox } from './outbox';\nimport { getIdentifierValue } from './utils';\n\n// https://github.com/aws-amplify/amplify-js/blob/datastore-docs/packages/datastore/docs/sync-engine.md#merger\nclass ModelMerger {\n\tconstructor(\n\t\tprivate readonly outbox: MutationEventOutbox,\n\t\tprivate readonly ownSymbol: Symbol\n\t) {}\n\n\t/**\n\t *\n\t * @param storage Storage adapter that contains the data.\n\t * @param model The model from an outbox mutation.\n\t * @returns The type of operation (INSERT/UPDATE/DELETE)\n\t */\n\tpublic async merge<T extends ModelInstanceMetadata>(\n\t\tstorage: Storage,\n\t\tmodel: T,\n\t\tmodelDefinition: SchemaModel\n\t): Promise<OpType> {\n\t\tlet result: OpType;\n\t\tconst mutationsForModel = await this.outbox.getForModel(\n\t\t\tstorage,\n\t\t\tmodel,\n\t\t\tmodelDefinition\n\t\t);\n\n\t\tconst isDelete = model._deleted;\n\n\t\tif (mutationsForModel.length === 0) {\n\t\t\tif (isDelete) {\n\t\t\t\tresult = OpType.DELETE;\n\t\t\t\tawait storage.delete(model, undefined, this.ownSymbol);\n\t\t\t} else {\n\t\t\t\t[[, result]] = await storage.save(model, undefined, this.ownSymbol);\n\t\t\t}\n\t\t}\n\n\t\treturn result!;\n\t}\n\n\tpublic async mergePage(\n\t\tstorage: Storage,\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[],\n\t\tmodelDefinition: SchemaModel\n\t): Promise<[ModelInstanceMetadata, OpType][]> {\n\t\tconst itemsMap: Map<string, ModelInstanceMetadata> = new Map();\n\n\t\tfor (const item of items) {\n\t\t\t// merge items by model id. Latest record for a given id remains.\n\t\t\tconst modelId = getIdentifierValue(modelDefinition, item);\n\n\t\t\titemsMap.set(modelId, item);\n\t\t}\n\n\t\tconst page = [...itemsMap.values()];\n\n\t\treturn await storage.batchSave(modelConstructor, page, this.ownSymbol);\n\t}\n}\n\nexport { ModelMerger };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, browserOrNode } from '@aws-amplify/core';\nimport { PersonalizeEventsClient, PutEventsCommand } from '@aws-sdk/client-personalize-events';\nimport { SessionInfoManager, MediaAutoTrack } from './AmazonPersonalizeHelper';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nvar logger = new Logger('AmazonPersonalizeProvider'); // events buffer\n\nvar FLUSH_SIZE = 5;\nvar FLUSH_SIZE_THRESHHOLD = 10;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar IDENTIFY_EVENT = 'Identify';\n\nvar AmazonPersonalizeProvider =\n/** @class */\nfunction () {\n  function AmazonPersonalizeProvider(config) {\n    this._buffer = [];\n    this._config = config ? config : {};\n    this._config.flushSize = this._config.flushSize > 0 && this._config.flushSize <= FLUSH_SIZE_THRESHHOLD ? this._config.flushSize : FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._sessionManager = new SessionInfoManager();\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._isBrowser = browserOrNode().isBrowser; // flush event buffer\n\n    this._setupTimer();\n  }\n\n  AmazonPersonalizeProvider.prototype._setupTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var flushInterval = this._config.flushInterval;\n    var that = this;\n    this._timer = setInterval(function () {\n      that._sendFromBuffer();\n    }, flushInterval);\n  };\n  /**\n   * Record event\n   * @param eventType      - type of the event action. e.g. \"Click\"\n   * @param properties     - properties of the event\n   * @return Promise\n   */\n\n\n  AmazonPersonalizeProvider.prototype.record = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, eventType, properties, requestParams, isLoaded;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _b.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials,\n              sentAt: new Date()\n            });\n            _a = params.event, eventType = _a.eventType, properties = _a.properties;\n\n            if (eventType === IDENTIFY_EVENT) {\n              this._sessionManager.updateSessionInfo(properties && properties.userId ? properties.userId : '', this._sessionInfo);\n\n              return [2\n              /*return*/\n              ];\n            } else if (!isEmpty(params.event.userId)) {\n              this._sessionManager.updateSessionInfo(params.event.userId, this._sessionInfo);\n            }\n\n            requestParams = this.generateRequestParams(params, this._sessionInfo);\n            if (!(eventType === 'MediaAutoTrack')) return [3\n            /*break*/\n            , 7];\n            if (!this._isBrowser) return [3\n            /*break*/\n            , 5];\n            if (!!isEmpty(get(requestParams, 'eventData.properties.domElementId', null))) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.isElementFullyLoaded(this.loadElement, requestParams.eventData.properties['domElementId'], 500, 5)];\n\n          case 2:\n            isLoaded = _b.sent();\n\n            if (isLoaded) {\n              new MediaAutoTrack(requestParams, this);\n            } else {\n              logger.debug('Cannot find the media element.');\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            logger.debug(\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\");\n            _b.label = 4;\n\n          case 4:\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            logger.debug('MediaAutoTrack only for browser');\n            _b.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            , this.putToBuffer(requestParams)];\n        }\n      });\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.loadElement = function (domId) {\n    return new Promise(function (resolve, reject) {\n      if (document.getElementById(domId) && document.getElementById(domId).clientHeight) {\n        return resolve(true);\n      } else {\n        return reject(true);\n      }\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.isElementFullyLoaded = function (operation, params, delay, times) {\n    var _this = this;\n\n    var wait = function (ms) {\n      return new Promise(function (r) {\n        return setTimeout(r, ms);\n      });\n    };\n\n    return new Promise(function (resolve, reject) {\n      return operation(params).then(resolve).catch(function (reason) {\n        if (times - 1 > 0) {\n          return wait(delay).then(_this.isElementFullyLoaded.bind(null, operation, params, delay, times - 1)).then(resolve).catch(reject);\n        }\n\n        return reject(reason);\n      });\n    });\n  };\n  /**\n   * get the category of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getProviderName = function () {\n    return 'AmazonPersonalize';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AmazonPersonalizeProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config ? config : {};\n    this._config = Object.assign({}, this._config, conf);\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._setupTimer();\n\n    return this._config;\n  };\n  /**\n   * Generate the requestParams from customer input params and sessionInfo\n   * @private\n   * @param eventData      - customer input for event data\n   * @param api            - api name\n   * @return RequestParams - wrapper object with all information required for make request\n   */\n\n\n  AmazonPersonalizeProvider.prototype.generateRequestParams = function (params, sessionInfo) {\n    var requestParams = {};\n    var _a = params.event,\n        eventType = _a.eventType,\n        properties = _a.properties;\n    requestParams.eventData = {\n      eventType: eventType,\n      properties: properties\n    };\n    requestParams.sessionInfo = sessionInfo;\n    requestParams.sentAt = params.sentAt;\n    requestParams.credentials = params.credentials;\n    requestParams.config = params.config;\n    return requestParams;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendEvents = function (group) {\n    var groupLen = group.length;\n\n    if (groupLen === 0) {\n      logger.debug('events array is empty, directly return');\n      return;\n    }\n\n    var _a = group[0],\n        config = _a.config,\n        credentials = _a.credentials,\n        sessionInfo = _a.sessionInfo;\n\n    var initClients = this._init(config, credentials);\n\n    if (!initClients) return false;\n\n    if (groupLen > 0) {\n      var events = [];\n\n      for (var i = 0; i < groupLen; i += 1) {\n        var params = group.shift();\n\n        var eventPayload = this._generateSingleRecordPayload(params, sessionInfo);\n\n        events.push(eventPayload);\n      }\n\n      var payload_1 = {};\n      payload_1.trackingId = sessionInfo.trackingId;\n      payload_1.sessionId = sessionInfo.sessionId;\n      payload_1.userId = sessionInfo.userId;\n      payload_1.eventList = [];\n      events.forEach(function (event) {\n        // @ts-ignore\n        payload_1.eventList.push(event);\n      });\n      var command = new PutEventsCommand(payload_1);\n\n      this._personalize.send(command, function (err) {\n        if (err) logger.debug('Failed to call putEvents in Personalize', err);else logger.debug('Put events');\n      });\n    }\n  };\n  /**\n   * Put event into buffer\n   * @private\n   * @param params - params for the event recording\n   */\n\n\n  AmazonPersonalizeProvider.prototype.putToBuffer = function (params) {\n    if (this._buffer.length < this._config.flushSize) {\n      this._buffer.push(params);\n    } else {\n      this._buffer.push(params);\n\n      this._sendFromBuffer();\n    }\n\n    return Promise.resolve(true);\n  };\n  /**\n   * flush the buffer and batch sending the request\n   * @private\n   * @param eventsParams - the buffer for cache the payload\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendFromBuffer = function () {\n    var _this = this;\n\n    var size = this._buffer.length;\n    if (size <= 0) return;\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n\n    for (var i = 0; i < size; i += 1) {\n      var currRequestParams = this._buffer.shift();\n\n      var cred = currRequestParams.credentials;\n      var sessionInfo = currRequestParams.sessionInfo;\n\n      if (i === 0) {\n        group.push(currRequestParams);\n        preCred = cred;\n      } else {\n        if (isEqual(sessionInfo, this._sessionInfo) && cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(currRequestParams);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(currRequestParams);\n          preCred = cred;\n          this._sessionInfo = sessionInfo;\n        }\n      }\n    }\n\n    eventsGroups.push(group);\n    eventsGroups.map(function (group) {\n      _this._sendEvents(group);\n    });\n  };\n  /**\n   * Generate the record payload for single event\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._generateSingleRecordPayload = function (params, sessionInfo) {\n    var eventData = params.eventData,\n        sentAt = params.sentAt;\n    var trackPayload = {};\n    trackPayload.sentAt = sentAt;\n    trackPayload.properties = eventData.properties && JSON.stringify(eventData.properties);\n    trackPayload.eventId = this._sessionManager.getTimerKey() + sessionInfo.sessionId;\n    trackPayload.eventType = eventData.eventType;\n    return trackPayload;\n  };\n  /**\n   * Initialize the personalize client\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n\n    if (this._personalize && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n\n    this._config.credentials = credentials;\n    var region = config.region;\n    logger.debug('initialize personalize with credentials', credentials);\n    this._personalize = new PersonalizeEventsClient({\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    return true;\n  };\n  /**\n   * check if current credentials exists\n   * @private\n   */\n\n\n  AmazonPersonalizeProvider.prototype._getCredentials = function () {\n    var that = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', that._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n\n  return AmazonPersonalizeProvider;\n}();\n\nexport { AmazonPersonalizeProvider };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","browserOrNode","PersonalizeEventsClient","PutEventsCommand","SessionInfoManager","MediaAutoTrack","get","isEmpty","isEqual","logger","FLUSH_SIZE","FLUSH_SIZE_THRESHHOLD","FLUSH_INTERVAL","IDENTIFY_EVENT","config","_buffer","_config","flushSize","flushInterval","_sessionManager","trackingId","_sessionInfo","retrieveSessionInfo","_isBrowser","isBrowser","_setupTimer","AmazonPersonalizeProvider","_timer","clearInterval","that","setInterval","_sendFromBuffer","params","_getCredentials","credentials","_b","Promise","resolve","Object","assign","sentAt","Date","_a","event","eventType","properties","updateSessionInfo","userId","requestParams","generateRequestParams","isElementFullyLoaded","loadElement","eventData","isLoaded","debug","putToBuffer","domId","reject","document","getElementById","clientHeight","operation","delay","times","wait","r","ms","then","catch","_this","bind","reason","conf","sessionInfo","group","groupLen","length","initClients","_init","events","i","shift","eventPayload","_generateSingleRecordPayload","push","payload_1","sessionId","eventList","forEach","command","_personalize","send","err","size","eventsGroups","preCred","currRequestParams","cred","sessionToken","identityId","map","_sendEvents","trackPayload","JSON","stringify","eventId","getTimerKey","region","customUserAgent","shear"],"sources":["/home/dalienst/node_modules/@aws-amplify/analytics/src/Providers/AmazonPersonalizeProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n\tbrowserOrNode,\n} from '@aws-amplify/core';\nimport {\n\tPersonalizeEventsClient,\n\tPutEventsCommand,\n\tPutEventsCommandInput,\n} from '@aws-sdk/client-personalize-events';\nimport {\n\tSessionInfo,\n\tRequestParams,\n\tRecordEventPayload,\n\tSessionInfoManager,\n\tMediaAutoTrack,\n} from './AmazonPersonalizeHelper';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { AnalyticsProvider } from '../types';\n\nconst logger = new Logger('AmazonPersonalizeProvider');\n\n// events buffer\nconst FLUSH_SIZE = 5;\nconst FLUSH_SIZE_THRESHHOLD = 10;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\n\nconst IDENTIFY_EVENT = 'Identify';\n\nexport class AmazonPersonalizeProvider implements AnalyticsProvider {\n\tprivate _config;\n\tprivate _personalize;\n\tprivate _buffer;\n\tprivate _timer;\n\tprivate _sessionInfo: SessionInfo;\n\tprivate _sessionManager;\n\tprivate _isBrowser;\n\n\tconstructor(config?) {\n\t\tthis._buffer = [];\n\t\tthis._config = config ? config : {};\n\t\tthis._config.flushSize =\n\t\t\tthis._config.flushSize > 0 &&\n\t\t\tthis._config.flushSize <= FLUSH_SIZE_THRESHHOLD\n\t\t\t\t? this._config.flushSize\n\t\t\t\t: FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._sessionManager = new SessionInfoManager();\n\t\tif (!isEmpty(this._config.trackingId)) {\n\t\t\tthis._sessionInfo = this._sessionManager.retrieveSessionInfo(\n\t\t\t\tthis._config.trackingId\n\t\t\t);\n\t\t}\n\t\tthis._isBrowser = browserOrNode().isBrowser;\n\n\t\t// flush event buffer\n\t\tthis._setupTimer();\n\t}\n\n\tprivate _setupTimer() {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\t\tconst { flushInterval } = this._config;\n\t\tconst that = this;\n\t\tthis._timer = setInterval(() => {\n\t\t\tthat._sendFromBuffer();\n\t\t}, flushInterval);\n\t}\n\n\t/**\n\t * Record event\n\t * @param eventType      - type of the event action. e.g. \"Click\"\n\t * @param properties     - properties of the event\n\t * @return Promise\n\t */\n\tpublic async record(params): Promise<boolean> {\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials) return Promise.resolve(false);\n\n\t\tObject.assign(params, {\n\t\t\tconfig: this._config,\n\t\t\tcredentials,\n\t\t\tsentAt: new Date(),\n\t\t});\n\t\tconst { eventType, properties } = params.event;\n\n\t\tif (eventType === IDENTIFY_EVENT) {\n\t\t\tthis._sessionManager.updateSessionInfo(\n\t\t\t\tproperties && properties.userId ? properties.userId : '',\n\t\t\t\tthis._sessionInfo\n\t\t\t);\n\t\t\treturn;\n\t\t} else if (!isEmpty(params.event.userId)) {\n\t\t\tthis._sessionManager.updateSessionInfo(\n\t\t\t\tparams.event.userId,\n\t\t\t\tthis._sessionInfo\n\t\t\t);\n\t\t}\n\t\tconst requestParams: RequestParams = this.generateRequestParams(\n\t\t\tparams,\n\t\t\tthis._sessionInfo\n\t\t);\n\t\tif (eventType === 'MediaAutoTrack') {\n\t\t\tif (this._isBrowser) {\n\t\t\t\tif (\n\t\t\t\t\t!isEmpty(\n\t\t\t\t\t\tget(requestParams, 'eventData.properties.domElementId', null)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tconst isLoaded = await this.isElementFullyLoaded(\n\t\t\t\t\t\tthis.loadElement,\n\t\t\t\t\t\trequestParams.eventData.properties['domElementId'],\n\t\t\t\t\t\t500,\n\t\t\t\t\t\t5\n\t\t\t\t\t);\n\t\t\t\t\tif (isLoaded) {\n\t\t\t\t\t\tnew MediaAutoTrack(requestParams, this);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug('Cannot find the media element.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.debug('MediaAutoTrack only for browser');\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.putToBuffer(requestParams);\n\t}\n\n\tprivate loadElement(domId): Promise<boolean> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (\n\t\t\t\tdocument.getElementById(domId) &&\n\t\t\t\tdocument.getElementById(domId).clientHeight\n\t\t\t) {\n\t\t\t\treturn resolve(true);\n\t\t\t} else {\n\t\t\t\treturn reject(true);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate isElementFullyLoaded(\n\t\toperation,\n\t\tparams,\n\t\tdelay,\n\t\ttimes\n\t): Promise<boolean> {\n\t\tconst wait = ms => new Promise(r => setTimeout(r, ms));\n\t\treturn new Promise((resolve, reject) => {\n\t\t\treturn operation(params)\n\t\t\t\t.then(resolve)\n\t\t\t\t.catch(reason => {\n\t\t\t\t\tif (times - 1 > 0) {\n\t\t\t\t\t\treturn wait(delay)\n\t\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t\tthis.isElementFullyLoaded.bind(\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\t\tdelay,\n\t\t\t\t\t\t\t\t\ttimes - 1\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.then(resolve)\n\t\t\t\t\t\t\t.catch(reject);\n\t\t\t\t\t}\n\t\t\t\t\treturn reject(reason);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn 'Analytics';\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tpublic getProviderName(): string {\n\t\treturn 'AmazonPersonalize';\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config ? config : {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\t\tif (!isEmpty(this._config.trackingId)) {\n\t\t\tthis._sessionInfo = this._sessionManager.retrieveSessionInfo(\n\t\t\t\tthis._config.trackingId\n\t\t\t);\n\t\t}\n\t\tthis._setupTimer();\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Generate the requestParams from customer input params and sessionInfo\n\t * @private\n\t * @param eventData      - customer input for event data\n\t * @param api            - api name\n\t * @return RequestParams - wrapper object with all information required for make request\n\t */\n\tprivate generateRequestParams(params, sessionInfo): RequestParams {\n\t\tconst requestParams = <RequestParams>{};\n\t\tconst { eventType, properties } = params.event;\n\t\trequestParams.eventData = { eventType, properties };\n\t\trequestParams.sessionInfo = sessionInfo;\n\t\trequestParams.sentAt = params.sentAt;\n\t\trequestParams.credentials = params.credentials;\n\t\trequestParams.config = params.config;\n\t\treturn requestParams;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tprivate _sendEvents(group) {\n\t\tconst groupLen = group.length;\n\t\tif (groupLen === 0) {\n\t\t\tlogger.debug('events array is empty, directly return');\n\t\t\treturn;\n\t\t}\n\n\t\tconst { config, credentials, sessionInfo } = group[0];\n\n\t\tconst initClients = this._init(config, credentials);\n\t\tif (!initClients) return false;\n\t\tif (groupLen > 0) {\n\t\t\tconst events: RecordEventPayload[] = [];\n\t\t\tfor (let i = 0; i < groupLen; i += 1) {\n\t\t\t\tconst params: RequestParams = group.shift();\n\t\t\t\tconst eventPayload: RecordEventPayload =\n\t\t\t\t\tthis._generateSingleRecordPayload(params, sessionInfo);\n\t\t\t\tevents.push(eventPayload);\n\t\t\t}\n\t\t\tconst payload = <PutEventsCommandInput>{};\n\t\t\tpayload.trackingId = sessionInfo.trackingId;\n\t\t\tpayload.sessionId = sessionInfo.sessionId;\n\t\t\tpayload.userId = sessionInfo.userId;\n\t\t\tpayload.eventList = [];\n\t\t\tevents.forEach(event => {\n\t\t\t\t// @ts-ignore\n\t\t\t\tpayload.eventList.push(event);\n\t\t\t});\n\t\t\tconst command: PutEventsCommand = new PutEventsCommand(payload);\n\t\t\tthis._personalize.send(command, err => {\n\t\t\t\tif (err) logger.debug('Failed to call putEvents in Personalize', err);\n\t\t\t\telse logger.debug('Put events');\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Put event into buffer\n\t * @private\n\t * @param params - params for the event recording\n\t */\n\tprivate putToBuffer(params: RequestParams) {\n\t\tif (this._buffer.length < this._config.flushSize) {\n\t\t\tthis._buffer.push(params);\n\t\t} else {\n\t\t\tthis._buffer.push(params);\n\t\t\tthis._sendFromBuffer();\n\t\t}\n\t\treturn Promise.resolve(true);\n\t}\n\n\t/**\n\t * flush the buffer and batch sending the request\n\t * @private\n\t * @param eventsParams - the buffer for cache the payload\n\t */\n\tprivate _sendFromBuffer() {\n\t\tconst size = this._buffer.length;\n\t\tif (size <= 0) return;\n\t\tconst eventsGroups = [];\n\t\tlet preCred = null;\n\t\tlet group = [];\n\t\tfor (let i = 0; i < size; i += 1) {\n\t\t\tconst currRequestParams: RequestParams = this._buffer.shift();\n\t\t\tconst cred = currRequestParams.credentials;\n\t\t\tconst sessionInfo = currRequestParams.sessionInfo;\n\t\t\tif (i === 0) {\n\t\t\t\tgroup.push(currRequestParams);\n\t\t\t\tpreCred = cred;\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tisEqual(sessionInfo, this._sessionInfo) &&\n\t\t\t\t\tcred.sessionToken === preCred.sessionToken &&\n\t\t\t\t\tcred.identityId === preCred.identityId\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('no change for cred, put event in the same group');\n\t\t\t\t\tgroup.push(currRequestParams);\n\t\t\t\t} else {\n\t\t\t\t\teventsGroups.push(group);\n\t\t\t\t\tgroup = [];\n\t\t\t\t\tgroup.push(currRequestParams);\n\t\t\t\t\tpreCred = cred;\n\t\t\t\t\tthis._sessionInfo = sessionInfo;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\teventsGroups.push(group);\n\n\t\teventsGroups.map(group => {\n\t\t\tthis._sendEvents(group);\n\t\t});\n\t}\n\n\t/**\n\t * Generate the record payload for single event\n\t * @private\n\t * @param params - RequestParams\n\t */\n\tprivate _generateSingleRecordPayload(\n\t\tparams: RequestParams,\n\t\tsessionInfo\n\t): RecordEventPayload {\n\t\tconst { eventData, sentAt } = params;\n\t\tconst trackPayload = <RecordEventPayload>{};\n\t\ttrackPayload.sentAt = sentAt;\n\t\ttrackPayload.properties =\n\t\t\teventData.properties && JSON.stringify(eventData.properties);\n\t\ttrackPayload.eventId =\n\t\t\tthis._sessionManager.getTimerKey() + sessionInfo.sessionId;\n\t\ttrackPayload.eventType = eventData.eventType;\n\t\treturn trackPayload;\n\t}\n\n\t/**\n\t * Initialize the personalize client\n\t * @private\n\t * @param params - RequestParams\n\t */\n\tprivate _init(config, credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis._personalize &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for analytics config, directly return from init');\n\t\t\treturn true;\n\t\t}\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = config;\n\t\tlogger.debug('initialize personalize with credentials', credentials);\n\t\tthis._personalize = new PersonalizeEventsClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\treturn true;\n\t}\n\n\t/**\n\t * check if current credentials exists\n\t * @private\n\t */\n\tprivate _getCredentials() {\n\t\tconst that = this;\n\t\treturn Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return null;\n\t\t\t\tlogger.debug('set credentials for analytics', that._config.credentials);\n\t\t\t\treturn Credentials.shear(credentials);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\t\treturn null;\n\t\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * Validate whether a string is an ARN.\n */\n\nexport var validate = function (str) {\n  return typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n};\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\n\nexport var parse = function (arn) {\n  var segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n\n  var _a = __read(segments),\n      //Skip \"arn\" literal\n  partition = _a[1],\n      service = _a[2],\n      region = _a[3],\n      accountId = _a[4],\n      resource = _a.slice(5);\n\n  return {\n    partition: partition,\n    service: service,\n    region: region,\n    accountId: accountId,\n    resource: resource.join(\":\")\n  };\n};\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\n\nexport var build = function (arnObject) {\n  var _a = arnObject.partition,\n      partition = _a === void 0 ? \"aws\" : _a,\n      service = arnObject.service,\n      region = arnObject.region,\n      accountId = arnObject.accountId,\n      resource = arnObject.resource;\n\n  if ([service, region, accountId, resource].some(function (segment) {\n    return typeof segment !== \"string\";\n  })) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n\n  return \"arn:\" + partition + \":\" + service + \":\" + region + \":\" + accountId + \":\" + resource;\n};","map":{"version":3,"mappings":";AAOA;;;;AAGA,OAAO,IAAMA,QAAQ,GAAG,UAACC,GAAD,EAAS;AAC/B,gBAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,OAAJ,CAAY,MAAZ,MAAwB,CAAnD,IAAwDD,GAAG,CAACE,KAAJ,CAAU,GAAV,EAAeC,MAAf,IAAyB,CAAjF;AAAkF,CAD7E;AAGP;;;;AAGA,OAAO,IAAMC,KAAK,GAAG,UAACC,GAAD,EAAY;AAC/B,MAAMC,QAAQ,GAAGD,GAAG,CAACH,KAAJ,CAAU,GAAV,CAAjB;AACA,MAAII,QAAQ,CAACH,MAAT,GAAkB,CAAlB,IAAuBG,QAAQ,CAAC,CAAD,CAAR,KAAgB,KAA3C,EAAkD,MAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;;AAC5C,kBAQFD,QARE;AAAA,MAEJ;AACAE,WAAS,QAHL;AAAA,MAIJC,OAAO,QAJH;AAAA,MAKJC,MAAM,QALF;AAAA,MAMJC,SAAS,QANL;AAAA,MAODC,QAAQ,cAPP;;AAUN,SAAO;AACLJ,aAAS,WADJ;AAELC,WAAO,SAFF;AAGLC,UAAM,QAHD;AAILC,aAAS,WAJJ;AAKLC,YAAQ,EAAEA,QAAQ,CAACC,IAAT,CAAc,GAAd;AALL,GAAP;AAOD,CApBM;AAwBP;;;;AAGA,OAAO,IAAMC,KAAK,GAAG,UAACC,SAAD,EAAwB;AACnC,WAA4DA,SAAS,UAArE;AAAA,eAAS,mBAAG,KAAH,GAAQC,EAAjB;AAAA,MAAmBP,OAAO,GAAkCM,SAAS,QAArE;AAAA,MAA4BL,MAAM,GAA0BK,SAAS,OAArE;AAAA,MAAoCJ,SAAS,GAAeI,SAAS,UAArE;AAAA,MAA+CH,QAAQ,GAAKG,SAAS,SAArE;;AACR,MAAI,CAACN,OAAD,EAAUC,MAAV,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCK,IAAvC,CAA4C,UAACC,OAAD,EAAQ;AAAK,kBAAOA,OAAP,KAAmB,QAAnB;AAA2B,GAApF,CAAJ,EAA2F;AACzF,UAAM,IAAIX,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,SAAO,SAAOC,SAAP,GAAgB,GAAhB,GAAoBC,OAApB,GAA2B,GAA3B,GAA+BC,MAA/B,GAAqC,GAArC,GAAyCC,SAAzC,GAAkD,GAAlD,GAAsDC,QAA7D;AACD,CANM","names":["validate","str","indexOf","split","length","parse","arn","segments","Error","partition","service","region","accountId","resource","join","build","arnObject","_a","some","segment"],"sources":["/home/dalienst/node_modules/@aws-sdk/util-arn-parser/src/index.ts"],"sourcesContent":["export interface ARN {\n  partition: string;\n  service: string;\n  region: string;\n  accountId: string;\n  resource: string;\n}\n/**\n * Validate whether a string is an ARN.\n */\nexport const validate = (str: any): boolean =>\n  typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\nexport const parse = (arn: string): ARN => {\n  const segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n  const [\n    ,\n    //Skip \"arn\" literal\n    partition,\n    service,\n    region,\n    accountId,\n    ...resource\n  ] = segments;\n\n  return {\n    partition,\n    service,\n    region,\n    accountId,\n    resource: resource.join(\":\"),\n  };\n};\n\ntype buildOptions = Omit<ARN, \"partition\"> & { partition?: string };\n\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\nexport const build = (arnObject: buildOptions): string => {\n  const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n  if ([service, region, accountId, resource].some((segment) => typeof segment !== \"string\")) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n  return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n};\n"]},"metadata":{},"sourceType":"module"}
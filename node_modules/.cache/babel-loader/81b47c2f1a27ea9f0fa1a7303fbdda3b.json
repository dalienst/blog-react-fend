{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\nvar DataStoreConnectivity =\n/** @class */\nfunction () {\n  function DataStoreConnectivity() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n\n  DataStoreConnectivity.prototype.status = function () {\n    var _this = this;\n\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n\n    return new Observable(function (observer) {\n      _this.observer = observer; // Will be used to forward socket connection changes, enhancing Reachability\n\n      _this.subscription = ReachabilityMonitor.subscribe(function (_a) {\n        var online = _a.online;\n        _this.connectionStatus.online = online;\n\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        observer.next(observerResult);\n      });\n      return function () {\n        clearTimeout(_this.timeout);\n\n        _this.unsubscribe();\n      };\n    });\n  };\n\n  DataStoreConnectivity.prototype.unsubscribe = function () {\n    if (this.subscription) {\n      clearTimeout(this.timeout);\n      this.subscription.unsubscribe();\n    }\n  }; // for consistency with other background processors.\n\n\n  DataStoreConnectivity.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.unsubscribe();\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  DataStoreConnectivity.prototype.socketDisconnected = function () {\n    var _this = this;\n\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n\n      this.timeout = setTimeout(function () {\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        _this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  };\n\n  return DataStoreConnectivity;\n}();\n\nexport default DataStoreConnectivity;","map":{"version":3,"mappings":";AAAA,OAAOA,UAAP,MAA0C,mBAA1C;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,mBAAxC;AACA,SAASC,mBAAT,QAAoC,yBAApC;AAEA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAW,WAAX,CAAf;AAEA,IAAMG,eAAe,GAAG,IAAxB,C,CAA8B;;AAO9B;AAAA;AAAA;AAKC;AACC,SAAKC,gBAAL,GAAwB;AACvBC,YAAM,EAAE;AADe,KAAxB;AAGA;;AAEDC;AAAA;;AACC,QAAI,KAAKC,QAAT,EAAmB;AAClB,YAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACA;;AACD,WAAO,IAAIV,UAAJ,CAAe,UAACS,QAAD,EAAS;AAC9BE,WAAI,CAACF,QAAL,GAAgBA,QAAhB,CAD8B,CAE9B;;AAEAE,WAAI,CAACC,YAAL,GAAoBT,mBAAmB,CAACU,SAApB,CAA8B,UAACC,EAAD,EAAW;YAARP;AACpDI,aAAI,CAACL,gBAAL,CAAsBC,MAAtB,GAA+BA,MAA/B;;AAEA,YAAMQ,cAAc,gBAAQJ,KAAI,CAACL,gBAAb,CAApB,CAH4D,CAGP;;;AAErDG,gBAAQ,CAACO,IAAT,CAAcD,cAAd;AACA,OANmB,CAApB;AAQA,aAAO;AACNE,oBAAY,CAACN,KAAI,CAACO,OAAN,CAAZ;;AACAP,aAAI,CAACQ,WAAL;AACA,OAHD;AAIA,KAhBM,CAAP;AAiBA,GArBD;;AAuBAX;AACC,QAAI,KAAKI,YAAT,EAAuB;AACtBK,kBAAY,CAAC,KAAKC,OAAN,CAAZ;AACA,WAAKN,YAAL,CAAkBO,WAAlB;AACA;AACD,GALD,CAlCD,CAyCC;;;AACMX,yCAAN;;;AACC,aAAKW,WAAL;AACA;AAAA;AAAA;;;AACA,GAHK;;AAKNX;AAAA;;AACC,QAAI,KAAKC,QAAL,IAAiB,OAAO,KAAKA,QAAL,CAAcO,IAArB,KAA8B,UAAnD,EAA+D;AAC9D,WAAKP,QAAL,CAAcO,IAAd,CAAmB;AAAET,cAAM,EAAE;AAAV,OAAnB,EAD8D,CACvB;;AAEvC,WAAKW,OAAL,GAAeE,UAAU,CAAC;AACzB,YAAML,cAAc,gBAAQJ,KAAI,CAACL,gBAAb,CAApB,CADyB,CAC4B;;;AACrDK,aAAI,CAACF,QAAL,CAAcO,IAAd,CAAmBD,cAAnB;AACA,OAHwB,EAGtBV,eAHsB,CAAzB,CAH8D,CAMzC;AACrB;AACD,GATD;;AAUD;AAAC,CAzDD","names":["Observable","ConsoleLogger","Logger","ReachabilityMonitor","logger","RECONNECTING_IN","connectionStatus","online","DataStoreConnectivity","observer","Error","_this","subscription","subscribe","_a","observerResult","next","clearTimeout","timeout","unsubscribe","setTimeout"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/sync/datastoreConnectivity.ts"],"sourcesContent":["import Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\n\nconst logger = new Logger('DataStore');\n\nconst RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\ntype ConnectionStatus = {\n\t// Might add other params in the future\n\tonline: boolean;\n};\n\nexport default class DataStoreConnectivity {\n\tprivate connectionStatus: ConnectionStatus;\n\tprivate observer!: ZenObservable.SubscriptionObserver<ConnectionStatus>;\n\tprivate subscription!: ZenObservable.Subscription;\n\tprivate timeout!: ReturnType<typeof setTimeout>;\n\tconstructor() {\n\t\tthis.connectionStatus = {\n\t\t\tonline: false,\n\t\t};\n\t}\n\n\tstatus(): Observable<ConnectionStatus> {\n\t\tif (this.observer) {\n\t\t\tthrow new Error('Subscriber already exists');\n\t\t}\n\t\treturn new Observable((observer) => {\n\t\t\tthis.observer = observer;\n\t\t\t// Will be used to forward socket connection changes, enhancing Reachability\n\n\t\t\tthis.subscription = ReachabilityMonitor.subscribe(({ online }) => {\n\t\t\t\tthis.connectionStatus.online = online;\n\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\n\t\t\t\tobserver.next(observerResult);\n\t\t\t});\n\n\t\t\treturn () => {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.unsubscribe();\n\t\t\t};\n\t\t});\n\t}\n\n\tunsubscribe() {\n\t\tif (this.subscription) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.subscription.unsubscribe();\n\t\t}\n\t}\n\n\t// for consistency with other background processors.\n\tasync stop() {\n\t\tthis.unsubscribe();\n\t\treturn;\n\t}\n\n\tsocketDisconnected() {\n\t\tif (this.observer && typeof this.observer.next === 'function') {\n\t\t\tthis.observer.next({ online: false }); // Notify network issue from the socket\n\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\t\t\t\tthis.observer.next(observerResult);\n\t\t\t}, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
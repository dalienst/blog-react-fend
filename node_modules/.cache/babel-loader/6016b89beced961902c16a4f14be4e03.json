{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign } from \"tslib\";\nimport Observable from 'zen-observable-ts';\nimport { ConnectionState } from '../types/PubSub';\nimport { ReachabilityMonitor } from './ReachabilityMonitor';\nexport var CONNECTION_CHANGE = {\n  KEEP_ALIVE_MISSED: {\n    keepAliveState: 'unhealthy'\n  },\n  KEEP_ALIVE: {\n    keepAliveState: 'healthy'\n  },\n  CONNECTION_ESTABLISHED: {\n    connectionState: 'connected'\n  },\n  CONNECTION_FAILED: {\n    intendedConnectionState: 'disconnected',\n    connectionState: 'disconnected'\n  },\n  CLOSING_CONNECTION: {\n    intendedConnectionState: 'disconnected'\n  },\n  OPENING_CONNECTION: {\n    intendedConnectionState: 'connected',\n    connectionState: 'connecting'\n  },\n  CLOSED: {\n    connectionState: 'disconnected'\n  },\n  ONLINE: {\n    networkState: 'connected'\n  },\n  OFFLINE: {\n    networkState: 'disconnected'\n  }\n};\n\nvar ConnectionStateMonitor =\n/** @class */\nfunction () {\n  function ConnectionStateMonitor() {\n    var _this = this;\n\n    this._networkMonitoringSubscription = undefined;\n    this._linkedConnectionState = {\n      networkState: 'connected',\n      connectionState: 'disconnected',\n      intendedConnectionState: 'disconnected',\n      keepAliveState: 'healthy'\n    }; // Attempt to update the state with the current actual network state\n\n    this._initialNetworkStateSubscription = ReachabilityMonitor().subscribe(function (_a) {\n      var online = _a.online;\n\n      var _b;\n\n      _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n\n      (_b = _this._initialNetworkStateSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();\n    });\n    this._linkedConnectionStateObservable = new Observable(function (connectionStateObserver) {\n      connectionStateObserver.next(_this._linkedConnectionState);\n      _this._linkedConnectionStateObserver = connectionStateObserver;\n    });\n  }\n  /**\n   * Turn network state monitoring on if it isn't on already\n   */\n\n\n  ConnectionStateMonitor.prototype.enableNetworkMonitoring = function () {\n    var _this = this;\n\n    var _a; // If no initial network state was discovered, stop trying\n\n\n    (_a = this._initialNetworkStateSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe(); // Maintain the network state based on the reachability monitor\n\n    if (this._networkMonitoringSubscription === undefined) {\n      this._networkMonitoringSubscription = ReachabilityMonitor().subscribe(function (_a) {\n        var online = _a.online;\n\n        _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n      });\n    }\n  };\n  /**\n   * Turn network state monitoring off if it isn't off already\n   */\n\n\n  ConnectionStateMonitor.prototype.disableNetworkMonitoring = function () {\n    var _a;\n\n    (_a = this._networkMonitoringSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    this._networkMonitoringSubscription = undefined;\n  };\n\n  Object.defineProperty(ConnectionStateMonitor.prototype, \"connectionStateObservable\", {\n    /**\n     * Get the observable that allows us to monitor the connection state\n     *\n     * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n     */\n    get: function () {\n      var _this = this;\n\n      var previous; // The linked state aggregates state changes to any of the network, connection,\n      // intendedConnection and keepAliveHealth. Some states will change these independent\n      // states without changing the overall connection state.\n      // After translating from linked states to ConnectionState, then remove any duplicates\n\n      return this._linkedConnectionStateObservable.map(function (value) {\n        return _this.connectionStatesTranslator(value);\n      }).filter(function (current) {\n        var toInclude = current !== previous;\n        previous = current;\n        return toInclude;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\n   * Updates local connection state and emits the full state to the observer.\n   */\n\n  ConnectionStateMonitor.prototype.record = function (statusUpdates) {\n    // Maintain the network monitor\n    if (statusUpdates.intendedConnectionState === 'connected') {\n      this.enableNetworkMonitoring();\n    } else if (statusUpdates.intendedConnectionState === 'disconnected') {\n      this.disableNetworkMonitoring();\n    } // Maintain the socket state\n\n\n    var newSocketStatus = __assign(__assign({}, this._linkedConnectionState), statusUpdates);\n\n    this._linkedConnectionState = __assign({}, newSocketStatus);\n\n    this._linkedConnectionStateObserver.next(this._linkedConnectionState);\n  };\n  /*\n   * Translate the ConnectionState structure into a specific ConnectionState string literal union\n   */\n\n\n  ConnectionStateMonitor.prototype.connectionStatesTranslator = function (_a) {\n    var connectionState = _a.connectionState,\n        networkState = _a.networkState,\n        intendedConnectionState = _a.intendedConnectionState,\n        keepAliveState = _a.keepAliveState;\n    if (connectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectedPendingNetwork;\n    if (connectionState === 'connected' && intendedConnectionState === 'disconnected') return ConnectionState.ConnectedPendingDisconnect;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectionDisruptedPendingNetwork;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected') return ConnectionState.ConnectionDisrupted;\n    if (connectionState === 'connected' && keepAliveState === 'unhealthy') return ConnectionState.ConnectedPendingKeepAlive; // All remaining states directly correspond to the connection state\n\n    if (connectionState === 'connecting') return ConnectionState.Connecting;\n    if (connectionState === 'disconnected') return ConnectionState.Disconnected;\n    return ConnectionState.Connected;\n  };\n\n  return ConnectionStateMonitor;\n}();\n\nexport { ConnectionStateMonitor };","map":{"version":3,"mappings":"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","names":["Observable","ConnectionState","ReachabilityMonitor","CONNECTION_CHANGE","KEEP_ALIVE_MISSED","keepAliveState","KEEP_ALIVE","CONNECTION_ESTABLISHED","connectionState","CONNECTION_FAILED","intendedConnectionState","CLOSING_CONNECTION","OPENING_CONNECTION","CLOSED","ONLINE","networkState","OFFLINE","_networkMonitoringSubscription","undefined","_linkedConnectionState","_initialNetworkStateSubscription","subscribe","_a","online","_this","record","_b","unsubscribe","_linkedConnectionStateObservable","connectionStateObserver","next","_linkedConnectionStateObserver","ConnectionStateMonitor","Object","previous","map","connectionStatesTranslator","value","filter","toInclude","current","statusUpdates","enableNetworkMonitoring","disableNetworkMonitoring","newSocketStatus","__assign","ConnectedPendingNetwork","ConnectedPendingDisconnect","ConnectionDisruptedPendingNetwork","ConnectionDisrupted","ConnectedPendingKeepAlive","Connecting","Disconnected","Connected"],"sources":["/home/dalienst/node_modules/@aws-amplify/pubsub/src/utils/ConnectionStateMonitor.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Reachability } from '@aws-amplify/core';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ConnectionState } from '../types/PubSub';\nimport { ReachabilityMonitor } from './ReachabilityMonitor';\n\n// Internal types for tracking different connection states\ntype LinkedConnectionState = 'connected' | 'disconnected';\ntype LinkedHealthState = 'healthy' | 'unhealthy';\ntype LinkedConnectionStates = {\n\tnetworkState: LinkedConnectionState;\n\tconnectionState: LinkedConnectionState | 'connecting';\n\tintendedConnectionState: LinkedConnectionState;\n\tkeepAliveState: LinkedHealthState;\n};\n\nexport const CONNECTION_CHANGE: {\n\t[key in\n\t\t| 'KEEP_ALIVE_MISSED'\n\t\t| 'KEEP_ALIVE'\n\t\t| 'CONNECTION_ESTABLISHED'\n\t\t| 'CONNECTION_FAILED'\n\t\t| 'CLOSING_CONNECTION'\n\t\t| 'OPENING_CONNECTION'\n\t\t| 'CLOSED'\n\t\t| 'ONLINE'\n\t\t| 'OFFLINE']: Partial<LinkedConnectionStates>;\n} = {\n\tKEEP_ALIVE_MISSED: { keepAliveState: 'unhealthy' },\n\tKEEP_ALIVE: { keepAliveState: 'healthy' },\n\tCONNECTION_ESTABLISHED: { connectionState: 'connected' },\n\tCONNECTION_FAILED: {\n\t\tintendedConnectionState: 'disconnected',\n\t\tconnectionState: 'disconnected',\n\t},\n\tCLOSING_CONNECTION: { intendedConnectionState: 'disconnected' },\n\tOPENING_CONNECTION: {\n\t\tintendedConnectionState: 'connected',\n\t\tconnectionState: 'connecting',\n\t},\n\tCLOSED: { connectionState: 'disconnected' },\n\tONLINE: { networkState: 'connected' },\n\tOFFLINE: { networkState: 'disconnected' },\n};\n\nexport class ConnectionStateMonitor {\n\t/**\n\t * @private\n\t */\n\tprivate _linkedConnectionState: LinkedConnectionStates;\n\tprivate _linkedConnectionStateObservable: Observable<LinkedConnectionStates>;\n\tprivate _linkedConnectionStateObserver: ZenObservable.SubscriptionObserver<LinkedConnectionStates>;\n\tprivate _networkMonitoringSubscription?: ZenObservable.Subscription;\n\tprivate _initialNetworkStateSubscription?: ZenObservable.Subscription;\n\n\tconstructor() {\n\t\tthis._networkMonitoringSubscription = undefined;\n\t\tthis._linkedConnectionState = {\n\t\t\tnetworkState: 'connected',\n\t\t\tconnectionState: 'disconnected',\n\t\t\tintendedConnectionState: 'disconnected',\n\t\t\tkeepAliveState: 'healthy',\n\t\t};\n\n\t\t// Attempt to update the state with the current actual network state\n\t\tthis._initialNetworkStateSubscription = ReachabilityMonitor().subscribe(\n\t\t\t({ online }) => {\n\t\t\t\tthis.record(\n\t\t\t\t\tonline ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE\n\t\t\t\t);\n\t\t\t\tthis._initialNetworkStateSubscription?.unsubscribe();\n\t\t\t}\n\t\t);\n\n\t\tthis._linkedConnectionStateObservable =\n\t\t\tnew Observable<LinkedConnectionStates>(connectionStateObserver => {\n\t\t\t\tconnectionStateObserver.next(this._linkedConnectionState);\n\t\t\t\tthis._linkedConnectionStateObserver = connectionStateObserver;\n\t\t\t});\n\t}\n\n\t/**\n\t * Turn network state monitoring on if it isn't on already\n\t */\n\tprivate enableNetworkMonitoring() {\n\t\t// If no initial network state was discovered, stop trying\n\t\tthis._initialNetworkStateSubscription?.unsubscribe();\n\n\t\t// Maintain the network state based on the reachability monitor\n\t\tif (this._networkMonitoringSubscription === undefined) {\n\t\t\tthis._networkMonitoringSubscription = ReachabilityMonitor().subscribe(\n\t\t\t\t({ online }) => {\n\t\t\t\t\tthis.record(\n\t\t\t\t\t\tonline ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Turn network state monitoring off if it isn't off already\n\t */\n\tprivate disableNetworkMonitoring() {\n\t\tthis._networkMonitoringSubscription?.unsubscribe();\n\t\tthis._networkMonitoringSubscription = undefined;\n\t}\n\n\t/**\n\t * Get the observable that allows us to monitor the connection state\n\t *\n\t * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n\t */\n\tpublic get connectionStateObservable(): Observable<ConnectionState> {\n\t\tlet previous: ConnectionState;\n\n\t\t// The linked state aggregates state changes to any of the network, connection,\n\t\t// intendedConnection and keepAliveHealth. Some states will change these independent\n\t\t// states without changing the overall connection state.\n\n\t\t// After translating from linked states to ConnectionState, then remove any duplicates\n\t\treturn this._linkedConnectionStateObservable\n\t\t\t.map(value => {\n\t\t\t\treturn this.connectionStatesTranslator(value);\n\t\t\t})\n\t\t\t.filter(current => {\n\t\t\t\tconst toInclude = current !== previous;\n\t\t\t\tprevious = current;\n\t\t\t\treturn toInclude;\n\t\t\t});\n\t}\n\n\t/*\n\t * Updates local connection state and emits the full state to the observer.\n\t */\n\trecord(statusUpdates: Partial<LinkedConnectionStates>) {\n\t\t// Maintain the network monitor\n\t\tif (statusUpdates.intendedConnectionState === 'connected') {\n\t\t\tthis.enableNetworkMonitoring();\n\t\t} else if (statusUpdates.intendedConnectionState === 'disconnected') {\n\t\t\tthis.disableNetworkMonitoring();\n\t\t}\n\n\t\t// Maintain the socket state\n\t\tconst newSocketStatus = {\n\t\t\t...this._linkedConnectionState,\n\t\t\t...statusUpdates,\n\t\t};\n\n\t\tthis._linkedConnectionState = { ...newSocketStatus };\n\n\t\tthis._linkedConnectionStateObserver.next(this._linkedConnectionState);\n\t}\n\n\t/*\n\t * Translate the ConnectionState structure into a specific ConnectionState string literal union\n\t */\n\tprivate connectionStatesTranslator({\n\t\tconnectionState,\n\t\tnetworkState,\n\t\tintendedConnectionState,\n\t\tkeepAliveState,\n\t}: LinkedConnectionStates): ConnectionState {\n\t\tif (connectionState === 'connected' && networkState === 'disconnected')\n\t\t\treturn ConnectionState.ConnectedPendingNetwork;\n\n\t\tif (\n\t\t\tconnectionState === 'connected' &&\n\t\t\tintendedConnectionState === 'disconnected'\n\t\t)\n\t\t\treturn ConnectionState.ConnectedPendingDisconnect;\n\n\t\tif (\n\t\t\tconnectionState === 'disconnected' &&\n\t\t\tintendedConnectionState === 'connected' &&\n\t\t\tnetworkState === 'disconnected'\n\t\t)\n\t\t\treturn ConnectionState.ConnectionDisruptedPendingNetwork;\n\n\t\tif (\n\t\t\tconnectionState === 'disconnected' &&\n\t\t\tintendedConnectionState === 'connected'\n\t\t)\n\t\t\treturn ConnectionState.ConnectionDisrupted;\n\n\t\tif (connectionState === 'connected' && keepAliveState === 'unhealthy')\n\t\t\treturn ConnectionState.ConnectedPendingKeepAlive;\n\n\t\t// All remaining states directly correspond to the connection state\n\t\tif (connectionState === 'connecting') return ConnectionState.Connecting;\n\t\tif (connectionState === 'disconnected') return ConnectionState.Disconnected;\n\t\treturn ConnectionState.Connected;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SynthesizeSpeechInput, SynthesizeSpeechOutput } from \"../models/models_0\";\nimport { deserializeAws_restJson1SynthesizeSpeechCommand, serializeAws_restJson1SynthesizeSpeechCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes. SSML input must be\n *       valid, well-formed SSML. Some alphabets might not be available with all the voices (for\n *       example, Cyrillic might not be read at all by English voices) unless phoneme mapping is used.\n *       For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html\">How it\n *         Works</a>.</p>\n */\n\nvar SynthesizeSpeechCommand =\n/** @class */\nfunction (_super) {\n  __extends(SynthesizeSpeechCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function SynthesizeSpeechCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  SynthesizeSpeechCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"PollyClient\";\n    var commandName = \"SynthesizeSpeechCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SynthesizeSpeechInput.filterSensitiveLog,\n      outputFilterSensitiveLog: SynthesizeSpeechOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  SynthesizeSpeechCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1SynthesizeSpeechCommand(input, context);\n  };\n\n  SynthesizeSpeechCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1SynthesizeSpeechCommand(output, context);\n  };\n\n  return SynthesizeSpeechCommand;\n}($Command);\n\nexport { SynthesizeSpeechCommand };","map":{"version":3,"mappings":";AACA,SAASA,qBAAT,EAAgCC,sBAAhC,QAA8D,oBAA9D;AACA,SACEC,+CADF,EAEEC,6CAFF,QAGO,4BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;AAOA;AAAA;AAAA;AAA6CC,6CAA7C,CAKE;AACA;;;AAEA,mCAAqBC,KAArB,EAAwD;AAAxD,gBACE;AACAC,yBAAO,IAFT;;AAAqBC;iBAAmC,CAGtD;AACD;AAED;;;;;AAGAC,kEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;AAE9B,SAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AAEA,QAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;AAEQ,cAAM,GAAKF,aAAa,OAAxB;AACR,QAAMQ,UAAU,GAAG,aAAnB;AACA,QAAMC,WAAW,GAAG,yBAApB;AACA,QAAMC,uBAAuB,GAA4B;AACvDC,YAAM,QADiD;AAEvDH,gBAAU,YAF6C;AAGvDC,iBAAW,aAH4C;AAIvDG,6BAAuB,EAAEzB,qBAAqB,CAAC0B,kBAJQ;AAKvDC,8BAAwB,EAAE1B,sBAAsB,CAACyB;AALM,KAAzD;AAOQ,sBAAc,GAAKb,aAAa,eAAhC;AACR,WAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;AACrC,2BAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;AAAsE,KAFnE,EAGLS,uBAHK,CAAP;AAKD,GAzBD;;AA2BQZ,gDAAR,UAAkBH,KAAlB,EAAuDuB,OAAvD,EAA8E;AAC5E,WAAO5B,6CAA6C,CAACK,KAAD,EAAQuB,OAAR,CAApD;AACD,GAFO;;AAIApB,kDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;AACjE,WAAO7B,+CAA+C,CAAC8B,MAAD,EAASD,OAAT,CAAtD;AACD,GAFO;;AAMV;AAAC,CAtDD,CAA6CzB,QAA7C","names":["SynthesizeSpeechInput","SynthesizeSpeechOutput","deserializeAws_restJson1SynthesizeSpeechCommand","serializeAws_restJson1SynthesizeSpeechCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","SynthesizeSpeechCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/home/dalienst/node_modules/@aws-sdk/client-polly/commands/SynthesizeSpeechCommand.ts"],"sourcesContent":["import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../PollyClient\";\nimport { SynthesizeSpeechInput, SynthesizeSpeechOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_restJson1SynthesizeSpeechCommand,\n  serializeAws_restJson1SynthesizeSpeechCommand,\n} from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type SynthesizeSpeechCommandInput = SynthesizeSpeechInput;\nexport type SynthesizeSpeechCommandOutput = SynthesizeSpeechOutput & __MetadataBearer;\n\n/**\n * <p>Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes. SSML input must be\n *       valid, well-formed SSML. Some alphabets might not be available with all the voices (for\n *       example, Cyrillic might not be read at all by English voices) unless phoneme mapping is used.\n *       For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html\">How it\n *         Works</a>.</p>\n */\nexport class SynthesizeSpeechCommand extends $Command<\n  SynthesizeSpeechCommandInput,\n  SynthesizeSpeechCommandOutput,\n  PollyClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: SynthesizeSpeechCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: PollyClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<SynthesizeSpeechCommandInput, SynthesizeSpeechCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"PollyClient\";\n    const commandName = \"SynthesizeSpeechCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: SynthesizeSpeechInput.filterSensitiveLog,\n      outputFilterSensitiveLog: SynthesizeSpeechOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: SynthesizeSpeechCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restJson1SynthesizeSpeechCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<SynthesizeSpeechCommandOutput> {\n    return deserializeAws_restJson1SynthesizeSpeechCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}
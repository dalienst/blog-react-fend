{"ast":null,"code":"var STORE_NAME = \"IdentityIds\";\n\nvar IndexedDbStorage =\n/** @class */\nfunction () {\n  function IndexedDbStorage(dbName) {\n    if (dbName === void 0) {\n      dbName = \"aws:cognito-identity-ids\";\n    }\n\n    this.dbName = dbName;\n  }\n\n  IndexedDbStorage.prototype.getItem = function (key) {\n    return this.withObjectStore(\"readonly\", function (store) {\n      var req = store.get(key);\n      return new Promise(function (resolve) {\n        req.onerror = function () {\n          return resolve(null);\n        };\n\n        req.onsuccess = function () {\n          return resolve(req.result ? req.result.value : null);\n        };\n      });\n    }).catch(function () {\n      return null;\n    });\n  };\n\n  IndexedDbStorage.prototype.removeItem = function (key) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.delete(key);\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.setItem = function (id, value) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.put({\n        id: id,\n        value: value\n      });\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.getDb = function () {\n    var openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise(function (resolve, reject) {\n      openDbRequest.onsuccess = function () {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = function () {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = function () {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = function () {\n        var db = openDbRequest.result;\n\n        db.onerror = function () {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  };\n\n  IndexedDbStorage.prototype.withObjectStore = function (mode, action) {\n    return this.getDb().then(function (db) {\n      var tx = db.transaction(STORE_NAME, mode);\n\n      tx.oncomplete = function () {\n        return db.close();\n      };\n\n      return new Promise(function (resolve, reject) {\n        tx.onerror = function () {\n          return reject(tx.error);\n        };\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(function (err) {\n        db.close();\n        throw err;\n      });\n    });\n  };\n\n  return IndexedDbStorage;\n}();\n\nexport { IndexedDbStorage };","map":{"version":3,"mappings":"AAEA,IAAMA,UAAU,GAAG,aAAnB;;AAEA;AAAA;AAAA;AACE,4BAA6BC,MAA7B,EAAwE;AAA3C;AAAAA;AAA2C;;AAA3C;AAA+C;;AAE5EC,iDAAQC,GAAR,EAAmB;AACjB,WAAO,KAAKC,eAAL,CAAqB,UAArB,EAAiC,UAACC,KAAD,EAAM;AAC5C,UAAMC,GAAG,GAAGD,KAAK,CAACE,GAAN,CAAUJ,GAAV,CAAZ;AAEA,aAAO,IAAIK,OAAJ,CAA2B,UAACC,OAAD,EAAQ;AACxCH,WAAG,CAACI,OAAJ,GAAc;AAAM,wBAAO,CAAC,IAAD,CAAP;AAAa,SAAjC;;AAEAJ,WAAG,CAACK,SAAJ,GAAgB;AAAM,wBAAO,CAACL,GAAG,CAACM,MAAJ,GAAaN,GAAG,CAACM,MAAJ,CAAWC,KAAxB,GAAgC,IAAjC,CAAP;AAA6C,SAAnE;AACD,OAJM,CAAP;AAKD,KARM,EAQJC,KARI,CAQE;AAAM;AAAI,KARZ,CAAP;AASD,GAVD;;AAYAZ,oDAAWC,GAAX,EAAsB;AACpB,WAAO,KAAKC,eAAL,CAAqB,WAArB,EAAkC,UAACC,KAAD,EAAM;AAC7C,UAAMC,GAAG,GAAGD,KAAK,CAACU,MAAN,CAAaZ,GAAb,CAAZ;AAEA,aAAO,IAAIK,OAAJ,CAAkB,UAACC,OAAD,EAAUO,MAAV,EAAgB;AACvCV,WAAG,CAACI,OAAJ,GAAc;AAAM,uBAAM,CAACJ,GAAG,CAACW,KAAL,CAAN;AAAiB,SAArC;;AAEAX,WAAG,CAACK,SAAJ,GAAgB;AAAM,wBAAO,EAAP;AAAS,SAA/B;AACD,OAJM,CAAP;AAKD,KARM,CAAP;AASD,GAVD;;AAYAT,iDAAQgB,EAAR,EAAoBL,KAApB,EAAiC;AAC/B,WAAO,KAAKT,eAAL,CAAqB,WAArB,EAAkC,UAACC,KAAD,EAAM;AAC7C,UAAMC,GAAG,GAAGD,KAAK,CAACc,GAAN,CAAU;AAAED,UAAE,IAAJ;AAAML,aAAK;AAAX,OAAV,CAAZ;AAEA,aAAO,IAAIL,OAAJ,CAAkB,UAACC,OAAD,EAAUO,MAAV,EAAgB;AACvCV,WAAG,CAACI,OAAJ,GAAc;AAAM,uBAAM,CAACJ,GAAG,CAACW,KAAL,CAAN;AAAiB,SAArC;;AAEAX,WAAG,CAACK,SAAJ,GAAgB;AAAM,wBAAO,EAAP;AAAS,SAA/B;AACD,OAJM,CAAP;AAKD,KARM,CAAP;AASD,GAVD;;AAYQT,qCAAR;AACE,QAAMkB,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeC,IAAf,CAAoB,KAAKtB,MAAzB,EAAiC,CAAjC,CAAtB;AACA,WAAO,IAAIO,OAAJ,CAAY,UAACC,OAAD,EAAUO,MAAV,EAAgB;AACjCI,mBAAa,CAACT,SAAd,GAA0B;AACxBF,eAAO,CAACW,aAAa,CAACR,MAAf,CAAP;AACD,OAFD;;AAIAQ,mBAAa,CAACV,OAAd,GAAwB;AACtBM,cAAM,CAACI,aAAa,CAACH,KAAf,CAAN;AACD,OAFD;;AAIAG,mBAAa,CAACI,SAAd,GAA0B;AACxBR,cAAM,CAAC,IAAIS,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACD,OAFD;;AAIAL,mBAAa,CAACM,eAAd,GAAgC;AAC9B,YAAMC,EAAE,GAAGP,aAAa,CAACR,MAAzB;;AACAe,UAAE,CAACjB,OAAH,GAAa;AACXM,gBAAM,CAAC,IAAIS,KAAJ,CAAU,+BAAV,CAAD,CAAN;AACD,SAFD;;AAIAE,UAAE,CAACC,iBAAH,CAAqB5B,UAArB,EAAiC;AAAE6B,iBAAO,EAAE;AAAX,SAAjC;AACD,OAPD;AAQD,KArBM,CAAP;AAsBD,GAxBO;;AA0BA3B,+CAAR,UAA2B4B,IAA3B,EAAqDC,MAArD,EAAkG;AAChG,WAAO,KAAKC,KAAL,GAAaC,IAAb,CAAkB,UAACN,EAAD,EAAG;AAC1B,UAAMO,EAAE,GAAGP,EAAE,CAACQ,WAAH,CAAenC,UAAf,EAA2B8B,IAA3B,CAAX;;AACAI,QAAE,CAACE,UAAH,GAAgB;AAAM,iBAAE,CAACC,KAAH;AAAU,OAAhC;;AAEA,aAAO,IAAI7B,OAAJ,CAAe,UAACC,OAAD,EAAUO,MAAV,EAAgB;AACpCkB,UAAE,CAACxB,OAAH,GAAa;AAAM,uBAAM,CAACwB,EAAE,CAACjB,KAAJ,CAAN;AAAgB,SAAnC;;AAEAR,eAAO,CAACsB,MAAM,CAACG,EAAE,CAACI,WAAH,CAAetC,UAAf,CAAD,CAAP,CAAP;AACD,OAJM,EAIJc,KAJI,CAIE,UAACyB,GAAD,EAAI;AACXZ,UAAE,CAACU,KAAH;AACA,cAAME,GAAN;AACD,OAPM,CAAP;AAQD,KAZM,CAAP;AAaD,GAdO;;AAeV;AAAC,CAhFD","names":["STORE_NAME","dbName","IndexedDbStorage","key","withObjectStore","store","req","get","Promise","resolve","onerror","onsuccess","result","value","catch","delete","reject","error","id","put","openDbRequest","self","indexedDB","open","onblocked","Error","onupgradeneeded","db","createObjectStore","keyPath","mode","action","getDb","then","tx","transaction","oncomplete","close","objectStore","err"],"sources":["/home/dalienst/node_modules/@aws-sdk/credential-provider-cognito-identity/src/IndexedDbStorage.ts"],"sourcesContent":["import { Storage } from \"./Storage\";\n\nconst STORE_NAME = \"IdentityIds\";\n\nexport class IndexedDbStorage implements Storage {\n  constructor(private readonly dbName: string = \"aws:cognito-identity-ids\") {}\n\n  getItem(key: string): Promise<string | null> {\n    return this.withObjectStore(\"readonly\", (store) => {\n      const req = store.get(key);\n\n      return new Promise<string | null>((resolve) => {\n        req.onerror = () => resolve(null);\n\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n\n  removeItem(key: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.delete(key);\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  setItem(id: string, value: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.put({ id, value });\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  private getDb(): Promise<IDBDatabase> {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n      };\n    });\n  }\n\n  private withObjectStore<R>(mode: IDBTransactionMode, action: (store: IDBObjectStore) => Promise<R>): Promise<R> {\n    return this.getDb().then((db) => {\n      const tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = () => db.close();\n\n      return new Promise<R>((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch((err) => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { API, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub, BackgroundProcessManager } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\n\nexport var USER_CREDENTIALS;\n\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\n\nvar SubscriptionProcessor =\n/** @class */\nfunction () {\n  function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    if (amplifyContext === void 0) {\n      amplifyContext = {\n        Auth: Auth,\n        API: API,\n        Cache: Cache\n      };\n    }\n\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n    this.runningProcesses = new BackgroundProcessManager();\n  }\n\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n\n    var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {},\n        isOwner = _a.isOwner,\n        ownerField = _a.ownerField,\n        ownerValue = _a.ownerValue;\n\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3),\n        opType = _b[0],\n        opName = _b[1],\n        query = _b[2];\n\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n\n    var rules = getAuthorizationRules(model); // Return null if user doesn't have proper credentials for private API with IAM auth\n\n    var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function (rule) {\n      return rule.authStrategy === 'private' && rule.provider === 'iam';\n    });\n\n    if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n      return null;\n    } // Group auth should take precedence over owner auth, so we are checking\n    // if rule(s) have group authorization as well as if either the Cognito or\n    // OIDC token has a groupClaim. If so, we are returning auth info before\n    // any further owner-based auth checks.\n\n\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'groups' && ['userPools', 'oidc'].includes(rule.provider);\n    });\n    var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function (groupAuthRule) {\n      // validate token against groupClaim\n      var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n      var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n      return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n\n    if (validGroup) {\n      return {\n        authMode: authMode,\n        isOwner: false\n      };\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the Cognito token via the\n    // identityClaim from the auth rule.\n\n\n    var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    }) : [];\n    var ownerAuthInfo;\n    cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the OIDC token via the\n    // identityClaim from the auth rule.\n\n\n    var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    }) : [];\n    oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Fallback: return authMode or default auth type\n\n\n    return {\n      authMode: authMode || defaultAuthType,\n      isOwner: false\n    };\n  };\n\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n\n    this.runningProcesses = this.runningProcesses || new BackgroundProcessManager();\n    var ctlObservable = new Observable(function (observer) {\n      var promises = []; // Creating subs for each model/operation combo so they can be unsubscribed\n      // independently, since the auth retry behavior is asynchronous.\n\n      var subscriptions = {};\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n\n      _this.runningProcesses.add(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n\n          var _this = this;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentCredentials()];\n\n              case 1:\n                credentials = _b.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _b.sent();\n                return [3\n                /*break*/\n                , 3];\n\n              case 3:\n                _b.trys.push([3, 5,, 6]);\n\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentSession()];\n\n              case 4:\n                session = _b.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3\n                /*break*/\n                , 6];\n\n              case 5:\n                err_2 = _b.sent();\n                return [3\n                /*break*/\n                , 6];\n\n              case 6:\n                _b.trys.push([6, 11,, 12]);\n\n                _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n\n                if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {\n                  throw 'Auth is not configured';\n                }\n\n                token = void 0;\n                return [4\n                /*yield*/\n                , this.amplifyContext.Cache.getItem('federatedInfo')];\n\n              case 7:\n                federatedInfo = _b.sent();\n                if (!federatedInfo) return [3\n                /*break*/\n                , 8];\n                token = federatedInfo.token;\n                return [3\n                /*break*/\n                , 10];\n\n              case 8:\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentAuthenticatedUser()];\n\n              case 9:\n                currentUser = _b.sent();\n\n                if (currentUser) {\n                  token = currentUser.token;\n                }\n\n                _b.label = 10;\n\n              case 10:\n                if (token) {\n                  payload = token.split('.')[1];\n                  oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                }\n\n                return [3\n                /*break*/\n                , 12];\n\n              case 11:\n                err_3 = _b.sent();\n                logger.debug('error getting OIDC JWT', err_3);\n                return [3\n                /*break*/\n                , 12];\n\n              case 12:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, authModeRetry;\n\n                        var _a, _b, _c;\n\n                        var _this = this;\n\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              return [4\n                              /*yield*/\n                              , getModelAuthModes({\n                                authModeStrategy: this.authModeStrategy,\n                                defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: modelDefinition.name,\n                                schema: this.schema\n                              })];\n\n                            case 1:\n                              modelAuthModes = _d.sent();\n                              readAuthModes = modelAuthModes.READ;\n                              subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {}, _b[TransformerMutationType.CREATE] = [], _b[TransformerMutationType.UPDATE] = [], _b[TransformerMutationType.DELETE] = [], _b), _a));\n                              operations = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE];\n                              operationAuthModeAttempts = (_c = {}, _c[TransformerMutationType.CREATE] = 0, _c[TransformerMutationType.UPDATE] = 0, _c[TransformerMutationType.DELETE] = 0, _c);\n\n                              authModeRetry = function (operation) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, userAgentSuffix, queryObservable, subscriptionReadyCallback;\n\n                                  var _this = this;\n\n                                  return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                      case 0:\n                                        _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]]), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                        return [4\n                                        /*yield*/\n                                        , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                                      case 1:\n                                        authToken = _b.sent();\n                                        variables = {};\n\n                                        if (isOwner) {\n                                          if (!ownerValue) {\n                                            observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                            return [2\n                                            /*return*/\n                                            ];\n                                          }\n\n                                          variables[ownerField] = ownerValue;\n                                        }\n\n                                        logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                        userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n                                        queryObservable = this.amplifyContext.API.graphql(__assign(__assign({\n                                          query: query,\n                                          variables: variables\n                                        }, {\n                                          authMode: authMode\n                                        }), {\n                                          authToken: authToken,\n                                          userAgentSuffix: userAgentSuffix\n                                        })); // TODO: consider onTerminate.then(() => API.cancel(...))\n\n                                        subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable.map(function (_a) {\n                                          var value = _a.value;\n                                          return value;\n                                        }).subscribe({\n                                          next: function (_a) {\n                                            var data = _a.data,\n                                                errors = _a.errors;\n\n                                            if (Array.isArray(errors) && errors.length > 0) {\n                                              var messages = errors.map(function (_a) {\n                                                var message = _a.message;\n                                                return message;\n                                              });\n                                              logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n\n                                              _this.drainBuffer();\n\n                                              return;\n                                            }\n\n                                            var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false); // @ts-ignore\n\n                                            var _b = data,\n                                                _c = opName,\n                                                record = _b[_c]; // checking incoming subscription against syncPredicate.\n                                            // once AppSync implements filters on subscriptions, we'll be\n                                            // able to set these when establishing the subscription instead.\n                                            // Until then, we'll need to filter inbound\n\n                                            if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                              _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                            }\n\n                                            _this.drainBuffer();\n                                          },\n                                          error: function (subscriptionError) {\n                                            return __awaiter(_this, void 0, void 0, function () {\n                                              var _a, _b, _c, _d, message, e_1;\n\n                                              return __generator(this, function (_e) {\n                                                switch (_e.label) {\n                                                  case 0:\n                                                    _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                      errors: []\n                                                    } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n\n                                                    if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) || message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                      // Unsubscribe and clear subscription array for model/operation\n                                                      subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                        return subscription.unsubscribe();\n                                                      });\n                                                      subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                      operationAuthModeAttempts[operation]++;\n\n                                                      if (operationAuthModeAttempts[operation] >= readAuthModes.length) {\n                                                        // last auth mode retry. Continue with error\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                      } else {\n                                                        // retry with different auth mode. Do not trigger\n                                                        // observer error or error handler\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                        authModeRetry(operation);\n                                                        return [2\n                                                        /*return*/\n                                                        ];\n                                                      }\n                                                    }\n\n                                                    logger.warn('subscriptionError', message);\n                                                    _e.label = 1;\n\n                                                  case 1:\n                                                    _e.trys.push([1, 3,, 4]);\n\n                                                    return [4\n                                                    /*yield*/\n                                                    , this.errorHandler({\n                                                      recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                      localModel: null,\n                                                      message: message,\n                                                      model: modelDefinition.name,\n                                                      operation: operation,\n                                                      errorType: getSubscriptionErrorType(subscriptionError),\n                                                      process: ProcessName.subscribe,\n                                                      remoteModel: null,\n                                                      cause: subscriptionError\n                                                    })];\n\n                                                  case 2:\n                                                    _e.sent();\n\n                                                    return [3\n                                                    /*break*/\n                                                    , 4];\n\n                                                  case 3:\n                                                    e_1 = _e.sent();\n                                                    logger.error('Subscription error handler failed with:', e_1);\n                                                    return [3\n                                                    /*break*/\n                                                    , 4];\n\n                                                  case 4:\n                                                    if (typeof subscriptionReadyCallback === 'function') {\n                                                      subscriptionReadyCallback();\n                                                    }\n\n                                                    if (message.includes('\"errorType\":\"Unauthorized\"') || message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                      return [2\n                                                      /*return*/\n                                                      ];\n                                                    }\n\n                                                    observer.error(message);\n                                                    return [2\n                                                    /*return*/\n                                                    ];\n                                                }\n                                              });\n                                            });\n                                          }\n                                        }));\n                                        promises.push(function () {\n                                          return __awaiter(_this, void 0, void 0, function () {\n                                            var boundFunction;\n\n                                            var _this = this;\n\n                                            return __generator(this, function (_a) {\n                                              switch (_a.label) {\n                                                case 0:\n                                                  return [4\n                                                  /*yield*/\n                                                  , new Promise(function (res) {\n                                                    subscriptionReadyCallback = res;\n                                                    boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                    Hub.listen('api', boundFunction);\n                                                  })];\n\n                                                case 1:\n                                                  _a.sent();\n\n                                                  Hub.remove('api', boundFunction);\n                                                  return [2\n                                                  /*return*/\n                                                  ];\n                                              }\n                                            });\n                                          });\n                                        }());\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              };\n\n                              operations.forEach(function (op) {\n                                return authModeRetry(op);\n                              });\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    });\n                  });\n                });\n                this.runningProcesses.isOpen && this.runningProcesses.add(function () {\n                  return Promise.all(promises).then(function () {\n                    observer.next(CONTROL_MSG.CONNECTED);\n                  });\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }, 'subscription processor new subscriber');\n\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            Object.keys(subscriptions).forEach(function (modelName) {\n              subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n            });\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      });\n    });\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n\n      _this.drainBuffer();\n\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.dataObserver = null;\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      });\n    });\n    return [ctlObservable, dataObservable];\n  };\n\n  SubscriptionProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n    if (!predicatesGroup) {\n      return true;\n    }\n\n    var predicates = predicatesGroup.predicates,\n        type = predicatesGroup.type;\n    return validatePredicate(record, type, predicates);\n  };\n\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n\n  return SubscriptionProcessor;\n}();\n\nexport { SubscriptionProcessor };","map":{"version":3,"mappings":"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","names":["API","GRAPHQL_AUTH_MODE","Auth","Cache","ConsoleLogger","Logger","Hub","BackgroundProcessManager","CONTROL_MSG","PUBSUB_CONTROL_MSG","Observable","ProcessName","buildSubscriptionGraphQLOperation","getAuthorizationRules","getModelAuthModes","getUserGroupsFromToken","TransformerMutationType","getTokenForCustomAuth","ModelPredicateCreator","validatePredicate","USER_AGENT_SUFFIX_DATASTORE","getSubscriptionErrorType","logger","USER_CREDENTIALS","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","WeakMap","SubscriptionProcessor","namespace","model","transformerMutationType","userCredentials","cognitoTokenPayload","oidcTokenPayload","authMode","isOwner","ownerField","ownerValue","opType","opName","query","defaultAuthType","rules","iamPrivateAuth","AWS_IAM","find","authStrategy","rule","provider","unauth","groupAuthRules","filter","includes","validGroup","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","cognitoUserGroups","groupAuthRule","oidcUserGroups","__spread","groups","userGroup","cognitoOwnerAuthRules","ownerAuthInfo","forEach","ownerAuthRule","identityClaim","areSubscriptionsPublic","oidcOwnerAuthRules","completed","capsule","event","SUBSCRIPTION_ACK","runningProcesses","ctlObservable","promises","subscriptions","none","_this","add","currentCredentials","credentials","_b","authenticated","auth","currentSession","session","getIdToken","decodePayload","_a","aws_cognito_region","AuthConfig","region","token","getItem","federatedInfo","currentAuthenticatedUser","currentUser","payload","split","JSON","parse","Buffer","from","toString","debug","err_3","Object","values","namespaces","models","syncable","isOpen","defaultAuthMode","aws_appsync_authenticationType","modelName","modelDefinition","name","modelAuthModes","_d","readAuthModes","READ","CREATE","UPDATE","DELETE","operations","operationAuthModeAttempts","_c","authModeRetry","operation","buildSubscription","authToken","variables","observer","error","userAgentSuffix","queryObservable","graphql","__assign","push","map","value","subscribe","next","data","errors","Array","isArray","length","messages","message","warn","join","drainBuffer","predicatesGroup","getPredicates","get","passesPredicateValidation","record","pushToBuffer","subscriptionError","REALTIME_SUBSCRIPTION_INIT_ERROR","CONNECTION_FAILED","unsubscribe","recoverySuggestion","localModel","errorType","process","remoteModel","cause","_e","e_1","subscriptionReadyCallback","Promise","res","boundFunction","hubQueryCompletionListener","bind","listen","remove","op","all","then","CONNECTED","addCleaner","keys","dataObservable","dataObserver","close","open","type","predicates","buffer"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/sync/processors/subscription.ts"],"sourcesContent":["import { API, GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport {\n\tConsoleLogger as Logger,\n\tHub,\n\tHubCapsule,\n\tBackgroundProcessManager,\n} from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport {\n\tInternalSchema,\n\tPersistentModel,\n\tSchemaModel,\n\tSchemaNamespace,\n\tPredicatesGroup,\n\tModelPredicate,\n\tAuthModeStrategy,\n\tErrorHandler,\n\tProcessName,\n\tAmplifyContext,\n} from '../../types';\nimport {\n\tbuildSubscriptionGraphQLOperation,\n\tgetAuthorizationRules,\n\tgetModelAuthModes,\n\tgetUserGroupsFromToken,\n\tTransformerMutationType,\n\tgetTokenForCustomAuth,\n} from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\n\nconst logger = new Logger('DataStore');\n\nexport enum CONTROL_MSG {\n\tCONNECTED = 'CONNECTED',\n}\n\nexport enum USER_CREDENTIALS {\n\t'none',\n\t'unauth',\n\t'auth',\n}\n\ntype AuthorizationInfo = {\n\tauthMode: GRAPHQL_AUTH_MODE;\n\tisOwner: boolean;\n\townerField?: string;\n\townerValue?: string;\n};\n\nclass SubscriptionProcessor {\n\tprivate readonly typeQuery = new WeakMap<\n\t\tSchemaModel,\n\t\t[TransformerMutationType, string, string][]\n\t>();\n\tprivate buffer: [TransformerMutationType, SchemaModel, PersistentModel][] =\n\t\t[];\n\tprivate dataObserver!: ZenObservable.Observer<any>;\n\n\tprivate runningProcesses = new BackgroundProcessManager();\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly errorHandler: ErrorHandler,\n\t\tprivate readonly amplifyContext: AmplifyContext = { Auth, API, Cache }\n\t) {}\n\n\tprivate buildSubscription(\n\t\tnamespace: SchemaNamespace,\n\t\tmodel: SchemaModel,\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tcognitoTokenPayload: { [field: string]: any } | undefined,\n\t\toidcTokenPayload: { [field: string]: any } | undefined,\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): {\n\t\topType: TransformerMutationType;\n\t\topName: string;\n\t\tquery: string;\n\t\tauthMode: GRAPHQL_AUTH_MODE;\n\t\tisOwner: boolean;\n\t\townerField?: string;\n\t\townerValue?: string;\n\t} {\n\t\tconst { aws_appsync_authenticationType } = this.amplifyConfig;\n\t\tconst { isOwner, ownerField, ownerValue } =\n\t\t\tthis.getAuthorizationInfo(\n\t\t\t\tmodel,\n\t\t\t\tuserCredentials,\n\t\t\t\taws_appsync_authenticationType,\n\t\t\t\tcognitoTokenPayload,\n\t\t\t\toidcTokenPayload,\n\t\t\t\tauthMode\n\t\t\t) || {};\n\n\t\tconst [opType, opName, query] = buildSubscriptionGraphQLOperation(\n\t\t\tnamespace,\n\t\t\tmodel,\n\t\t\ttransformerMutationType,\n\t\t\tisOwner,\n\t\t\townerField!\n\t\t);\n\t\treturn { authMode, opType, opName, query, isOwner, ownerField, ownerValue };\n\t}\n\n\tprivate getAuthorizationInfo(\n\t\tmodel: SchemaModel,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tdefaultAuthType: GRAPHQL_AUTH_MODE,\n\t\tcognitoTokenPayload: { [field: string]: any } = {},\n\t\toidcTokenPayload: { [field: string]: any } = {},\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): AuthorizationInfo {\n\t\tconst rules = getAuthorizationRules(model);\n\n\t\t// Return null if user doesn't have proper credentials for private API with IAM auth\n\t\tconst iamPrivateAuth =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AWS_IAM &&\n\t\t\trules.find(\n\t\t\t\trule => rule.authStrategy === 'private' && rule.provider === 'iam'\n\t\t\t);\n\n\t\tif (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n\t\t\treturn null!;\n\t\t}\n\n\t\t// Group auth should take precedence over owner auth, so we are checking\n\t\t// if rule(s) have group authorization as well as if either the Cognito or\n\t\t// OIDC token has a groupClaim. If so, we are returning auth info before\n\t\t// any further owner-based auth checks.\n\t\tconst groupAuthRules = rules.filter(\n\t\t\trule =>\n\t\t\t\trule.authStrategy === 'groups' &&\n\t\t\t\t['userPools', 'oidc'].includes(rule.provider)\n\t\t);\n\n\t\tconst validGroup =\n\t\t\t(authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ||\n\t\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) &&\n\t\t\tgroupAuthRules.find(groupAuthRule => {\n\t\t\t\t// validate token against groupClaim\n\t\t\t\tconst cognitoUserGroups = getUserGroupsFromToken(\n\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\t\t\t\tconst oidcUserGroups = getUserGroupsFromToken(\n\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\n\t\t\t\treturn [...cognitoUserGroups, ...oidcUserGroups].find(userGroup => {\n\t\t\t\t\treturn groupAuthRule.groups.find(group => group === userGroup);\n\t\t\t\t});\n\t\t\t});\n\n\t\tif (validGroup) {\n\t\t\treturn {\n\t\t\t\tauthMode,\n\t\t\t\tisOwner: false,\n\t\t\t};\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the Cognito token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst cognitoOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule =>\n\t\t\t\t\t\t\trule.authStrategy === 'owner' && rule.provider === 'userPools'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\tlet ownerAuthInfo: AuthorizationInfo;\n\t\tcognitoOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n\t\t\t\t\tisOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo!) {\n\t\t\treturn ownerAuthInfo!;\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the OIDC token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst oidcOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule => rule.authStrategy === 'owner' && rule.provider === 'oidc'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\toidcOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n\t\t\t\t\tisOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo!) {\n\t\t\treturn ownerAuthInfo!;\n\t\t}\n\n\t\t// Fallback: return authMode or default auth type\n\t\treturn {\n\t\t\tauthMode: authMode || defaultAuthType,\n\t\t\tisOwner: false,\n\t\t};\n\t}\n\n\tprivate hubQueryCompletionListener(completed: Function, capsule: HubCapsule) {\n\t\tconst {\n\t\t\tpayload: { event },\n\t\t} = capsule;\n\n\t\tif (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n\t\t\tcompleted();\n\t\t}\n\t}\n\n\tstart(): [\n\t\tObservable<CONTROL_MSG>,\n\t\tObservable<[TransformerMutationType, SchemaModel, PersistentModel]>\n\t] {\n\t\tthis.runningProcesses =\n\t\t\tthis.runningProcesses || new BackgroundProcessManager();\n\n\t\tconst ctlObservable = new Observable<CONTROL_MSG>(observer => {\n\t\t\tconst promises: Promise<void>[] = [];\n\n\t\t\t// Creating subs for each model/operation combo so they can be unsubscribed\n\t\t\t// independently, since the auth retry behavior is asynchronous.\n\t\t\tlet subscriptions: {\n\t\t\t\t[modelName: string]: {\n\t\t\t\t\t[TransformerMutationType.CREATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.UPDATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.DELETE]: ZenObservable.Subscription[];\n\t\t\t\t};\n\t\t\t} = {};\n\t\t\tlet cognitoTokenPayload: { [field: string]: any },\n\t\t\t\toidcTokenPayload: { [field: string]: any };\n\t\t\tlet userCredentials = USER_CREDENTIALS.none;\n\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current AWS Credentials\n\t\t\t\t\tconst credentials =\n\t\t\t\t\t\tawait this.amplifyContext.Auth.currentCredentials();\n\t\t\t\t\tuserCredentials = credentials.authenticated\n\t\t\t\t\t\t? USER_CREDENTIALS.auth\n\t\t\t\t\t\t: USER_CREDENTIALS.unauth;\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get AWS credentials\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current token info from Cognito UserPools\n\t\t\t\t\tconst session = await this.amplifyContext.Auth.currentSession();\n\t\t\t\t\tcognitoTokenPayload = session.getIdToken().decodePayload();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get jwt from Cognito\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Checking for the Cognito region in config to see if Auth is configured\n\t\t\t\t\t// before attempting to get federated token. We're using the Cognito region\n\t\t\t\t\t// because it will be there regardless of user/identity pool being present.\n\t\t\t\t\tconst { aws_cognito_region, Auth: AuthConfig } = this.amplifyConfig;\n\t\t\t\t\tif (!aws_cognito_region || (AuthConfig && !AuthConfig.region)) {\n\t\t\t\t\t\tthrow 'Auth is not configured';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet token;\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tconst federatedInfo = await this.amplifyContext.Cache.getItem(\n\t\t\t\t\t\t'federatedInfo'\n\t\t\t\t\t);\n\t\t\t\t\tif (federatedInfo) {\n\t\t\t\t\t\ttoken = federatedInfo.token;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst currentUser =\n\t\t\t\t\t\t\tawait this.amplifyContext.Auth.currentAuthenticatedUser();\n\t\t\t\t\t\tif (currentUser) {\n\t\t\t\t\t\t\ttoken = currentUser.token;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tconst payload = token.split('.')[1];\n\t\t\t\t\t\toidcTokenPayload = JSON.parse(\n\t\t\t\t\t\t\tBuffer.from(payload, 'base64').toString('utf8')\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('error getting OIDC JWT', err);\n\t\t\t\t\t// best effort to get oidc jwt\n\t\t\t\t}\n\n\t\t\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\t\t\tObject.values(namespace.models)\n\t\t\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t\t\t.forEach(\n\t\t\t\t\t\t\tmodelDefinition =>\n\t\t\t\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\t\t\t\t\t\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\t\t\t\t\t\t\t\tdefaultAuthMode:\n\t\t\t\t\t\t\t\t\t\t\tthis.amplifyConfig.aws_appsync_authenticationType,\n\t\t\t\t\t\t\t\t\t\tmodelName: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\tschema: this.schema,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// subscriptions are created only based on the READ auth mode(s)\n\t\t\t\t\t\t\t\t\tconst readAuthModes = modelAuthModes.READ;\n\n\t\t\t\t\t\t\t\t\tsubscriptions = {\n\t\t\t\t\t\t\t\t\t\t...subscriptions,\n\t\t\t\t\t\t\t\t\t\t[modelDefinition.name]: {\n\t\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: [],\n\t\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: [],\n\t\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: [],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tconst operations = [\n\t\t\t\t\t\t\t\t\t\tTransformerMutationType.CREATE,\n\t\t\t\t\t\t\t\t\t\tTransformerMutationType.UPDATE,\n\t\t\t\t\t\t\t\t\t\tTransformerMutationType.DELETE,\n\t\t\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t\t\tconst operationAuthModeAttempts = {\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: 0,\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: 0,\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: 0,\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t// Retry failed subscriptions with next auth mode (if available)\n\t\t\t\t\t\t\t\t\tconst authModeRetry = async operation => {\n\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\topType: transformerMutationType,\n\t\t\t\t\t\t\t\t\t\t\topName,\n\t\t\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t\t\tisOwner,\n\t\t\t\t\t\t\t\t\t\t\townerField,\n\t\t\t\t\t\t\t\t\t\t\townerValue,\n\t\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\t} = this.buildSubscription(\n\t\t\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\t\tuserCredentials,\n\t\t\t\t\t\t\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\t\t\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]]\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tconst variables = {};\n\n\t\t\t\t\t\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\t\t\t\t\t\tif (!ownerValue) {\n\t\t\t\t\t\t\t\t\t\t\t\tobserver.error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Owner field required, sign in is needed in order to perform this operation'\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tvariables[ownerField!] = ownerValue;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Attempting ${operation} subscription with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]]\n\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tconst userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n\n\t\t\t\t\t\t\t\t\t\tconst queryObservable = <\n\t\t\t\t\t\t\t\t\t\t\tObservable<{\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: GraphQLResult<Record<string, PersistentModel>>;\n\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t>(<unknown>this.amplifyContext.API.graphql({\n\t\t\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t\t\tvariables,\n\t\t\t\t\t\t\t\t\t\t\t...{ authMode },\n\t\t\t\t\t\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\t\t\t\t\t\tuserAgentSuffix,\n\t\t\t\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t\t\t\t\tlet subscriptionReadyCallback: () => void;\n\n\t\t\t\t\t\t\t\t\t\t// TODO: consider onTerminate.then(() => API.cancel(...))\n\n\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t].push(\n\t\t\t\t\t\t\t\t\t\t\tqueryObservable\n\t\t\t\t\t\t\t\t\t\t\t\t.map(({ value }) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext: ({ data, errors }) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Array.isArray(errors) && errors.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst messages = (<\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: string;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}[]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>errors).map(({ message }) => message);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Skipping incoming subscription. Messages: ${messages.join(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\\n'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst predicatesGroup =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tModelPredicateCreator.getPredicates(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.syncPredicates.get(modelDefinition)!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst { [opName]: record } = data;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// checking incoming subscription against syncPredicate.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// once AppSync implements filters on subscriptions, we'll be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// able to set these when establishing the subscription instead.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Until then, we'll need to filter inbound\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.passesPredicateValidation(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpredicatesGroup!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.pushToBuffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\terror: async subscriptionError => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: { errors: [{ message = '' } = {}] } = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors: [],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} = subscriptionError;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPUBSUB_CONTROL_MSG.CONNECTION_FAILED\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Unsubscribe and clear subscription array for model/operation\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].forEach(subscription =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscription.unsubscribe()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = [];\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] >=\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes.length\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// last auth mode retry. Continue with error\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// retry with different auth mode. Do not trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// observer error or error handler\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}. Retrying with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthModeRetry(operation);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn('subscriptionError', message);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.errorHandler({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocalModel: null!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terrorType:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetSubscriptionErrorType(subscriptionError),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.subscribe,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteModel: null!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcause: subscriptionError,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Subscription error handler failed with:',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttypeof subscriptionReadyCallback === 'function'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes('\"errorType\":\"Unauthorized\"') ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\"errorType\":\"OperationDisabled\"'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tobserver.error(message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\t\t\t\tlet boundFunction: any;\n\n\t\t\t\t\t\t\t\t\t\t\t\tawait new Promise(res => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback = res;\n\t\t\t\t\t\t\t\t\t\t\t\t\tboundFunction = this.hubQueryCompletionListener.bind(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tres\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\tHub.listen('api', boundFunction);\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\tHub.remove('api', boundFunction);\n\t\t\t\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\toperations.forEach(op => authModeRetry(op));\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\tthis.runningProcesses.add(() =>\n\t\t\t\t\t\tPromise.all(promises).then(() => {\n\t\t\t\t\t\t\tobserver.next(CONTROL_MSG.CONNECTED);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t}, 'subscription processor new subscriber');\n\n\t\t\treturn this.runningProcesses.addCleaner(async () => {\n\t\t\t\tObject.keys(subscriptions).forEach(modelName => {\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.CREATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.UPDATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.DELETE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst dataObservable = new Observable<\n\t\t\t[TransformerMutationType, SchemaModel, PersistentModel]\n\t\t>(observer => {\n\t\t\tthis.dataObserver = observer;\n\t\t\tthis.drainBuffer();\n\n\t\t\treturn this.runningProcesses.addCleaner(async () => {\n\t\t\t\tthis.dataObserver = null!;\n\t\t\t});\n\t\t});\n\n\t\treturn [ctlObservable, dataObservable];\n\t}\n\n\tpublic async stop() {\n\t\tawait this.runningProcesses.close();\n\t\tawait this.runningProcesses.open();\n\t}\n\n\tprivate passesPredicateValidation(\n\t\trecord: PersistentModel,\n\t\tpredicatesGroup: PredicatesGroup<any>\n\t): boolean {\n\t\tif (!predicatesGroup) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst { predicates, type } = predicatesGroup;\n\n\t\treturn validatePredicate(record, type, predicates);\n\t}\n\n\tprivate pushToBuffer(\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tmodelDefinition: SchemaModel,\n\t\tdata: PersistentModel\n\t) {\n\t\tthis.buffer.push([transformerMutationType, modelDefinition, data]);\n\t}\n\n\tprivate drainBuffer() {\n\t\tif (this.dataObserver) {\n\t\t\tthis.buffer.forEach(data => this.dataObserver.next!(data));\n\t\t\tthis.buffer = [];\n\t\t}\n\t}\n}\n\nexport { SubscriptionProcessor };\n"]},"metadata":{},"sourceType":"module"}
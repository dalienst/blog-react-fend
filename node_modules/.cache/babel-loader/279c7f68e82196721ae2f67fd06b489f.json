{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConnectionState } from '../types/PubSub';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor } from '../utils/ReconnectionMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n  var filterArray = filter.split('/');\n  var length = filterArray.length;\n  var topicArray = topic.split('/');\n\n  for (var i = 0; i < length; ++i) {\n    var left = filterArray[i];\n    var right = topicArray[i];\n    if (left === '#') return topicArray.length >= length;\n    if (left !== '+' && left !== right) return false;\n  }\n\n  return length === topicArray.length;\n}\n\nvar ClientsQueue =\n/** @class */\nfunction () {\n  function ClientsQueue() {\n    this.promises = new Map();\n  }\n\n  ClientsQueue.prototype.get = function (clientId, clientFactory) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedPromise, newPromise;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        cachedPromise = this.promises.get(clientId);\n        if (cachedPromise) return [2\n        /*return*/\n        , cachedPromise];\n\n        if (clientFactory) {\n          newPromise = clientFactory(clientId);\n          this.promises.set(clientId, newPromise);\n          newPromise.catch(function (v) {\n            return _this.promises.delete(clientId);\n          });\n          return [2\n          /*return*/\n          , newPromise];\n        }\n\n        return [2\n        /*return*/\n        , undefined];\n      });\n    });\n  };\n\n  Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n    get: function () {\n      return Array.from(this.promises.keys());\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ClientsQueue.prototype.remove = function (clientId) {\n    this.promises.delete(clientId);\n  };\n\n  return ClientsQueue;\n}();\n\nvar dispatchPubSubEvent = function (event, data, message) {\n  Hub.dispatch('pubsub', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\n\nvar MqttOverWSProvider =\n/** @class */\nfunction (_super) {\n  __extends(MqttOverWSProvider, _super);\n\n  function MqttOverWSProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, __assign(__assign({}, options), {\n      clientId: options.clientId || uuid()\n    })) || this;\n\n    _this._clientsQueue = new ClientsQueue();\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this.reconnectionMonitor = new ReconnectionMonitor();\n    _this._topicObservers = new Map();\n    _this._clientIdObservers = new Map(); // Monitor the connection health state and pass changes along to Hub\n\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionStateChange) {\n      dispatchPubSubEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionStateChange\n      }, \"Connection state is \" + connectionStateChange);\n      _this.connectionState = connectionStateChange; // Trigger reconnection when the connection is disrupted\n\n      if (connectionStateChange === ConnectionState.ConnectionDisrupted) {\n        _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n      } else if (connectionStateChange !== ConnectionState.Connecting) {\n        // Trigger connected to halt reconnection attempts\n        _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n      }\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n    get: function () {\n      return this.options.clientId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n    get: function () {\n      return this.options.aws_pubsub_endpoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n    get: function () {\n      return this._clientsQueue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MqttOverWSProvider.prototype.getTopicForValue = function (value) {\n    return typeof value === 'object' && value[topicSymbol];\n  };\n\n  MqttOverWSProvider.prototype.getProviderName = function () {\n    return 'MqttOverWSProvider';\n  };\n\n  MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n    var clientId = _a.clientId,\n        errorCode = _a.errorCode,\n        args = __rest(_a, [\"clientId\", \"errorCode\"]);\n\n    if (errorCode !== 0) {\n      logger.warn(clientId, JSON.stringify(__assign({\n        errorCode: errorCode\n      }, args), null, 2));\n\n      if (!clientId) {\n        return;\n      }\n\n      var clientIdObservers = this._clientIdObservers.get(clientId);\n\n      if (!clientIdObservers) {\n        return;\n      }\n\n      this.disconnect(clientId);\n    }\n  };\n\n  MqttOverWSProvider.prototype.newClient = function (_a) {\n    var url = _a.url,\n        clientId = _a.clientId;\n    return __awaiter(this, void 0, void 0, function () {\n      var client, connected;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('Creating new MQTT client', clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            client = new Paho.Client(url, clientId);\n\n            client.onMessageArrived = function (_a) {\n              var topic = _a.destinationName,\n                  msg = _a.payloadString;\n\n              _this._onMessage(topic, msg);\n            };\n\n            client.onConnectionLost = function (_a) {\n              var errorCode = _a.errorCode,\n                  args = __rest(_a, [\"errorCode\"]);\n\n              _this.onDisconnect(__assign({\n                clientId: clientId,\n                errorCode: errorCode\n              }, args));\n\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            };\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              client.connect({\n                useSSL: _this.isSSLEnabled,\n                mqttVersion: 3,\n                onSuccess: function () {\n                  return resolve(true);\n                },\n                onFailure: function (x) {\n                  if (clientId) _this._clientsQueue.remove(clientId);\n\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\n                  resolve(false);\n                }\n              });\n            })];\n\n          case 1:\n            connected = _b.sent();\n\n            if (connected) {\n              this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n            }\n\n            return [2\n            /*return*/\n            , client];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.connect = function (clientId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId, function (clientId) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var client;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.newClient(__assign(__assign({}, options), {\n                        clientId: clientId\n                      }))];\n\n                    case 1:\n                      client = _a.sent();\n\n                      if (client) {\n                        // Once connected, subscribe to all topics registered observers\n                        this._topicObservers.forEach(function (_value, key) {\n                          client.subscribe(key);\n                        });\n                      }\n\n                      return [2\n                      /*return*/\n                      , client];\n                  }\n                });\n              });\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId)];\n\n          case 1:\n            client = _a.sent();\n\n            if (client && client.isConnected()) {\n              client.disconnect();\n            }\n\n            this.clientsQueue.remove(clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.publish = function (topics, msg) {\n    return __awaiter(this, void 0, void 0, function () {\n      var targetTopics, message, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            targetTopics = [].concat(topics);\n            message = JSON.stringify(msg);\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(this.clientId)];\n\n          case 1:\n            client = _a.sent();\n\n            if (client) {\n              logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n              targetTopics.forEach(function (topic) {\n                return client.send(topic, message);\n              });\n            } else {\n              logger.debug('Publishing to topic(s) failed', targetTopics.join(','), message);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n    try {\n      var matchedTopicObservers_1 = [];\n\n      this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n        if (mqttTopicMatch(observerTopic, topic)) {\n          matchedTopicObservers_1.push(observerForTopic);\n        }\n      });\n\n      var parsedMessage_1 = JSON.parse(msg);\n\n      if (typeof parsedMessage_1 === 'object') {\n        parsedMessage_1[topicSymbol] = topic;\n      }\n\n      matchedTopicObservers_1.forEach(function (observersForTopic) {\n        observersForTopic.forEach(function (observer) {\n          return observer.next(parsedMessage_1);\n        });\n      });\n    } catch (error) {\n      logger.warn('Error handling message', error, msg);\n    }\n  };\n\n  MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var targetTopics = [].concat(topics);\n    logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n    var reconnectSubscription;\n    return new Observable(function (observer) {\n      targetTopics.forEach(function (topic) {\n        // this._topicObservers is used to notify the observers according to the topic received on the message\n        var observersForTopic = _this._topicObservers.get(topic);\n\n        if (!observersForTopic) {\n          observersForTopic = new Set();\n\n          _this._topicObservers.set(topic, observersForTopic);\n        }\n\n        observersForTopic.add(observer);\n      });\n      var _a = options.clientId,\n          clientId = _a === void 0 ? _this.clientId : _a; // this._clientIdObservers is used to close observers when client gets disconnected\n\n      var observersForClientId = _this._clientIdObservers.get(clientId);\n\n      if (!observersForClientId) {\n        observersForClientId = new Set();\n      }\n\n      observersForClientId.add(observer);\n\n      _this._clientIdObservers.set(clientId, observersForClientId);\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var getClient;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                getClient = function () {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var _a, url, _b, client_1, e_1;\n\n                    return __generator(this, function (_c) {\n                      switch (_c.label) {\n                        case 0:\n                          _c.trys.push([0, 5,, 6]);\n\n                          _a = options.url;\n                          if (!(_a === void 0)) return [3\n                          /*break*/\n                          , 2];\n                          return [4\n                          /*yield*/\n                          , this.endpoint];\n\n                        case 1:\n                          _b = _c.sent();\n                          return [3\n                          /*break*/\n                          , 3];\n\n                        case 2:\n                          _b = _a;\n                          _c.label = 3;\n\n                        case 3:\n                          url = _b;\n                          return [4\n                          /*yield*/\n                          , this.connect(clientId, {\n                            url: url\n                          })];\n\n                        case 4:\n                          client_1 = _c.sent();\n\n                          if (client_1 !== undefined) {\n                            targetTopics.forEach(function (topic) {\n                              client_1.subscribe(topic);\n                            });\n                          }\n\n                          return [3\n                          /*break*/\n                          , 6];\n\n                        case 5:\n                          e_1 = _c.sent();\n                          logger.debug('Error forming connection', e_1);\n                          return [3\n                          /*break*/\n                          , 6];\n\n                        case 6:\n                          return [2\n                          /*return*/\n                          ];\n                      }\n                    });\n                  });\n                }; // Establish the initial connection\n\n\n                return [4\n                /*yield*/\n                , getClient()];\n\n              case 1:\n                // Establish the initial connection\n                _a.sent(); // Add an observable to the reconnection list to manage reconnection for this subscription\n\n\n                reconnectSubscription = new Observable(function (observer) {\n                  _this.reconnectionMonitor.addObserver(observer);\n                }).subscribe(function () {\n                  getClient();\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var client;\n\n          var _this = this;\n\n          var _a, _b;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.clientsQueue.get(clientId)];\n\n              case 1:\n                client = _c.sent();\n                reconnectSubscription === null || reconnectSubscription === void 0 ? void 0 : reconnectSubscription.unsubscribe();\n\n                if (client) {\n                  (_a = this._clientIdObservers.get(clientId)) === null || _a === void 0 ? void 0 : _a.delete(observer); // No more observers per client => client not needed anymore\n\n                  if (((_b = this._clientIdObservers.get(clientId)) === null || _b === void 0 ? void 0 : _b.size) === 0) {\n                    this.disconnect(clientId);\n                    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n                    this._clientIdObservers.delete(clientId);\n                  }\n\n                  targetTopics.forEach(function (topic) {\n                    var observersForTopic = _this._topicObservers.get(topic) || new Set();\n                    observersForTopic.delete(observer); // if no observers exists for the topic, topic should be removed\n\n                    if (observersForTopic.size === 0) {\n                      _this._topicObservers.delete(topic);\n\n                      if (client.isConnected()) {\n                        client.unsubscribe(topic);\n                      }\n                    }\n                  });\n                }\n\n                return [2\n                /*return*/\n                , null];\n            }\n          });\n        });\n      };\n    });\n  };\n\n  return MqttOverWSProvider;\n}(AbstractPubSubProvider);\n\nexport { MqttOverWSProvider };","map":{"version":3,"mappings":"6EAAA;AACA;;AACA,OAAO,KAAKA,IAAZ,MAAsB,WAAtB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,OAAOC,UAAP,MAA0C,mBAA1C;AAEA,SAASC,sBAAT,QAAuC,kBAAvC;AACA,SAA+BC,eAA/B,QAAsD,iBAAtD;AAEA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,GAAlC,QAA6C,mBAA7C;AACA,SACCC,sBADD,EAECC,iBAFD,QAGO,iCAHP;AAIA,SACCC,cADD,EAECC,mBAFD,QAGO,8BAHP;AAIA,SAASC,cAAT,EAAyBC,uBAAzB,QAAwD,aAAxD;AAEA,IAAMC,MAAM,GAAG,IAAIR,MAAJ,CAAW,oBAAX,CAAf;AAEA,OAAM,SAAUS,cAAV,CAAyBC,MAAzB,EAAyCC,KAAzC,EAAsD;AAC3D,MAAMC,WAAW,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,CAApB;AACA,MAAMC,MAAM,GAAGF,WAAW,CAACE,MAA3B;AACA,MAAMC,UAAU,GAAGJ,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAnB;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4B,EAAEE,CAA9B,EAAiC;AAChC,QAAMC,IAAI,GAAGL,WAAW,CAACI,CAAD,CAAxB;AACA,QAAME,KAAK,GAAGH,UAAU,CAACC,CAAD,CAAxB;AACA,QAAIC,IAAI,KAAK,GAAb,EAAkB,OAAOF,UAAU,CAACD,MAAX,IAAqBA,MAA5B;AAClB,QAAIG,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAKC,KAA7B,EAAoC,OAAO,KAAP;AACpC;;AACD,SAAOJ,MAAM,KAAKC,UAAU,CAACD,MAA7B;AACA;;AAOD;AAAA;AAAA;AAAA;AACS,oBAAsC,IAAIK,GAAJ,EAAtC;AAuBR;;AArBMC,+BAAN,UAAUC,QAAV,EAA4BC,aAA5B,EAA2E;;;;;;;AACpEC,qBAAa,GAAG,KAAKC,QAAL,CAAcC,GAAd,CAAkBJ,QAAlB,CAAhB;AACN,YAAIE,aAAJ,EAAmB;AAAA;AAAA,UAAOA,aAAP;;AAEnB,YAAID,aAAJ,EAAmB;AACZI,oBAAU,GAAGJ,aAAa,CAACD,QAAD,CAA1B;AACN,eAAKG,QAAL,CAAcG,GAAd,CAAkBN,QAAlB,EAA4BK,UAA5B;AACAA,oBAAU,CAACE,KAAX,CAAiB,aAAC;AAAI,wBAAI,CAACJ,QAAL,CAAcK,MAAd,CAAqBR,QAArB;AAA8B,WAApD;AACA;AAAA;AAAA,YAAOK,UAAP;AACA;;AAED;AAAA;AAAA,UAAOI,SAAP;;;AACA,GAZK;;AAcNC,wBAAIX,sBAAJ,EAAI,YAAJ,EAAc;SAAd;AACC,aAAOY,KAAK,CAACC,IAAN,CAAW,KAAKT,QAAL,CAAcU,IAAd,EAAX,CAAP;AACA,KAFa;oBAAA;;AAAA,GAAd;;AAIAd,4CAAOC,QAAP,EAAuB;AACtB,SAAKG,QAAL,CAAcK,MAAd,CAAqBR,QAArB;AACA,GAFD;;AAGD;AAAC,CAxBD;;AA0BA,IAAMc,mBAAmB,GAAG,UAACC,KAAD,EAAgBC,IAAhB,EAA2BC,OAA3B,EAA0C;AACrErC,KAAG,CAACsC,QAAJ,CAAa,QAAb,EAAuB;AAAEH,SAAK,OAAP;AAASC,QAAI,MAAb;AAAeC,WAAO;AAAtB,GAAvB,EAAiD,QAAjD,EAA2DhC,cAA3D;AACA,CAFD;;AAIA,IAAMkC,WAAW,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAM,CAAC,OAAD,CAAtC,GAAkD,SAAtE;;AAEA;AAAA;AAAA;AAAwCC;;AAMvC,8BAAYC,OAAZ,EAA6C;AAAjC;AAAAA;AAAiC;;AAA7C,gBACCC,wCAAWD,OAAX,GAAkB;AAAEtB,cAAQ,EAAEsB,OAAO,CAACtB,QAAR,IAAoB1B,IAAI;AAApC,KAAlB,MAA2D,IAD5D;;AALQkD,0BAAgB,IAAIzB,YAAJ,EAAhB;AAESyB,mCAAyB,IAAI3C,sBAAJ,EAAzB;AACA2C,gCAAsB,IAAIxC,mBAAJ,EAAtB;AA4KPwC,4BACT,IAAI1B,GAAJ,EADS;AAGA0B,+BACT,IAAI1B,GAAJ,EADS,CA7KmC,CAG5C;;AACA0B,SAAI,CAACC,sBAAL,CAA4BC,yBAA5B,CAAsDC,SAAtD,CACC,iCAAqB;AACpBb,yBAAmB,CAClB5B,uBADkB,EAElB;AACC0C,gBAAQ,EAAEJ,KADX;AAECK,uBAAe,EAAEC;AAFlB,OAFkB,EAMlB,yBAAuBA,qBANL,CAAnB;AASAN,WAAI,CAACK,eAAL,GAAuBC,qBAAvB,CAVoB,CAYpB;;AACA,UAAIA,qBAAqB,KAAKrD,eAAe,CAACsD,mBAA9C,EAAmE;AAClEP,aAAI,CAACQ,mBAAL,CAAyBC,MAAzB,CAAgClD,cAAc,CAACmD,eAA/C;AACA,OAFD,MAEO,IAAIJ,qBAAqB,KAAKrD,eAAe,CAAC0D,UAA9C,EAA0D;AAChE;AACAX,aAAI,CAACQ,mBAAL,CAAyBC,MAAzB,CAAgClD,cAAc,CAACqD,cAA/C;AACA;AACD,KApBF;;;AAsBA;;AAED1B,wBAAc2B,4BAAd,EAAc,UAAd,EAAsB;SAAtB;AACC,aAAO,KAAKf,OAAL,CAAatB,QAApB;AACA,KAFqB;oBAAA;;AAAA,GAAtB;AAIAU,wBAAc2B,4BAAd,EAAc,UAAd,EAAsB;SAAtB;AACC,aAAO,KAAKf,OAAL,CAAagB,mBAApB;AACA,KAFqB;oBAAA;;AAAA,GAAtB;AAIA5B,wBAAc2B,4BAAd,EAAc,cAAd,EAA0B;SAA1B;AACC,aAAO,KAAKE,aAAZ;AACA,KAFyB;oBAAA;;AAAA,GAA1B;AAIA7B,wBAAc2B,4BAAd,EAAc,cAAd,EAA0B;SAA1B;AACC,aAAO,CAAC,KAAKf,OAAL,CACNkB,4DADF;AAEA,KAHyB;oBAAA;;AAAA,GAA1B;;AAKUH,kDAAV,UAA2BI,KAA3B,EAAqC;AACpC,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACtB,WAAD,CAAzC;AACA,GAFS;;AAIVkB;AACC,WAAO,oBAAP;AACA,GAFD;;AAIOA,8CAAP,UAAoBK,EAApB,EAOC;AANA;AAAA,QACAC,wBADA;AAAA,QAEAC,4CAFA;;AAOA,QAAID,SAAS,KAAK,CAAlB,EAAqB;AACpBxD,YAAM,CAAC0D,IAAP,CAAY7C,QAAZ,EAAsB8C,IAAI,CAACC,SAAL,CAAcC;AAAGL,iBAAS;AAAZ,SAAiBC,IAAjB,CAAd,EAAuC,IAAvC,EAA6C,CAA7C,CAAtB;;AAEA,UAAI,CAAC5C,QAAL,EAAe;AACd;AACA;;AACD,UAAMiD,iBAAiB,GAAG,KAAKC,kBAAL,CAAwB9C,GAAxB,CAA4BJ,QAA5B,CAA1B;;AACA,UAAI,CAACiD,iBAAL,EAAwB;AACvB;AACA;;AACD,WAAKE,UAAL,CAAgBnD,QAAhB;AACA;AACD,GApBM;;AAsBMqC,2CAAb,UAAuBK,EAAvB,EAA6D;QAApCU;QAAKpD;;;;;;;;;AAC7Bb,kBAAM,CAACkE,KAAP,CAAa,0BAAb,EAAyCrD,QAAzC;AAEA,iBAAKyB,sBAAL,CAA4BQ,MAA5B,CAAmCnD,iBAAiB,CAACwE,kBAArD;AAEMC,kBAAM,GAAG,IAAInF,IAAI,CAACoF,MAAT,CAAgBJ,GAAhB,EAAqBpD,QAArB,CAAT;;AAENuD,kBAAM,CAACE,gBAAP,GAA0B,UAACf,EAAD,EAMzB;kBALApD;kBACAoE;;AAKAlC,mBAAI,CAACmC,UAAL,CAAgBrE,KAAhB,EAAuBoE,GAAvB;AACA,aARD;;AASAH,kBAAM,CAACK,gBAAP,GAA0B,UAAClB,EAAD,EAKzB;AAJA;AAAA,kBACAE,gCADA;;AAKApB,mBAAI,CAACqC,YAAL,CAAiBb;AAAGhD,wBAAQ,UAAX;AAAa2C,yBAAS;AAAtB,iBAA2BC,IAA3B,CAAjB;;AACApB,mBAAI,CAACC,sBAAL,CAA4BQ,MAA5B,CAAmCnD,iBAAiB,CAACgF,MAArD;AACA,aARD;;AAUkB;AAAA;AAAA,cAAM,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AACnDV,oBAAM,CAACW,OAAP,CAAe;AACdC,sBAAM,EAAE3C,KAAI,CAAC4C,YADC;AAEdC,2BAAW,EAAE,CAFC;AAGdC,yBAAS,EAAE;AAAM,gCAAO,CAAC,IAAD,CAAP;AAAa,iBAHhB;AAIdC,yBAAS,EAAE,aAAC;AACX,sBAAIvE,QAAJ,EAAcwB,KAAI,CAACe,aAAL,CAAmBiC,MAAnB,CAA0BxE,QAA1B;;AACdwB,uBAAI,CAACC,sBAAL,CAA4BQ,MAA5B,CAAmCnD,iBAAiB,CAACgF,MAArD;;AACAE,yBAAO,CAAC,KAAD,CAAP;AACA;AARa,eAAf;AAUA,aAXuB,CAAN;;;AAAZS,qBAAS,GAAGC,SAAZ;;AAaN,gBAAID,SAAJ,EAAe;AACd,mBAAKhD,sBAAL,CAA4BQ,MAA5B,CACCnD,iBAAiB,CAAC6F,sBADnB;AAGA;;AAED;AAAA;AAAA,cAAOpB,MAAP;;;;AACA,GA9CY;;AAgDGlB,yCAAhB,UACCrC,QADD,EAECsB,OAFD,EAEkC;AAAjC;AAAAA;AAAiC;;;;;;;;AAE1B;AAAA;AAAA,cAAM,KAAKsD,YAAL,CAAkBxE,GAAlB,CAAsBJ,QAAtB,EAAgC,UAAMA,QAAN,EAAc;AAAA;;;;;AAC3C;AAAA;AAAA,wBAAM,KAAK6E,SAAL,CAAc7B,sBAAM1B,OAAN,GAAa;AAAEtB,gCAAQ;AAAV,uBAAb,CAAd,CAAN;;;AAATuD,4BAAM,GAAGb,SAAT;;AAEN,0BAAIa,MAAJ,EAAY;AACX;AACA,6BAAKuB,eAAL,CAAqBC,OAArB,CACC,UAACC,MAAD,EAAyCC,GAAzC,EAAoD;AACnD1B,gCAAM,CAAC5B,SAAP,CAAiBsD,GAAjB;AACA,yBAHF;AAKA;;AACD;AAAA;AAAA,wBAAO1B,MAAP;;;eAX0D;AAY1D,aAZY,CAAN;;;AAAP;AAAA;AAAA,cAAOb,SAAP;;;;AAaA,GAjBe;;AAmBAL,4CAAhB,UAA2BrC,QAA3B,EAA2C;;;;;;AAC3B;AAAA;AAAA,cAAM,KAAK4E,YAAL,CAAkBxE,GAAlB,CAAsBJ,QAAtB,CAAN;;;AAATuD,kBAAM,GAAGb,SAAT;;AAEN,gBAAIa,MAAM,IAAIA,MAAM,CAAC2B,WAAP,EAAd,EAAoC;AACnC3B,oBAAM,CAACJ,UAAP;AACA;;AACD,iBAAKyB,YAAL,CAAkBJ,MAAlB,CAAyBxE,QAAzB;AACA,iBAAKyB,sBAAL,CAA4BQ,MAA5B,CAAmCnD,iBAAiB,CAACgF,MAArD;;;;;;;AACA,GARe;;AAUVzB,yCAAN,UAAc8C,MAAd,EAAyCzB,GAAzC,EAAiD;;;;;;AAC1C0B,wBAAY,GAAI,GAAgBC,MAAhB,CAAuBF,MAAvB,CAAhB;AACAlE,mBAAO,GAAG6B,IAAI,CAACC,SAAL,CAAeW,GAAf,CAAV;AAES;AAAA;AAAA,cAAM,KAAKkB,YAAL,CAAkBxE,GAAlB,CAAsB,KAAKJ,QAA3B,CAAN;;;AAATuD,kBAAM,GAAGb,SAAT;;AAEN,gBAAIa,MAAJ,EAAY;AACXpE,oBAAM,CAACkE,KAAP,CAAa,wBAAb,EAAuC+B,YAAY,CAACE,IAAb,CAAkB,GAAlB,CAAvC,EAA+DrE,OAA/D;AACAmE,0BAAY,CAACL,OAAb,CAAqB,iBAAK;AAAI,6BAAM,CAACQ,IAAP,CAAYjG,KAAZ,EAAmB2B,OAAnB;AAA2B,eAAzD;AACA,aAHD,MAGO;AACN9B,oBAAM,CAACkE,KAAP,CACC,+BADD,EAEC+B,YAAY,CAACE,IAAb,CAAkB,GAAlB,CAFD,EAGCrE,OAHD;AAKA;;;;;;;;AACD,GAhBK;;AAwBEoB,4CAAR,UAAmB/C,KAAnB,EAAkCoE,GAAlC,EAA0C;AACzC,QAAI;AACH,UAAM8B,uBAAqB,GAAqC,EAAhE;;AACA,WAAKV,eAAL,CAAqBC,OAArB,CAA6B,UAACU,gBAAD,EAAmBC,aAAnB,EAAgC;AAC5D,YAAItG,cAAc,CAACsG,aAAD,EAAgBpG,KAAhB,CAAlB,EAA0C;AACzCkG,iCAAqB,CAACG,IAAtB,CAA2BF,gBAA3B;AACA;AACD,OAJD;;AAKA,UAAMG,eAAa,GAAG9C,IAAI,CAAC+C,KAAL,CAAWnC,GAAX,CAAtB;;AAEA,UAAI,OAAOkC,eAAP,KAAyB,QAA7B,EAAuC;AACtCA,uBAAa,CAACzE,WAAD,CAAb,GAA6B7B,KAA7B;AACA;;AAEDkG,6BAAqB,CAACT,OAAtB,CAA8B,6BAAiB;AAC9Ce,yBAAiB,CAACf,OAAlB,CAA0B,oBAAQ;AAAI,yBAAQ,CAACgB,IAAT,CAAcH,eAAd;AAA4B,SAAlE;AACA,OAFD;AAGA,KAhBD,CAgBE,OAAOI,KAAP,EAAc;AACf7G,YAAM,CAAC0D,IAAP,CAAY,wBAAZ,EAAsCmD,KAAtC,EAA6CtC,GAA7C;AACA;AACD,GApBO;;AAsBRrB,qDACC8C,MADD,EAEC7D,OAFD,EAEkC;AAFlC;;AAEC;AAAAA;AAAiC;;AAEjC,QAAM8D,YAAY,GAAI,GAAgBC,MAAhB,CAAuBF,MAAvB,CAAtB;AACAhG,UAAM,CAACkE,KAAP,CAAa,yBAAb,EAAwC+B,YAAY,CAACE,IAAb,CAAkB,GAAlB,CAAxC;AACA,QAAIW,qBAAJ;AAEA,WAAO,IAAI1H,UAAJ,CAAe,oBAAQ;AAC7B6G,kBAAY,CAACL,OAAb,CAAqB,iBAAK;AACzB;AACA,YAAIe,iBAAiB,GAAGtE,KAAI,CAACsD,eAAL,CAAqB1E,GAArB,CAAyBd,KAAzB,CAAxB;;AAEA,YAAI,CAACwG,iBAAL,EAAwB;AACvBA,2BAAiB,GAAG,IAAII,GAAJ,EAApB;;AAEA1E,eAAI,CAACsD,eAAL,CAAqBxE,GAArB,CAAyBhB,KAAzB,EAAgCwG,iBAAhC;AACA;;AAEDA,yBAAiB,CAACK,GAAlB,CAAsBC,QAAtB;AACA,OAXD;AAaQ;AAAA,yDAdqB,CAgB7B;;AACA,UAAIC,oBAAoB,GAAG7E,KAAI,CAAC0B,kBAAL,CAAwB9C,GAAxB,CAA4BJ,QAA5B,CAA3B;;AACA,UAAI,CAACqG,oBAAL,EAA2B;AAC1BA,4BAAoB,GAAG,IAAIH,GAAJ,EAAvB;AACA;;AACDG,0BAAoB,CAACF,GAArB,CAAyBC,QAAzB;;AACA5E,WAAI,CAAC0B,kBAAL,CAAwB5C,GAAxB,CAA4BN,QAA5B,EAAsCqG,oBAAtC;;AAEA,OAAC;AAAA;;;;;;;;AACMC,yBAAS,GAAG;AAAA;;;;;;;;AAER5D,+BAA8BpB,OAAO,IAArC;;;;AAAM;AAAA;AAAA,4BAAM,KAAKiF,QAAX;;;AAAA7B;;;;;;;;;;AAANtB,6BAAG,KAAH;AACO;AAAA;AAAA,4BAAM,KAAKc,OAAL,CAAalE,QAAb,EAAuB;AAAEoD,+BAAG;AAAL,2BAAvB,CAAN;;;AAAToD,qCAASC,SAAT;;AACN,8BAAID,QAAM,KAAK/F,SAAf,EAA0B;AACzB2E,wCAAY,CAACL,OAAb,CAAqB,iBAAK;AACzByB,sCAAM,CAAC7E,SAAP,CAAiBrC,KAAjB;AACA,6BAFD;AAGA;;;;;;;;AAEDH,gCAAM,CAACkE,KAAP,CAAa,0BAAb,EAAyCqD,GAAzC;;;;;;;;;;;mBAVgB;AAYjB,iBAZK,EAcN;;;AACA;AAAA;AAAA,kBAAMJ,SAAS,EAAf;;;AADA;AACA5D,2BAEA;;;AACAuD,qCAAqB,GAAG,IAAI1H,UAAJ,CAAe,oBAAQ;AAC9CiD,uBAAI,CAACQ,mBAAL,CAAyB2E,WAAzB,CAAqCP,QAArC;AACA,iBAFuB,EAErBzE,SAFqB,CAEX;AACZ2E,2BAAS;AACT,iBAJuB,CAAxB;;;;;;SAnBA;AAwBA,OAxBD;;AA0BA,aAAO;AAAA;;;;;;;;;;AACS;AAAA;AAAA,kBAAM,KAAK1B,YAAL,CAAkBxE,GAAlB,CAAsBJ,QAAtB,CAAN;;;AAATuD,sBAAM,GAAGkD,SAAT;AAENR,qCAAqB,SAArB,yBAAqB,WAArB,GAAqB,MAArB,wBAAqB,CAAEW,WAAvB;;AAEA,oBAAIrD,MAAJ,EAAY;AACX,6BAAKL,kBAAL,CAAwB9C,GAAxB,CAA4BJ,QAA5B,OAAqC,IAArC,IAAqC0C,aAArC,GAAqC,MAArC,GAAqCA,GAAElC,MAAF,CAAS4F,QAAT,CAArC,CADW,CAEX;;AACA,sBAAI,YAAKlD,kBAAL,CAAwB9C,GAAxB,CAA4BJ,QAA5B,OAAqC,IAArC,IAAqC0E,aAArC,GAAqC,MAArC,GAAqCA,GAAEmC,IAAvC,MAAgD,CAApD,EAAuD;AACtD,yBAAK1D,UAAL,CAAgBnD,QAAhB;AACA,yBAAKyB,sBAAL,CAA4BQ,MAA5B,CACCnD,iBAAiB,CAACgI,kBADnB;;AAGA,yBAAK5D,kBAAL,CAAwB1C,MAAxB,CAA+BR,QAA/B;AACA;;AAEDoF,8BAAY,CAACL,OAAb,CAAqB,iBAAK;AACzB,wBAAMe,iBAAiB,GACtBtE,KAAI,CAACsD,eAAL,CAAqB1E,GAArB,CAAyBd,KAAzB,KACC,IAAI4G,GAAJ,EAFF;AAIAJ,qCAAiB,CAACtF,MAAlB,CAAyB4F,QAAzB,EALyB,CAOzB;;AACA,wBAAIN,iBAAiB,CAACe,IAAlB,KAA2B,CAA/B,EAAkC;AACjCrF,2BAAI,CAACsD,eAAL,CAAqBtE,MAArB,CAA4BlB,KAA5B;;AACA,0BAAIiE,MAAM,CAAC2B,WAAP,EAAJ,EAA0B;AACzB3B,8BAAM,CAACqD,WAAP,CAAmBtH,KAAnB;AACA;AACD;AACD,mBAdD;AAeA;;AAED;AAAA;AAAA,kBAAO,IAAP;;;SAjCM;AAkCN,OAlCD;AAmCA,KArFM,CAAP;AAsFA,GA9FD;;AA+FD;AAAC,CA3SD,CAAwCd,sBAAxC","names":["Paho","v4","uuid","Observable","AbstractPubSubProvider","ConnectionState","ConsoleLogger","Logger","Hub","ConnectionStateMonitor","CONNECTION_CHANGE","ReconnectEvent","ReconnectionMonitor","AMPLIFY_SYMBOL","CONNECTION_STATE_CHANGE","logger","mqttTopicMatch","filter","topic","filterArray","split","length","topicArray","i","left","right","Map","ClientsQueue","clientId","clientFactory","cachedPromise","promises","get","newPromise","set","catch","delete","undefined","Object","Array","from","keys","dispatchPubSubEvent","event","data","message","dispatch","topicSymbol","Symbol","__extends","options","_super","_this","connectionStateMonitor","connectionStateObservable","subscribe","provider","connectionState","connectionStateChange","ConnectionDisrupted","reconnectionMonitor","record","START_RECONNECT","Connecting","HALT_RECONNECT","MqttOverWSProvider","aws_pubsub_endpoint","_clientsQueue","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","value","_a","errorCode","args","warn","JSON","stringify","__assign","clientIdObservers","_clientIdObservers","disconnect","url","debug","OPENING_CONNECTION","client","Client","onMessageArrived","msg","_onMessage","onConnectionLost","onDisconnect","CLOSED","Promise","resolve","reject","connect","useSSL","isSSLEnabled","mqttVersion","onSuccess","onFailure","remove","connected","_b","CONNECTION_ESTABLISHED","clientsQueue","newClient","_topicObservers","forEach","_value","key","isConnected","topics","targetTopics","concat","join","send","matchedTopicObservers_1","observerForTopic","observerTopic","push","parsedMessage_1","parse","observersForTopic","next","error","reconnectSubscription","Set","add","observer","observersForClientId","getClient","endpoint","client_1","_c","e_1","addObserver","unsubscribe","size","CLOSING_CONNECTION"],"sources":["/home/dalienst/node_modules/@aws-amplify/pubsub/src/Providers/MqttOverWSProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\n\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { SubscriptionObserver, ConnectionState } from '../types/PubSub';\nimport { ProviderOptions } from '../types/Provider';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport {\n\tConnectionStateMonitor,\n\tCONNECTION_CHANGE,\n} from '../utils/ConnectionStateMonitor';\nimport {\n\tReconnectEvent,\n\tReconnectionMonitor,\n} from '../utils/ReconnectionMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\n\nconst logger = new Logger('MqttOverWSProvider');\n\nexport function mqttTopicMatch(filter: string, topic: string) {\n\tconst filterArray = filter.split('/');\n\tconst length = filterArray.length;\n\tconst topicArray = topic.split('/');\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tconst left = filterArray[i];\n\t\tconst right = topicArray[i];\n\t\tif (left === '#') return topicArray.length >= length;\n\t\tif (left !== '+' && left !== right) return false;\n\t}\n\treturn length === topicArray.length;\n}\n\nexport interface MqttProviderOptions extends ProviderOptions {\n\tclientId?: string;\n\turl?: string;\n}\n\nclass ClientsQueue {\n\tprivate promises: Map<string, Promise<any>> = new Map();\n\n\tasync get(clientId: string, clientFactory?: (input: string) => Promise<any>) {\n\t\tconst cachedPromise = this.promises.get(clientId);\n\t\tif (cachedPromise) return cachedPromise;\n\n\t\tif (clientFactory) {\n\t\t\tconst newPromise = clientFactory(clientId);\n\t\t\tthis.promises.set(clientId, newPromise);\n\t\t\tnewPromise.catch(v => this.promises.delete(clientId));\n\t\t\treturn newPromise;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget allClients() {\n\t\treturn Array.from(this.promises.keys());\n\t}\n\n\tremove(clientId: string) {\n\t\tthis.promises.delete(clientId);\n\t}\n}\n\nconst dispatchPubSubEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('pubsub', { event, data, message }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nconst topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\n\nexport class MqttOverWSProvider extends AbstractPubSubProvider {\n\tprivate _clientsQueue = new ClientsQueue();\n\tprivate connectionState: ConnectionState;\n\tprivate readonly connectionStateMonitor = new ConnectionStateMonitor();\n\tprivate readonly reconnectionMonitor = new ReconnectionMonitor();\n\n\tconstructor(options: MqttProviderOptions = {}) {\n\t\tsuper({ ...options, clientId: options.clientId || uuid() });\n\n\t\t// Monitor the connection health state and pass changes along to Hub\n\t\tthis.connectionStateMonitor.connectionStateObservable.subscribe(\n\t\t\tconnectionStateChange => {\n\t\t\t\tdispatchPubSubEvent(\n\t\t\t\t\tCONNECTION_STATE_CHANGE,\n\t\t\t\t\t{\n\t\t\t\t\t\tprovider: this,\n\t\t\t\t\t\tconnectionState: connectionStateChange,\n\t\t\t\t\t},\n\t\t\t\t\t`Connection state is ${connectionStateChange}`\n\t\t\t\t);\n\n\t\t\t\tthis.connectionState = connectionStateChange;\n\n\t\t\t\t// Trigger reconnection when the connection is disrupted\n\t\t\t\tif (connectionStateChange === ConnectionState.ConnectionDisrupted) {\n\t\t\t\t\tthis.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n\t\t\t\t} else if (connectionStateChange !== ConnectionState.Connecting) {\n\t\t\t\t\t// Trigger connected to halt reconnection attempts\n\t\t\t\t\tthis.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tprotected get clientId() {\n\t\treturn this.options.clientId;\n\t}\n\n\tprotected get endpoint() {\n\t\treturn this.options.aws_pubsub_endpoint;\n\t}\n\n\tprotected get clientsQueue() {\n\t\treturn this._clientsQueue;\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options\n\t\t\t.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n\t}\n\n\tprotected getTopicForValue(value: any) {\n\t\treturn typeof value === 'object' && value[topicSymbol];\n\t}\n\n\tgetProviderName() {\n\t\treturn 'MqttOverWSProvider';\n\t}\n\n\tpublic onDisconnect({\n\t\tclientId,\n\t\terrorCode,\n\t\t...args\n\t}: {\n\t\tclientId?: string;\n\t\terrorCode?: number;\n\t}) {\n\t\tif (errorCode !== 0) {\n\t\t\tlogger.warn(clientId, JSON.stringify({ errorCode, ...args }, null, 2));\n\n\t\t\tif (!clientId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst clientIdObservers = this._clientIdObservers.get(clientId);\n\t\t\tif (!clientIdObservers) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.disconnect(clientId);\n\t\t}\n\t}\n\n\tpublic async newClient({ url, clientId }: MqttProviderOptions): Promise<any> {\n\t\tlogger.debug('Creating new MQTT client', clientId);\n\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n\t\t// @ts-ignore\n\t\tconst client = new Paho.Client(url, clientId);\n\n\t\tclient.onMessageArrived = ({\n\t\t\tdestinationName: topic,\n\t\t\tpayloadString: msg,\n\t\t}: {\n\t\t\tdestinationName: string;\n\t\t\tpayloadString: string;\n\t\t}) => {\n\t\t\tthis._onMessage(topic, msg);\n\t\t};\n\t\tclient.onConnectionLost = ({\n\t\t\terrorCode,\n\t\t\t...args\n\t\t}: {\n\t\t\terrorCode: number;\n\t\t}) => {\n\t\t\tthis.onDisconnect({ clientId, errorCode, ...args });\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t};\n\n\t\tconst connected = await new Promise((resolve, reject) => {\n\t\t\tclient.connect({\n\t\t\t\tuseSSL: this.isSSLEnabled,\n\t\t\t\tmqttVersion: 3,\n\t\t\t\tonSuccess: () => resolve(true),\n\t\t\t\tonFailure: x => {\n\t\t\t\t\tif (clientId) this._clientsQueue.remove(clientId);\n\t\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\t\t\tresolve(false);\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\n\t\tif (connected) {\n\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\tCONNECTION_CHANGE.CONNECTION_ESTABLISHED\n\t\t\t);\n\t\t}\n\n\t\treturn client;\n\t}\n\n\tprotected async connect(\n\t\tclientId: string,\n\t\toptions: MqttProviderOptions = {}\n\t): Promise<any> {\n\t\treturn await this.clientsQueue.get(clientId, async clientId => {\n\t\t\tconst client = await this.newClient({ ...options, clientId });\n\n\t\t\tif (client) {\n\t\t\t\t// Once connected, subscribe to all topics registered observers\n\t\t\t\tthis._topicObservers.forEach(\n\t\t\t\t\t(_value: Set<SubscriptionObserver<any>>, key: string) => {\n\t\t\t\t\t\tclient.subscribe(key);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn client;\n\t\t});\n\t}\n\n\tprotected async disconnect(clientId: string): Promise<void> {\n\t\tconst client = await this.clientsQueue.get(clientId);\n\n\t\tif (client && client.isConnected()) {\n\t\t\tclient.disconnect();\n\t\t}\n\t\tthis.clientsQueue.remove(clientId);\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t}\n\n\tasync publish(topics: string[] | string, msg: any) {\n\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\tconst message = JSON.stringify(msg);\n\n\t\tconst client = await this.clientsQueue.get(this.clientId);\n\n\t\tif (client) {\n\t\t\tlogger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n\t\t\ttargetTopics.forEach(topic => client.send(topic, message));\n\t\t} else {\n\t\t\tlogger.debug(\n\t\t\t\t'Publishing to topic(s) failed',\n\t\t\t\ttargetTopics.join(','),\n\t\t\t\tmessage\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected _topicObservers: Map<string, Set<SubscriptionObserver<any>>> =\n\t\tnew Map();\n\n\tprotected _clientIdObservers: Map<string, Set<SubscriptionObserver<any>>> =\n\t\tnew Map();\n\n\tprivate _onMessage(topic: string, msg: any) {\n\t\ttry {\n\t\t\tconst matchedTopicObservers: Set<SubscriptionObserver<any>>[] = [];\n\t\t\tthis._topicObservers.forEach((observerForTopic, observerTopic) => {\n\t\t\t\tif (mqttTopicMatch(observerTopic, topic)) {\n\t\t\t\t\tmatchedTopicObservers.push(observerForTopic);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst parsedMessage = JSON.parse(msg);\n\n\t\t\tif (typeof parsedMessage === 'object') {\n\t\t\t\tparsedMessage[topicSymbol] = topic;\n\t\t\t}\n\n\t\t\tmatchedTopicObservers.forEach(observersForTopic => {\n\t\t\t\tobserversForTopic.forEach(observer => observer.next(parsedMessage));\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlogger.warn('Error handling message', error, msg);\n\t\t}\n\t}\n\n\tsubscribe(\n\t\ttopics: string[] | string,\n\t\toptions: MqttProviderOptions = {}\n\t): Observable<any> {\n\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\tlogger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\t\tlet reconnectSubscription: ZenObservable.Subscription;\n\n\t\treturn new Observable(observer => {\n\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t// this._topicObservers is used to notify the observers according to the topic received on the message\n\t\t\t\tlet observersForTopic = this._topicObservers.get(topic);\n\n\t\t\t\tif (!observersForTopic) {\n\t\t\t\t\tobserversForTopic = new Set();\n\n\t\t\t\t\tthis._topicObservers.set(topic, observersForTopic);\n\t\t\t\t}\n\n\t\t\t\tobserversForTopic.add(observer);\n\t\t\t});\n\n\t\t\tconst { clientId = this.clientId } = options;\n\n\t\t\t// this._clientIdObservers is used to close observers when client gets disconnected\n\t\t\tlet observersForClientId = this._clientIdObservers.get(clientId);\n\t\t\tif (!observersForClientId) {\n\t\t\t\tobserversForClientId = new Set();\n\t\t\t}\n\t\t\tobserversForClientId.add(observer);\n\t\t\tthis._clientIdObservers.set(clientId, observersForClientId);\n\n\t\t\t(async () => {\n\t\t\t\tconst getClient = async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { url = await this.endpoint } = options;\n\t\t\t\t\t\tconst client = await this.connect(clientId, { url });\n\t\t\t\t\t\tif (client !== undefined) {\n\t\t\t\t\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t\t\t\t\tclient.subscribe(topic);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogger.debug('Error forming connection', e);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Establish the initial connection\n\t\t\t\tawait getClient();\n\n\t\t\t\t// Add an observable to the reconnection list to manage reconnection for this subscription\n\t\t\t\treconnectSubscription = new Observable(observer => {\n\t\t\t\t\tthis.reconnectionMonitor.addObserver(observer);\n\t\t\t\t}).subscribe(() => {\n\t\t\t\t\tgetClient();\n\t\t\t\t});\n\t\t\t})();\n\n\t\t\treturn async () => {\n\t\t\t\tconst client = await this.clientsQueue.get(clientId);\n\n\t\t\t\treconnectSubscription?.unsubscribe();\n\n\t\t\t\tif (client) {\n\t\t\t\t\tthis._clientIdObservers.get(clientId)?.delete(observer);\n\t\t\t\t\t// No more observers per client => client not needed anymore\n\t\t\t\t\tif (this._clientIdObservers.get(clientId)?.size === 0) {\n\t\t\t\t\t\tthis.disconnect(clientId);\n\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\tCONNECTION_CHANGE.CLOSING_CONNECTION\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._clientIdObservers.delete(clientId);\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t\t\tconst observersForTopic =\n\t\t\t\t\t\t\tthis._topicObservers.get(topic) ||\n\t\t\t\t\t\t\t(new Set() as Set<SubscriptionObserver<any>>);\n\n\t\t\t\t\t\tobserversForTopic.delete(observer);\n\n\t\t\t\t\t\t// if no observers exists for the topic, topic should be removed\n\t\t\t\t\t\tif (observersForTopic.size === 0) {\n\t\t\t\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t\t\t\t\tif (client.isConnected()) {\n\t\t\t\t\t\t\t\tclient.unsubscribe(topic);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
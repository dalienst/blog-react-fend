{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AssociateKmsKeyRequest } from \"../models/models_0\";\nimport { deserializeAws_json1_1AssociateKmsKeyCommand, serializeAws_json1_1AssociateKmsKeyCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Associates the specified AWS Key Management Service (AWS KMS) customer master key (CMK) with the specified log group.</p>\n *          <p>Associating an AWS KMS CMK with a log group overrides any existing associations between the log group and a CMK.\n *       After a CMK is associated with a log group, all newly ingested data for the log group is encrypted using the CMK.\n *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.\n *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n *          <important>\n *             <p>CloudWatch Logs supports only symmetric CMKs. Do not use an associate an asymmetric CMK\n *         with your log group. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and Asymmetric\n *           Keys</a>.</p>\n *          </important>\n *          <p>It can take up to 5 minutes for this operation to take effect.</p>\n *          <p>If you attempt to associate a CMK with a log group but the CMK does not exist or the\n *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>\n */\n\nvar AssociateKmsKeyCommand =\n/** @class */\nfunction (_super) {\n  __extends(AssociateKmsKeyCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function AssociateKmsKeyCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  AssociateKmsKeyCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CloudWatchLogsClient\";\n    var commandName = \"AssociateKmsKeyCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: AssociateKmsKeyRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  AssociateKmsKeyCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1AssociateKmsKeyCommand(input, context);\n  };\n\n  AssociateKmsKeyCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1AssociateKmsKeyCommand(output, context);\n  };\n\n  return AssociateKmsKeyCommand;\n}($Command);\n\nexport { AssociateKmsKeyCommand };","map":{"version":3,"mappings":";AACA,SAASA,sBAAT,QAAuC,oBAAvC;AACA,SACEC,4CADF,EAEEC,0CAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;AAeA;AAAA;AAAA;AAA4CC,4CAA5C,CAKE;AACA;;;AAEA,kCAAqBC,KAArB,EAAuD;AAAvD,gBACE;AACAC,yBAAO,IAFT;;AAAqBC;iBAAkC,CAGrD;AACD;AAED;;;;;AAGAC,iEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;AAE9B,SAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AAEA,QAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;AAEQ,cAAM,GAAKF,aAAa,OAAxB;AACR,QAAMQ,UAAU,GAAG,sBAAnB;AACA,QAAMC,WAAW,GAAG,wBAApB;AACA,QAAMC,uBAAuB,GAA4B;AACvDC,YAAM,QADiD;AAEvDH,gBAAU,YAF6C;AAGvDC,iBAAW,aAH4C;AAIvDG,6BAAuB,EAAExB,sBAAsB,CAACyB,kBAJO;AAKvDC,8BAAwB,EAAE,UAACC,MAAD,EAAY;AAAK;AAAM;AALM,KAAzD;AAOQ,sBAAc,GAAKf,aAAa,eAAhC;AACR,WAAOM,KAAK,CAACU,OAAN,CACL,UAACC,OAAD,EAAuC;AACrC,2BAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDhB,OAAO,IAAI,EAAnE;AAAsE,KAFnE,EAGLS,uBAHK,CAAP;AAKD,GAzBD;;AA2BQZ,+CAAR,UAAkBH,KAAlB,EAAsDwB,OAAtD,EAA6E;AAC3E,WAAO7B,0CAA0C,CAACK,KAAD,EAAQwB,OAAR,CAAjD;AACD,GAFO;;AAIArB,iDAAR,UAAoBiB,MAApB,EAA4CI,OAA5C,EAAmE;AACjE,WAAO9B,4CAA4C,CAAC0B,MAAD,EAASI,OAAT,CAAnD;AACD,GAFO;;AAMV;AAAC,CAtDD,CAA4C1B,QAA5C","names":["AssociateKmsKeyRequest","deserializeAws_json1_1AssociateKmsKeyCommand","serializeAws_json1_1AssociateKmsKeyCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","AssociateKmsKeyCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/home/dalienst/node_modules/@aws-sdk/client-cloudwatch-logs/commands/AssociateKmsKeyCommand.ts"],"sourcesContent":["import { CloudWatchLogsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../CloudWatchLogsClient\";\nimport { AssociateKmsKeyRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1AssociateKmsKeyCommand,\n  serializeAws_json1_1AssociateKmsKeyCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type AssociateKmsKeyCommandInput = AssociateKmsKeyRequest;\nexport type AssociateKmsKeyCommandOutput = __MetadataBearer;\n\n/**\n * <p>Associates the specified AWS Key Management Service (AWS KMS) customer master key (CMK) with the specified log group.</p>\n *          <p>Associating an AWS KMS CMK with a log group overrides any existing associations between the log group and a CMK.\n *       After a CMK is associated with a log group, all newly ingested data for the log group is encrypted using the CMK.\n *       This association is stored as long as the data encrypted with the CMK is still within Amazon CloudWatch Logs.\n *       This enables Amazon CloudWatch Logs to decrypt this data whenever it is requested.</p>\n *          <important>\n *             <p>CloudWatch Logs supports only symmetric CMKs. Do not use an associate an asymmetric CMK\n *         with your log group. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html\">Using Symmetric and Asymmetric\n *           Keys</a>.</p>\n *          </important>\n *          <p>It can take up to 5 minutes for this operation to take effect.</p>\n *          <p>If you attempt to associate a CMK with a log group but the CMK does not exist or the\n *       CMK is disabled, you receive an <code>InvalidParameterException</code> error. </p>\n */\nexport class AssociateKmsKeyCommand extends $Command<\n  AssociateKmsKeyCommandInput,\n  AssociateKmsKeyCommandOutput,\n  CloudWatchLogsClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: AssociateKmsKeyCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: CloudWatchLogsClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<AssociateKmsKeyCommandInput, AssociateKmsKeyCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"CloudWatchLogsClient\";\n    const commandName = \"AssociateKmsKeyCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: AssociateKmsKeyRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: AssociateKmsKeyCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1AssociateKmsKeyCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<AssociateKmsKeyCommandOutput> {\n    return deserializeAws_json1_1AssociateKmsKeyCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}
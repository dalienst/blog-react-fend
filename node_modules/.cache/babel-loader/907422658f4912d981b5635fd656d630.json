{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { isEnumFieldType, isGraphQLScalarType, isPredicateObj, isSchemaModel, isSchemaModelWithAttributes, isTargetNameAssociation, isNonModelFieldType, OpType, ModelOperation } from '../types';\nimport { extractPrimaryKeyFieldNames, establishRelationAndKeys, IDENTIFIER_KEY_SEPARATOR } from '../util';\nvar logger = new Logger('DataStore');\nvar GraphQLOperationType;\n\n(function (GraphQLOperationType) {\n  GraphQLOperationType[\"LIST\"] = \"query\";\n  GraphQLOperationType[\"CREATE\"] = \"mutation\";\n  GraphQLOperationType[\"UPDATE\"] = \"mutation\";\n  GraphQLOperationType[\"DELETE\"] = \"mutation\";\n  GraphQLOperationType[\"GET\"] = \"query\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\n\nexport var TransformerMutationType;\n\n(function (TransformerMutationType) {\n  TransformerMutationType[\"CREATE\"] = \"Create\";\n  TransformerMutationType[\"UPDATE\"] = \"Update\";\n  TransformerMutationType[\"DELETE\"] = \"Delete\";\n  TransformerMutationType[\"GET\"] = \"Get\";\n})(TransformerMutationType || (TransformerMutationType = {}));\n\nvar dummyMetadata = {\n  _version: undefined,\n  _lastChangedAt: undefined,\n  _deleted: undefined\n};\nvar metadataFields = Object.keys(dummyMetadata);\nexport function getMetadataFields() {\n  return metadataFields;\n}\nexport function generateSelectionSet(namespace, modelDefinition) {\n  var scalarFields = getScalarFields(modelDefinition);\n  var nonModelFields = getNonModelFields(namespace, modelDefinition);\n  var implicitOwnerField = getImplicitOwnerField(modelDefinition, scalarFields);\n  var scalarAndMetadataFields = Object.values(scalarFields).map(function (_a) {\n    var name = _a.name;\n    return name;\n  }).concat(implicitOwnerField).concat(nonModelFields);\n\n  if (isSchemaModel(modelDefinition)) {\n    scalarAndMetadataFields = scalarAndMetadataFields.concat(getMetadataFields()).concat(getConnectionFields(modelDefinition, namespace));\n  }\n\n  var result = scalarAndMetadataFields.join('\\n');\n  return result;\n}\n\nfunction getImplicitOwnerField(modelDefinition, scalarFields) {\n  var ownerFields = getOwnerFields(modelDefinition);\n\n  if (!scalarFields.owner && ownerFields.includes('owner')) {\n    return ['owner'];\n  }\n\n  return [];\n}\n\nfunction getOwnerFields(modelDefinition) {\n  var ownerFields = [];\n\n  if (isSchemaModelWithAttributes(modelDefinition)) {\n    modelDefinition.attributes.forEach(function (attr) {\n      if (attr.properties && attr.properties.rules) {\n        var rule = attr.properties.rules.find(function (rule) {\n          return rule.allow === 'owner';\n        });\n\n        if (rule && rule.ownerField) {\n          ownerFields.push(rule.ownerField);\n        }\n      }\n    });\n  }\n\n  return ownerFields;\n}\n\nfunction getScalarFields(modelDefinition) {\n  var fields = modelDefinition.fields;\n  var result = Object.values(fields).filter(function (field) {\n    if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n      return true;\n    }\n\n    return false;\n  }).reduce(function (acc, field) {\n    acc[field.name] = field;\n    return acc;\n  }, {});\n  return result;\n} // Used for generating the selection set for queries and mutations\n\n\nfunction getConnectionFields(modelDefinition, namespace) {\n  var result = [];\n  Object.values(modelDefinition.fields).filter(function (_a) {\n    var association = _a.association;\n    return association && Object.keys(association).length;\n  }).forEach(function (_a) {\n    var name = _a.name,\n        association = _a.association;\n    var connectionType = (association || {}).connectionType;\n\n    switch (connectionType) {\n      case 'HAS_ONE':\n      case 'HAS_MANY':\n        // Intentionally blank\n        break;\n\n      case 'BELONGS_TO':\n        if (isTargetNameAssociation(association)) {\n          // New codegen (CPK)\n          if (association.targetNames && association.targetNames.length > 0) {\n            // Need to retrieve relations in order to get connected model keys\n            var _b = __read(establishRelationAndKeys(namespace), 1),\n                relations = _b[0];\n\n            var connectedModelName = modelDefinition.fields[name].type['model'];\n            var byPkIndex = relations[connectedModelName].indexes.find(function (_a) {\n              var _b = __read(_a, 1),\n                  name = _b[0];\n\n              return name === 'byPk';\n            });\n            var keyFields = byPkIndex && byPkIndex[1];\n            var keyFieldSelectionSet = keyFields === null || keyFields === void 0 ? void 0 : keyFields.join(' '); // We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n\n            result.push(name + \" { \" + keyFieldSelectionSet + \" _deleted }\");\n          } else {\n            // backwards-compatability for schema generated prior to custom primary key support\n            result.push(name + \" { id _deleted }\");\n          }\n        }\n\n        break;\n\n      default:\n        throw new Error(\"Invalid connection type \" + connectionType);\n    }\n  });\n  return result;\n}\n\nfunction getNonModelFields(namespace, modelDefinition) {\n  var result = [];\n  Object.values(modelDefinition.fields).forEach(function (_a) {\n    var name = _a.name,\n        type = _a.type;\n\n    if (isNonModelFieldType(type)) {\n      var typeDefinition = namespace.nonModels[type.nonModel];\n      var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function (_a) {\n        var name = _a.name;\n        return name;\n      });\n      var nested_1 = [];\n      Object.values(typeDefinition.fields).forEach(function (field) {\n        var type = field.type,\n            name = field.name;\n\n        if (isNonModelFieldType(type)) {\n          var typeDefinition_1 = namespace.nonModels[type.nonModel];\n          nested_1.push(name + \" { \" + generateSelectionSet(namespace, typeDefinition_1) + \" }\");\n        }\n      });\n      result.push(name + \" { \" + scalarFields.join(' ') + \" \" + nested_1.join(' ') + \" }\");\n    }\n  });\n  return result;\n}\n\nexport function getAuthorizationRules(modelDefinition) {\n  // Searching for owner authorization on attributes\n  var authConfig = [].concat(modelDefinition.attributes || []).find(function (attr) {\n    return attr && attr.type === 'auth';\n  });\n  var _a = (authConfig || {}).properties,\n      _b = (_a === void 0 ? {} : _a).rules,\n      rules = _b === void 0 ? [] : _b;\n  var resultRules = []; // Multiple rules can be declared for allow: owner\n\n  rules.forEach(function (rule) {\n    // setting defaults for backwards compatibility with old cli\n    var _a = rule.identityClaim,\n        identityClaim = _a === void 0 ? 'cognito:username' : _a,\n        _b = rule.ownerField,\n        ownerField = _b === void 0 ? 'owner' : _b,\n        _c = rule.operations,\n        operations = _c === void 0 ? ['create', 'update', 'delete', 'read'] : _c,\n        _d = rule.provider,\n        provider = _d === void 0 ? 'userPools' : _d,\n        _e = rule.groupClaim,\n        groupClaim = _e === void 0 ? 'cognito:groups' : _e,\n        _f = rule.allow,\n        authStrategy = _f === void 0 ? 'iam' : _f,\n        _g = rule.groups,\n        groups = _g === void 0 ? [] : _g;\n    var isReadAuthorized = operations.includes('read');\n    var isOwnerAuth = authStrategy === 'owner';\n\n    if (!isReadAuthorized && !isOwnerAuth) {\n      return;\n    }\n\n    var authRule = {\n      identityClaim: identityClaim,\n      ownerField: ownerField,\n      provider: provider,\n      groupClaim: groupClaim,\n      authStrategy: authStrategy,\n      groups: groups,\n      areSubscriptionsPublic: false\n    };\n\n    if (isOwnerAuth) {\n      // look for the subscription level override\n      // only pay attention to the public level\n      var modelConfig = [].concat(modelDefinition.attributes || []).find(function (attr) {\n        return attr && attr.type === 'model';\n      }); // find the subscriptions level. ON is default\n\n      var _h = (modelConfig || {}).properties,\n          _j = (_h === void 0 ? {} : _h).subscriptions,\n          _k = (_j === void 0 ? {} : _j).level,\n          level = _k === void 0 ? 'on' : _k; // treat subscriptions as public for owner auth with unprotected reads\n      // when `read` is omitted from `operations`\n\n      authRule.areSubscriptionsPublic = !operations.includes('read') || level === 'public';\n    }\n\n    if (isOwnerAuth) {\n      // owner rules has least priority\n      resultRules.push(authRule);\n      return;\n    }\n\n    resultRules.unshift(authRule);\n  });\n  return resultRules;\n}\nexport function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n      pluralTypeName = modelDefinition.pluralName;\n  var opName = \"on\" + transformerMutationType + typeName;\n  var docArgs = '';\n  var opArgs = '';\n\n  if (isOwnerAuthorization) {\n    docArgs = \"($\" + ownerField + \": String!)\";\n    opArgs = \"(\" + ownerField + \": $\" + ownerField + \")\";\n  }\n\n  return [transformerMutationType, opName, \"subscription operation\" + docArgs + \"{\\n\\t\\t\\t\" + opName + opArgs + \"{\\n\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t}\\n\\t\\t}\"];\n}\nexport function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n      pluralTypeName = modelDefinition.pluralName;\n  var operation;\n  var documentArgs;\n  var operationArgs;\n  var transformerMutationType;\n\n  switch (graphQLOpType) {\n    case 'LIST':\n      operation = \"sync\" + pluralTypeName;\n      documentArgs = \"($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model\" + typeName + \"FilterInput)\";\n      operationArgs = '(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n      selectionSet = \"items {\\n\\t\\t\\t\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnextToken\\n\\t\\t\\t\\t\\t\\tstartedAt\";\n      break;\n\n    case 'CREATE':\n      operation = \"create\" + typeName;\n      documentArgs = \"($input: Create\" + typeName + \"Input!)\";\n      operationArgs = '(input: $input)';\n      transformerMutationType = TransformerMutationType.CREATE;\n      break;\n\n    case 'UPDATE':\n      operation = \"update\" + typeName;\n      documentArgs = \"($input: Update\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.UPDATE;\n      break;\n\n    case 'DELETE':\n      operation = \"delete\" + typeName;\n      documentArgs = \"($input: Delete\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.DELETE;\n      break;\n\n    case 'GET':\n      operation = \"get\" + typeName;\n      documentArgs = \"($id: ID!)\";\n      operationArgs = '(id: $id)';\n      transformerMutationType = TransformerMutationType.GET;\n      break;\n\n    default:\n      throw new Error(\"Invalid graphQlOpType \" + graphQLOpType);\n  }\n\n  return [[transformerMutationType, operation, GraphQLOperationType[graphQLOpType] + \" operation\" + documentArgs + \"{\\n\\t\\t\" + operation + operationArgs + \"{\\n\\t\\t\\t\" + selectionSet + \"\\n\\t\\t}\\n\\t}\"]];\n}\nexport function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator, id) {\n  var operation;\n\n  switch (opType) {\n    case OpType.INSERT:\n      operation = TransformerMutationType.CREATE;\n      break;\n\n    case OpType.UPDATE:\n      operation = TransformerMutationType.UPDATE;\n      break;\n\n    case OpType.DELETE:\n      operation = TransformerMutationType.DELETE;\n      break;\n\n    default:\n      throw new Error(\"Invalid opType \" + opType);\n  } // stringify nested objects of type AWSJSON\n  // this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n  // but still send the object correctly over the wire\n\n\n  var replacer = function (k, v) {\n    var isAWSJSON = k && v !== null && typeof v === 'object' && modelDefinition.fields[k] && modelDefinition.fields[k].type === 'AWSJSON';\n\n    if (isAWSJSON) {\n      return JSON.stringify(v);\n    }\n\n    return v;\n  };\n\n  var modelId = getIdentifierValue(modelDefinition, element);\n  var optionalId = OpType.INSERT && id ? {\n    id: id\n  } : {};\n  var mutationEvent = modelInstanceCreator(MutationEventConstructor, __assign(__assign({}, optionalId), {\n    data: JSON.stringify(element, replacer),\n    modelId: modelId,\n    model: model.name,\n    operation: operation,\n    condition: JSON.stringify(condition)\n  }));\n  return mutationEvent;\n}\nexport function predicateToGraphQLCondition(predicate, modelDefinition) {\n  var result = {};\n\n  if (!predicate || !Array.isArray(predicate.predicates)) {\n    return result;\n  } // This is compatible with how the GQL Transform currently generates the Condition Input,\n  // i.e. any PK and SK fields are omitted and can't be used as conditions.\n  // However, I think this limits usability.\n  // What if we want to delete all records where SK > some value\n  // Or all records where PK = some value but SKs are different values\n  // TODO: if the Transform gets updated we'll need to modify this logic to only omit\n  // key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n\n\n  var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n  return predicateToGraphQLFilter(predicate, keyFields);\n}\nexport function predicateToGraphQLFilter(predicatesGroup, fieldsToOmit) {\n  if (fieldsToOmit === void 0) {\n    fieldsToOmit = [];\n  }\n\n  var result = {};\n\n  if (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n    return result;\n  }\n\n  var type = predicatesGroup.type,\n      predicates = predicatesGroup.predicates;\n  var isList = type === 'and' || type === 'or';\n  result[type] = isList ? [] : {};\n\n  var appendToFilter = function (value) {\n    return isList ? result[type].push(value) : result[type] = value;\n  };\n\n  predicates.forEach(function (predicate) {\n    var _a, _b;\n\n    if (isPredicateObj(predicate)) {\n      var field = predicate.field,\n          operator = predicate.operator,\n          operand = predicate.operand;\n      if (fieldsToOmit.includes(field)) return;\n      var gqlField = (_a = {}, _a[field] = (_b = {}, _b[operator] = operand, _b), _a);\n      appendToFilter(gqlField);\n      return;\n    }\n\n    var child = predicateToGraphQLFilter(predicate, fieldsToOmit);\n    Object.keys(child).length > 0 && appendToFilter(child);\n  });\n\n  if (isList) {\n    if (result[type].length === 0) return {};\n  } else {\n    if (Object.keys(result[type]).length === 0) return {};\n  }\n\n  return result;\n}\nexport function getUserGroupsFromToken(token, rule) {\n  // validate token against groupClaim\n  var userGroups = token[rule.groupClaim] || [];\n\n  if (typeof userGroups === 'string') {\n    var parsedGroups = void 0;\n\n    try {\n      parsedGroups = JSON.parse(userGroups);\n    } catch (e) {\n      parsedGroups = userGroups;\n    }\n\n    userGroups = [].concat(parsedGroups);\n  }\n\n  return userGroups;\n}\nexport function getModelAuthModes(_a) {\n  var authModeStrategy = _a.authModeStrategy,\n      defaultAuthMode = _a.defaultAuthMode,\n      modelName = _a.modelName,\n      schema = _a.schema;\n  return __awaiter(this, void 0, void 0, function () {\n    var operations, modelAuthModes, error_1;\n\n    var _this = this;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          operations = Object.values(ModelOperation);\n          modelAuthModes = {\n            CREATE: [],\n            READ: [],\n            UPDATE: [],\n            DELETE: []\n          };\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , Promise.all(operations.map(function (operation) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var authModes;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , authModeStrategy({\n                      schema: schema,\n                      modelName: modelName,\n                      operation: operation\n                    })];\n\n                  case 1:\n                    authModes = _a.sent();\n\n                    if (typeof authModes === 'string') {\n                      modelAuthModes[operation] = [authModes];\n                    } else if (Array.isArray(authModes) && authModes.length) {\n                      modelAuthModes[operation] = authModes;\n                    } else {\n                      // Use default auth mode if nothing is returned from authModeStrategy\n                      modelAuthModes[operation] = [defaultAuthMode];\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }))];\n\n        case 2:\n          _b.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          error_1 = _b.sent();\n          logger.debug(\"Error getting auth modes for model: \" + modelName, error_1);\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          return [2\n          /*return*/\n          , modelAuthModes];\n      }\n    });\n  });\n}\nexport function getForbiddenError(error) {\n  var forbiddenErrorMessages = ['Request failed with status code 401', 'Request failed with status code 403'];\n  var forbiddenError;\n\n  if (error && error.errors) {\n    forbiddenError = error.errors.find(function (err) {\n      return forbiddenErrorMessages.includes(err.message);\n    });\n  } else if (error && error.message) {\n    forbiddenError = error;\n  }\n\n  if (forbiddenError) {\n    return forbiddenError.message;\n  }\n\n  return null;\n}\nexport function getClientSideAuthError(error) {\n  var clientSideAuthErrors = Object.values(GraphQLAuthError);\n  var clientSideError = error && error.message && clientSideAuthErrors.find(function (clientError) {\n    return error.message.includes(clientError);\n  });\n  return clientSideError || null;\n}\nexport function getTokenForCustomAuth(authMode, amplifyConfig) {\n  if (amplifyConfig === void 0) {\n    amplifyConfig = {};\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, functionAuthProvider, token, error_2;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA)) return [3\n          /*break*/\n          , 6];\n          _a = amplifyConfig.authProviders, functionAuthProvider = (_a === void 0 ? {\n            functionAuthProvider: null\n          } : _a).functionAuthProvider;\n          if (!(functionAuthProvider && typeof functionAuthProvider === 'function')) return [3\n          /*break*/\n          , 5];\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , functionAuthProvider()];\n\n        case 2:\n          token = _b.sent().token;\n          return [2\n          /*return*/\n          , token];\n\n        case 3:\n          error_2 = _b.sent();\n          throw new Error(\"Error retrieving token from `functionAuthProvider`: \" + error_2);\n\n        case 4:\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          // TODO: add docs link once available\n          throw new Error(\"You must provide a `functionAuthProvider` function to `DataStore.configure` when using \" + GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n} // Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\n\nexport function getIdentifierValue(modelDefinition, model) {\n  var pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n  var idOrPk = pkFieldNames.map(function (f) {\n    return model[f];\n  }).join(IDENTIFIER_KEY_SEPARATOR);\n  return idOrPk;\n}","map":{"version":3,"mappings":"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","names":["GRAPHQL_AUTH_MODE","GraphQLAuthError","Logger","isEnumFieldType","isGraphQLScalarType","isPredicateObj","isSchemaModel","isSchemaModelWithAttributes","isTargetNameAssociation","isNonModelFieldType","OpType","ModelOperation","extractPrimaryKeyFieldNames","establishRelationAndKeys","IDENTIFIER_KEY_SEPARATOR","logger","GraphQLOperationType","TransformerMutationType","dummyMetadata","_version","undefined","_lastChangedAt","_deleted","metadataFields","Object","keys","getMetadataFields","generateSelectionSet","namespace","modelDefinition","scalarFields","getScalarFields","nonModelFields","getNonModelFields","implicitOwnerField","getImplicitOwnerField","scalarAndMetadataFields","values","map","_a","name","concat","getConnectionFields","result","join","ownerFields","getOwnerFields","owner","includes","attributes","forEach","attr","properties","rules","rule","find","allow","ownerField","push","fields","filter","field","type","reduce","acc","association","length","connectionType","targetNames","relations","connectedModelName","byPkIndex","indexes","_b","keyFields","keyFieldSelectionSet","Error","typeDefinition","nonModels","nonModel","nested_1","typeDefinition_1","getAuthorizationRules","authConfig","resultRules","_c","operations","_d","provider","_e","groupClaim","_f","authStrategy","_g","groups","isReadAuthorized","isOwnerAuth","authRule","identityClaim","areSubscriptionsPublic","modelConfig","_j","_k","level","unshift","buildSubscriptionGraphQLOperation","transformerMutationType","isOwnerAuthorization","selectionSet","pluralTypeName","opName","typeName","docArgs","opArgs","buildGraphQLOperation","graphQLOpType","operation","documentArgs","operationArgs","CREATE","UPDATE","DELETE","GET","createMutationInstanceFromModelOperation","relationships","opType","model","element","condition","MutationEventConstructor","modelInstanceCreator","id","INSERT","replacer","k","v","isAWSJSON","JSON","stringify","modelId","getIdentifierValue","optionalId","mutationEvent","__assign","data","predicateToGraphQLCondition","predicate","Array","isArray","predicates","predicateToGraphQLFilter","predicatesGroup","fieldsToOmit","isList","appendToFilter","value","operator","operand","gqlField","child","getUserGroupsFromToken","token","userGroups","parsedGroups","parse","e","getModelAuthModes","authModeStrategy","defaultAuthMode","modelName","schema","modelAuthModes","READ","Promise","all","authModes","debug","error_1","getForbiddenError","error","forbiddenErrorMessages","forbiddenError","errors","err","message","getClientSideAuthError","clientSideAuthErrors","clientSideError","clientError","getTokenForCustomAuth","authMode","amplifyConfig","AWS_LAMBDA","functionAuthProvider","error_2","pkFieldNames","idOrPk","f"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/sync/utils.ts"],"sourcesContent":["import { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport {\n\tAuthorizationRule,\n\tGraphQLCondition,\n\tGraphQLFilter,\n\tGraphQLField,\n\tisEnumFieldType,\n\tisGraphQLScalarType,\n\tisPredicateObj,\n\tisSchemaModel,\n\tisSchemaModelWithAttributes,\n\tisTargetNameAssociation,\n\tisNonModelFieldType,\n\tModelFields,\n\tModelInstanceMetadata,\n\tOpType,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicatesGroup,\n\tRelationshipType,\n\tSchemaModel,\n\tSchemaNamespace,\n\tSchemaNonModel,\n\tModelOperation,\n\tInternalSchema,\n\tAuthModeStrategy,\n\tModelAttributes,\n} from '../types';\nimport {\n\textractPrimaryKeyFieldNames,\n\testablishRelationAndKeys,\n\tIDENTIFIER_KEY_SEPARATOR,\n} from '../util';\nimport { MutationEvent } from './';\n\nconst logger = new Logger('DataStore');\n\nenum GraphQLOperationType {\n\tLIST = 'query',\n\tCREATE = 'mutation',\n\tUPDATE = 'mutation',\n\tDELETE = 'mutation',\n\tGET = 'query',\n}\n\nexport enum TransformerMutationType {\n\tCREATE = 'Create',\n\tUPDATE = 'Update',\n\tDELETE = 'Delete',\n\tGET = 'Get',\n}\n\nconst dummyMetadata: ModelInstanceMetadata = {\n\t_version: undefined!,\n\t_lastChangedAt: undefined!,\n\t_deleted: undefined!,\n};\n\nconst metadataFields = <(keyof ModelInstanceMetadata)[]>(\n\tObject.keys(dummyMetadata)\n);\nexport function getMetadataFields(): ReadonlyArray<string> {\n\treturn metadataFields;\n}\n\nexport function generateSelectionSet(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string {\n\tconst scalarFields = getScalarFields(modelDefinition);\n\tconst nonModelFields = getNonModelFields(namespace, modelDefinition);\n\tconst implicitOwnerField = getImplicitOwnerField(\n\t\tmodelDefinition,\n\t\tscalarFields\n\t);\n\n\tlet scalarAndMetadataFields = Object.values(scalarFields)\n\t\t.map(({ name }) => name)\n\t\t.concat(implicitOwnerField)\n\t\t.concat(nonModelFields);\n\n\tif (isSchemaModel(modelDefinition)) {\n\t\tscalarAndMetadataFields = scalarAndMetadataFields\n\t\t\t.concat(getMetadataFields())\n\t\t\t.concat(getConnectionFields(modelDefinition, namespace));\n\t}\n\n\tconst result = scalarAndMetadataFields.join('\\n');\n\n\treturn result;\n}\n\nfunction getImplicitOwnerField(\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tscalarFields: ModelFields\n) {\n\tconst ownerFields = getOwnerFields(modelDefinition);\n\n\tif (!scalarFields.owner && ownerFields.includes('owner')) {\n\t\treturn ['owner'];\n\t}\n\treturn [];\n}\n\nfunction getOwnerFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst ownerFields: string[] = [];\n\tif (isSchemaModelWithAttributes(modelDefinition)) {\n\t\tmodelDefinition.attributes!.forEach(attr => {\n\t\t\tif (attr.properties && attr.properties.rules) {\n\t\t\t\tconst rule = attr.properties.rules.find(rule => rule.allow === 'owner');\n\t\t\t\tif (rule && rule.ownerField) {\n\t\t\t\t\townerFields.push(rule.ownerField);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn ownerFields;\n}\n\nfunction getScalarFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): ModelFields {\n\tconst { fields } = modelDefinition;\n\n\tconst result = Object.values(fields)\n\t\t.filter(field => {\n\t\t\tif (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t})\n\t\t.reduce((acc, field) => {\n\t\t\tacc[field.name] = field;\n\n\t\t\treturn acc;\n\t\t}, {} as ModelFields);\n\n\treturn result;\n}\n\n// Used for generating the selection set for queries and mutations\nfunction getConnectionFields(\n\tmodelDefinition: SchemaModel,\n\tnamespace: SchemaNamespace\n): string[] {\n\tconst result: string[] = [];\n\n\tObject.values(modelDefinition.fields)\n\t\t.filter(({ association }) => association && Object.keys(association).length)\n\t\t.forEach(({ name, association }) => {\n\t\t\tconst { connectionType } = association || {};\n\n\t\t\tswitch (connectionType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tif (isTargetNameAssociation(association)) {\n\t\t\t\t\t\t// New codegen (CPK)\n\t\t\t\t\t\tif (association.targetNames && association.targetNames.length > 0) {\n\t\t\t\t\t\t\t// Need to retrieve relations in order to get connected model keys\n\t\t\t\t\t\t\tconst [relations] = establishRelationAndKeys(namespace);\n\n\t\t\t\t\t\t\tconst connectedModelName =\n\t\t\t\t\t\t\t\tmodelDefinition.fields[name].type['model'];\n\n\t\t\t\t\t\t\tconst byPkIndex = relations[connectedModelName].indexes.find(\n\t\t\t\t\t\t\t\t([name]) => name === 'byPk'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst keyFields = byPkIndex && byPkIndex[1];\n\t\t\t\t\t\t\tconst keyFieldSelectionSet = keyFields?.join(' ');\n\n\t\t\t\t\t\t\t// We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n\t\t\t\t\t\t\tresult.push(`${name} { ${keyFieldSelectionSet} _deleted }`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// backwards-compatability for schema generated prior to custom primary key support\n\t\t\t\t\t\t\tresult.push(`${name} { id _deleted }`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid connection type ${connectionType}`);\n\t\t\t}\n\t\t});\n\n\treturn result;\n}\n\nfunction getNonModelFields(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst result: string[] = [];\n\n\tObject.values(modelDefinition.fields).forEach(({ name, type }) => {\n\t\tif (isNonModelFieldType(type)) {\n\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\t\t\tconst scalarFields = Object.values(getScalarFields(typeDefinition)).map(\n\t\t\t\t({ name }) => name\n\t\t\t);\n\n\t\t\tconst nested: string[] = [];\n\t\t\tObject.values(typeDefinition.fields).forEach(field => {\n\t\t\t\tconst { type, name } = field;\n\n\t\t\t\tif (isNonModelFieldType(type)) {\n\t\t\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\t\t\t\t\tnested.push(\n\t\t\t\t\t\t`${name} { ${generateSelectionSet(namespace, typeDefinition)} }`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tresult.push(`${name} { ${scalarFields.join(' ')} ${nested.join(' ')} }`);\n\t\t}\n\t});\n\n\treturn result;\n}\n\nexport function getAuthorizationRules(\n\tmodelDefinition: SchemaModel\n): AuthorizationRule[] {\n\t// Searching for owner authorization on attributes\n\tconst authConfig = ([] as ModelAttributes)\n\t\t.concat(modelDefinition.attributes || [])\n\t\t.find(attr => attr && attr.type === 'auth');\n\n\tconst { properties: { rules = [] } = {} } = authConfig || {};\n\n\tconst resultRules: AuthorizationRule[] = [];\n\t// Multiple rules can be declared for allow: owner\n\trules.forEach(rule => {\n\t\t// setting defaults for backwards compatibility with old cli\n\t\tconst {\n\t\t\tidentityClaim = 'cognito:username',\n\t\t\townerField = 'owner',\n\t\t\toperations = ['create', 'update', 'delete', 'read'],\n\t\t\tprovider = 'userPools',\n\t\t\tgroupClaim = 'cognito:groups',\n\t\t\tallow: authStrategy = 'iam',\n\t\t\tgroups = [],\n\t\t} = rule;\n\n\t\tconst isReadAuthorized = operations.includes('read');\n\t\tconst isOwnerAuth = authStrategy === 'owner';\n\n\t\tif (!isReadAuthorized && !isOwnerAuth) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst authRule: AuthorizationRule = {\n\t\t\tidentityClaim,\n\t\t\townerField,\n\t\t\tprovider,\n\t\t\tgroupClaim,\n\t\t\tauthStrategy,\n\t\t\tgroups,\n\t\t\tareSubscriptionsPublic: false,\n\t\t};\n\n\t\tif (isOwnerAuth) {\n\t\t\t// look for the subscription level override\n\t\t\t// only pay attention to the public level\n\t\t\tconst modelConfig = ([] as ModelAttributes)\n\t\t\t\t.concat(modelDefinition.attributes || [])\n\t\t\t\t.find(attr => attr && attr.type === 'model');\n\n\t\t\t// find the subscriptions level. ON is default\n\t\t\tconst { properties: { subscriptions: { level = 'on' } = {} } = {} } =\n\t\t\t\tmodelConfig || {};\n\n\t\t\t// treat subscriptions as public for owner auth with unprotected reads\n\t\t\t// when `read` is omitted from `operations`\n\t\t\tauthRule.areSubscriptionsPublic =\n\t\t\t\t!operations.includes('read') || level === 'public';\n\t\t}\n\n\t\tif (isOwnerAuth) {\n\t\t\t// owner rules has least priority\n\t\t\tresultRules.push(authRule);\n\t\t\treturn;\n\t\t}\n\n\t\tresultRules.unshift(authRule);\n\t});\n\n\treturn resultRules;\n}\n\nexport function buildSubscriptionGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\ttransformerMutationType: TransformerMutationType,\n\tisOwnerAuthorization: boolean,\n\townerField: string\n): [TransformerMutationType, string, string] {\n\tconst selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName, pluralName: pluralTypeName } = modelDefinition;\n\n\tconst opName = `on${transformerMutationType}${typeName}`;\n\tlet docArgs = '';\n\tlet opArgs = '';\n\n\tif (isOwnerAuthorization) {\n\t\tdocArgs = `($${ownerField}: String!)`;\n\t\topArgs = `(${ownerField}: $${ownerField})`;\n\t}\n\n\treturn [\n\t\ttransformerMutationType,\n\t\topName,\n\t\t`subscription operation${docArgs}{\n\t\t\t${opName}${opArgs}{\n\t\t\t\t${selectionSet}\n\t\t\t}\n\t\t}`,\n\t];\n}\n\nexport function buildGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\tgraphQLOpType: keyof typeof GraphQLOperationType\n): [TransformerMutationType, string, string][] {\n\tlet selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName, pluralName: pluralTypeName } = modelDefinition;\n\n\tlet operation: string;\n\tlet documentArgs: string;\n\tlet operationArgs: string;\n\tlet transformerMutationType: TransformerMutationType;\n\n\tswitch (graphQLOpType) {\n\t\tcase 'LIST':\n\t\t\toperation = `sync${pluralTypeName}`;\n\t\t\tdocumentArgs = `($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model${typeName}FilterInput)`;\n\t\t\toperationArgs =\n\t\t\t\t'(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n\t\t\tselectionSet = `items {\n\t\t\t\t\t\t\t${selectionSet}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextToken\n\t\t\t\t\t\tstartedAt`;\n\t\t\tbreak;\n\t\tcase 'CREATE':\n\t\t\toperation = `create${typeName}`;\n\t\t\tdocumentArgs = `($input: Create${typeName}Input!)`;\n\t\t\toperationArgs = '(input: $input)';\n\t\t\ttransformerMutationType = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase 'UPDATE':\n\t\t\toperation = `update${typeName}`;\n\t\t\tdocumentArgs = `($input: Update${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase 'DELETE':\n\t\t\toperation = `delete${typeName}`;\n\t\t\tdocumentArgs = `($input: Delete${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tcase 'GET':\n\t\t\toperation = `get${typeName}`;\n\t\t\tdocumentArgs = `($id: ID!)`;\n\t\t\toperationArgs = '(id: $id)';\n\t\t\ttransformerMutationType = TransformerMutationType.GET;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid graphQlOpType ${graphQLOpType}`);\n\t}\n\n\treturn [\n\t\t[\n\t\t\ttransformerMutationType!,\n\t\t\toperation!,\n\t\t\t`${GraphQLOperationType[graphQLOpType]} operation${documentArgs}{\n\t\t${operation!}${operationArgs}{\n\t\t\t${selectionSet}\n\t\t}\n\t}`,\n\t\t],\n\t];\n}\n\nexport function createMutationInstanceFromModelOperation<\n\tT extends PersistentModel\n>(\n\trelationships: RelationshipType,\n\tmodelDefinition: SchemaModel,\n\topType: OpType,\n\tmodel: PersistentModelConstructor<T>,\n\telement: T,\n\tcondition: GraphQLCondition,\n\tMutationEventConstructor: PersistentModelConstructor<MutationEvent>,\n\tmodelInstanceCreator: ModelInstanceCreator,\n\tid?: string\n): MutationEvent {\n\tlet operation: TransformerMutationType;\n\n\tswitch (opType) {\n\t\tcase OpType.INSERT:\n\t\t\toperation = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase OpType.UPDATE:\n\t\t\toperation = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase OpType.DELETE:\n\t\t\toperation = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid opType ${opType}`);\n\t}\n\n\t// stringify nested objects of type AWSJSON\n\t// this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n\t// but still send the object correctly over the wire\n\tconst replacer = (k, v) => {\n\t\tconst isAWSJSON =\n\t\t\tk &&\n\t\t\tv !== null &&\n\t\t\ttypeof v === 'object' &&\n\t\t\tmodelDefinition.fields[k] &&\n\t\t\tmodelDefinition.fields[k].type === 'AWSJSON';\n\n\t\tif (isAWSJSON) {\n\t\t\treturn JSON.stringify(v);\n\t\t}\n\t\treturn v;\n\t};\n\n\tconst modelId = getIdentifierValue(modelDefinition, element);\n\tconst optionalId = OpType.INSERT && id ? { id } : {};\n\n\tconst mutationEvent = modelInstanceCreator(MutationEventConstructor, {\n\t\t...optionalId,\n\t\tdata: JSON.stringify(element, replacer),\n\t\tmodelId,\n\t\tmodel: model.name,\n\t\toperation: operation!,\n\t\tcondition: JSON.stringify(condition),\n\t});\n\n\treturn mutationEvent;\n}\n\nexport function predicateToGraphQLCondition(\n\tpredicate: PredicatesGroup<any>,\n\tmodelDefinition: SchemaModel\n): GraphQLCondition {\n\tconst result = {};\n\n\tif (!predicate || !Array.isArray(predicate.predicates)) {\n\t\treturn result;\n\t}\n\n\t// This is compatible with how the GQL Transform currently generates the Condition Input,\n\t// i.e. any PK and SK fields are omitted and can't be used as conditions.\n\t// However, I think this limits usability.\n\t// What if we want to delete all records where SK > some value\n\t// Or all records where PK = some value but SKs are different values\n\n\t// TODO: if the Transform gets updated we'll need to modify this logic to only omit\n\t// key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n\n\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\treturn predicateToGraphQLFilter(predicate, keyFields) as GraphQLCondition;\n}\n\nexport function predicateToGraphQLFilter(\n\tpredicatesGroup: PredicatesGroup<any>,\n\tfieldsToOmit: string[] = []\n): GraphQLFilter {\n\tconst result: GraphQLFilter = {};\n\n\tif (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n\t\treturn result;\n\t}\n\n\tconst { type, predicates } = predicatesGroup;\n\tconst isList = type === 'and' || type === 'or';\n\n\tresult[type] = isList ? [] : {};\n\n\tconst appendToFilter = value =>\n\t\tisList ? result[type].push(value) : (result[type] = value);\n\n\tpredicates.forEach(predicate => {\n\t\tif (isPredicateObj(predicate)) {\n\t\t\tconst { field, operator, operand } = predicate;\n\n\t\t\tif (fieldsToOmit.includes(field as string)) return;\n\n\t\t\tconst gqlField: GraphQLField = {\n\t\t\t\t[field]: { [operator]: operand },\n\t\t\t};\n\n\t\t\tappendToFilter(gqlField);\n\t\t\treturn;\n\t\t}\n\n\t\tconst child = predicateToGraphQLFilter(predicate, fieldsToOmit);\n\t\tObject.keys(child).length > 0 && appendToFilter(child);\n\t});\n\n\tif (isList) {\n\t\tif (result[type].length === 0) return {};\n\t} else {\n\t\tif (Object.keys(result[type]).length === 0) return {};\n\t}\n\n\treturn result;\n}\n\nexport function getUserGroupsFromToken(\n\ttoken: { [field: string]: any },\n\trule: AuthorizationRule\n): string[] {\n\t// validate token against groupClaim\n\tlet userGroups: string[] | string = token[rule.groupClaim] || [];\n\n\tif (typeof userGroups === 'string') {\n\t\tlet parsedGroups;\n\t\ttry {\n\t\t\tparsedGroups = JSON.parse(userGroups);\n\t\t} catch (e) {\n\t\t\tparsedGroups = userGroups;\n\t\t}\n\t\tuserGroups = [].concat(parsedGroups);\n\t}\n\n\treturn userGroups;\n}\n\nexport async function getModelAuthModes({\n\tauthModeStrategy,\n\tdefaultAuthMode,\n\tmodelName,\n\tschema,\n}: {\n\tauthModeStrategy: AuthModeStrategy;\n\tdefaultAuthMode: GRAPHQL_AUTH_MODE;\n\tmodelName: string;\n\tschema: InternalSchema;\n}): Promise<{\n\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n}> {\n\tconst operations = Object.values(ModelOperation);\n\n\tconst modelAuthModes: {\n\t\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n\t} = {\n\t\tCREATE: [],\n\t\tREAD: [],\n\t\tUPDATE: [],\n\t\tDELETE: [],\n\t};\n\n\ttry {\n\t\tawait Promise.all(\n\t\t\toperations.map(async operation => {\n\t\t\t\tconst authModes = await authModeStrategy({\n\t\t\t\t\tschema,\n\t\t\t\t\tmodelName,\n\t\t\t\t\toperation,\n\t\t\t\t});\n\n\t\t\t\tif (typeof authModes === 'string') {\n\t\t\t\t\tmodelAuthModes[operation] = [authModes];\n\t\t\t\t} else if (Array.isArray(authModes) && authModes.length) {\n\t\t\t\t\tmodelAuthModes[operation] = authModes;\n\t\t\t\t} else {\n\t\t\t\t\t// Use default auth mode if nothing is returned from authModeStrategy\n\t\t\t\t\tmodelAuthModes[operation] = [defaultAuthMode];\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t} catch (error) {\n\t\tlogger.debug(`Error getting auth modes for model: ${modelName}`, error);\n\t}\n\treturn modelAuthModes;\n}\n\nexport function getForbiddenError(error) {\n\tconst forbiddenErrorMessages = [\n\t\t'Request failed with status code 401',\n\t\t'Request failed with status code 403',\n\t];\n\tlet forbiddenError;\n\tif (error && error.errors) {\n\t\tforbiddenError = (error.errors as [any]).find(err =>\n\t\t\tforbiddenErrorMessages.includes(err.message)\n\t\t);\n\t} else if (error && error.message) {\n\t\tforbiddenError = error;\n\t}\n\n\tif (forbiddenError) {\n\t\treturn forbiddenError.message;\n\t}\n\treturn null;\n}\n\nexport function getClientSideAuthError(error) {\n\tconst clientSideAuthErrors = Object.values(GraphQLAuthError);\n\tconst clientSideError =\n\t\terror &&\n\t\terror.message &&\n\t\tclientSideAuthErrors.find(clientError =>\n\t\t\terror.message.includes(clientError)\n\t\t);\n\treturn clientSideError || null;\n}\n\nexport async function getTokenForCustomAuth(\n\tauthMode: GRAPHQL_AUTH_MODE,\n\tamplifyConfig: Record<string, any> = {}\n): Promise<string | undefined> {\n\tif (authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA) {\n\t\tconst {\n\t\t\tauthProviders: { functionAuthProvider } = { functionAuthProvider: null },\n\t\t} = amplifyConfig;\n\t\tif (functionAuthProvider && typeof functionAuthProvider === 'function') {\n\t\t\ttry {\n\t\t\t\tconst { token } = await functionAuthProvider();\n\t\t\t\treturn token;\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Error retrieving token from \\`functionAuthProvider\\`: ${error}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO: add docs link once available\n\t\t\tthrow new Error(\n\t\t\t\t`You must provide a \\`functionAuthProvider\\` function to \\`DataStore.configure\\` when using ${GRAPHQL_AUTH_MODE.AWS_LAMBDA}`\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\nexport function getIdentifierValue(\n\tmodelDefinition: SchemaModel,\n\tmodel: ModelInstanceMetadata | PersistentModel\n): string {\n\tconst pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n\n\tconst idOrPk = pkFieldNames.map(f => model[f]).join(IDENTIFIER_KEY_SEPARATOR);\n\n\treturn idOrPk;\n}\n"]},"metadata":{},"sourceType":"module"}
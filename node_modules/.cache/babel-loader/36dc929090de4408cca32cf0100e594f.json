{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\nimport { Signer, Credentials } from '@aws-amplify/core';\nvar SERVICE_NAME = 'iotdevicegateway';\n\nvar AWSIoTProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSIoTProvider, _super);\n\n  function AWSIoTProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _super.call(this, options) || this;\n  }\n\n  Object.defineProperty(AWSIoTProvider.prototype, \"region\", {\n    get: function () {\n      return this.options.aws_pubsub_region;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSIoTProvider.prototype.getProviderName = function () {\n    return 'AWSIoTProvider';\n  };\n\n  Object.defineProperty(AWSIoTProvider.prototype, \"endpoint\", {\n    get: function () {\n      var _this = this;\n\n      return function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var endpoint, serviceInfo, _a, access_key, secret_key, session_token, result;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                endpoint = this.options.aws_pubsub_endpoint;\n                serviceInfo = {\n                  service: SERVICE_NAME,\n                  region: this.region\n                };\n                return [4\n                /*yield*/\n                , Credentials.get()];\n\n              case 1:\n                _a = _b.sent(), access_key = _a.accessKeyId, secret_key = _a.secretAccessKey, session_token = _a.sessionToken;\n                result = Signer.signUrl(endpoint, {\n                  access_key: access_key,\n                  secret_key: secret_key,\n                  session_token: session_token\n                }, serviceInfo);\n                return [2\n                /*return*/\n                , result];\n            }\n          });\n        });\n      }();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AWSIoTProvider;\n}(MqttOverWSProvider);\n\nexport { AWSIoTProvider };","map":{"version":3,"mappings":"2DAAA;AACA;;AACA,SAASA,kBAAT,QAAwD,sBAAxD;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,mBAApC;AAEA,IAAMC,YAAY,GAAG,kBAArB;;AAOA;AAAA;AAAA;AAAoCC;;AACnC,0BAAYC,OAAZ,EAA+C;AAAnC;AAAAA;AAAmC;;WAC9CC,kBAAMD,OAAN,KAAc;AACd;;AAEDE,wBAAcC,wBAAd,EAAc,QAAd,EAAoB;SAApB;AACC,aAAO,KAAKH,OAAL,CAAaI,iBAApB;AACA,KAFmB;oBAAA;;AAAA,GAApB;;AAIOD,6CAAP;AACC,WAAO,gBAAP;AACA,GAFM;;AAIPD,wBAAcC,wBAAd,EAAc,UAAd,EAAsB;SAAtB;AAAA;;AACC,aAAQ;AAAA;;;;;;AACDE,wBAAQ,GAAG,KAAKL,OAAL,CAAaM,mBAAxB;AAEAC,2BAAW,GAAG;AACnBC,yBAAO,EAAEV,YADU;AAEnBW,wBAAM,EAAE,KAAKA;AAFM,iBAAd;AAQF;AAAA;AAAA,kBAAMZ,WAAW,CAACa,GAAZ,EAAN;;;AAJEC,qBAIFC,SAJE,EACQC,UAAU,iBADlB,EAEYC,UAAU,qBAFtB,EAGSC,aAAa,kBAHtB;AAMAC,sBAAM,GAAGpB,MAAM,CAACqB,OAAP,CACdZ,QADc,EAEd;AAAEQ,4BAAU,YAAZ;AAAcC,4BAAU,YAAxB;AAA0BC,+BAAa;AAAvC,iBAFc,EAGdR,WAHc,CAAT;AAMN;AAAA;AAAA,kBAAOS,MAAP;;;SAnBO;AAoBP,OApBM,EAAP;AAqBA,KAtBqB;oBAAA;;AAAA,GAAtB;AAuBD;AAAC,CApCD,CAAoCrB,kBAApC","names":["MqttOverWSProvider","Signer","Credentials","SERVICE_NAME","__extends","options","_super","Object","AWSIoTProvider","aws_pubsub_region","endpoint","aws_pubsub_endpoint","serviceInfo","service","region","get","_a","_b","access_key","secret_key","session_token","result","signUrl"],"sources":["/home/dalienst/node_modules/@aws-amplify/pubsub/src/Providers/AWSIotProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { MqttOverWSProvider, MqttProviderOptions } from './MqttOverWSProvider';\nimport { Signer, Credentials } from '@aws-amplify/core';\n\nconst SERVICE_NAME = 'iotdevicegateway';\n\nexport interface AWSIoTProviderOptions extends MqttProviderOptions {\n\taws_pubsub_region?: string;\n\taws_pubsub_endpoint?: string;\n}\n\nexport class AWSIoTProvider extends MqttOverWSProvider {\n\tconstructor(options: AWSIoTProviderOptions = {}) {\n\t\tsuper(options);\n\t}\n\n\tprotected get region() {\n\t\treturn this.options.aws_pubsub_region;\n\t}\n\n\tpublic getProviderName() {\n\t\treturn 'AWSIoTProvider';\n\t}\n\n\tprotected get endpoint() {\n\t\treturn (async () => {\n\t\t\tconst endpoint = this.options.aws_pubsub_endpoint;\n\n\t\t\tconst serviceInfo = {\n\t\t\t\tservice: SERVICE_NAME,\n\t\t\t\tregion: this.region,\n\t\t\t};\n\t\t\tconst {\n\t\t\t\taccessKeyId: access_key,\n\t\t\t\tsecretAccessKey: secret_key,\n\t\t\t\tsessionToken: session_token,\n\t\t\t} = await Credentials.get();\n\n\t\t\tconst result = Signer.signUrl(\n\t\t\t\tendpoint,\n\t\t\t\t{ access_key, secret_key, session_token },\n\t\t\t\tserviceInfo\n\t\t\t);\n\n\t\t\treturn result;\n\t\t})();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
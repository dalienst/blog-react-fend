{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar isEmptyData_1 = require(\"./isEmptyData\");\n\nvar constants_1 = require(\"./constants\");\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(function (keyData) {\n        return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);\n      });\n      this.operation.catch(function () {});\n    } else {\n      this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest(\"SHA-256\"));\n    }\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    var _this = this;\n\n    if ((0, isEmptyData_1.isEmptyData)(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(function (operation) {\n      operation.onerror = function () {\n        _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n      };\n\n      operation.process(toArrayBufferView(toHash));\n      return operation;\n    });\n    this.operation.catch(function () {});\n  };\n\n  Sha256.prototype.digest = function () {\n    return this.operation.then(function (operation) {\n      return new Promise(function (resolve, reject) {\n        operation.onerror = function () {\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n\n        operation.oncomplete = function () {\n          if (operation.result) {\n            resolve(new Uint8Array(operation.result));\n          }\n\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n\n        operation.finish();\n      });\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction getKeyPromise(secret) {\n  return new Promise(function (resolve, reject) {\n    var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]);\n\n    keyOperation.oncomplete = function () {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n\n    keyOperation.onerror = function () {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data) {\n  if (typeof data === \"string\") {\n    return (0, util_utf8_browser_1.fromUtf8)(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}","map":{"version":3,"mappings":"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","names":["secret","operation","getKeyPromise","then","msCrypto","subtle","sign","constants_1","keyData","catch","Promise","resolve","digest","Sha256","toHash","onerror","_this","reject","Error","process","toArrayBufferView","oncomplete","result","Uint8Array","finish","exports","keyOperation","importKey","data","ArrayBuffer","isView","buffer","byteOffset","byteLength","BYTES_PER_ELEMENT"],"sources":["/home/dalienst/node_modules/@aws-amplify/notifications/node_modules/@aws-crypto/sha256-browser/src/ie11Sha256.ts"],"sourcesContent":["import { isEmptyData } from \"./isEmptyData\";\nimport { SHA_256_HMAC_ALGO } from \"./constants\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { CryptoOperation, Key, MsWindow } from \"@aws-crypto/ie11-detection\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private operation: Promise<CryptoOperation>;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(keyData =>\n        (locateWindow() as MsWindow).msCrypto.subtle.sign(\n          SHA_256_HMAC_ALGO,\n          keyData\n        )\n      );\n      this.operation.catch(() => {});\n    } else {\n      this.operation = Promise.resolve(\n        (locateWindow() as MsWindow).msCrypto.subtle.digest(\"SHA-256\")\n      );\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(operation => {\n      operation.onerror = () => {\n        this.operation = Promise.reject(\n          new Error(\"Error encountered updating hash\")\n        );\n      };\n      operation.process(toArrayBufferView(toHash));\n\n      return operation;\n    });\n    this.operation.catch(() => {});\n  }\n\n  digest(): Promise<Uint8Array> {\n    return this.operation.then<Uint8Array>(\n      operation =>\n        new Promise((resolve, reject) => {\n          operation.onerror = () => {\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n          operation.oncomplete = () => {\n            if (operation.result) {\n              resolve(new Uint8Array(operation.result));\n            }\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n\n          operation.finish();\n        })\n    );\n  }\n}\n\nfunction getKeyPromise(secret: SourceData): Promise<Key> {\n  return new Promise((resolve, reject) => {\n    const keyOperation = (locateWindow() as MsWindow).msCrypto.subtle.importKey(\n      \"raw\",\n      toArrayBufferView(secret),\n      SHA_256_HMAC_ALGO,\n      false,\n      [\"sign\"]\n    );\n\n    keyOperation.oncomplete = () => {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = () => {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { getFeaturesFromData } from \"./utils\";\nimport { drawClusterLayer } from \"./drawClusterLayer\";\nimport { drawUnclusteredLayer } from \"./drawUnclusteredLayer\";\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n * @param {String} sourceName A user defined name used for determining the maplibre data source and the maplibre layers\n * @param {Coordinate[] | Feature[]} data An array of coordinate data or GeoJSON Features used as the data source for maplibre\n * @param {maplibre-gl-js-Map} map A maplibre-gl-js [map](https://maplibre.org/maplibre-gl-js-docs/api/map/) on which the points will be drawn\n * @param {Object} options An object containing options for changing the styles and features of the points rendered to the map, see the options for more details on available settings\n * @param {String} options.showCluster Determines whether or not points close together should be clustered into a single point\n * @param {String} options.clusterOptions Object for determining cluster options, see [ClusterOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L43) for more details\n * @param {String} options.unclusteredOptions Object for determining unclustered point options, see [UnclusteredOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L8) for more details\n * @param {MAP_STYLE} mapStyle A required parameter that indicates the map style returned from Amazon Location Service. This is used to determine the default fonts to be used with maplibre-gl-js. View existing styles [here](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/constants.ts#L8)\n * @returns {DrawPointsOutput} output An object containing the string id's of the sources and layers used to draw the points to the map. This includes the sourceId, clusterLayerId, clusterSymbolLayerId, unclusteredLayerId.\n * @property {String} sourceId The [source](https://maplibre.org/maplibre-gl-js-docs/api/sources/) used to contain all of the coordinate/feature data\n * @property {String} clusterLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/) used for creating and styling the points that are clustered together\n * @property {String} clusterSymbolLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#symbol) used for creating styling the number that shows the count of points in a cluster\n * @property {String} unclusteredLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers) used for creating and styling the individual points on the map and the popup when clicking on a point\n */\n\nexport function drawPoints(sourceName, data, map) {\n  let {\n    showCluster = true,\n    clusterOptions = {},\n    unclusteredOptions: unclusteredMarkerOptions = {},\n    autoFit = true\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let mapStyle = arguments.length > 4 ? arguments[4] : undefined;\n\n  var _a, _b;\n\n  if (!map || typeof map.addSource !== \"function\" || typeof map.addLayer !== \"function\") {\n    throw new Error(\"Please use a maplibre map\");\n  }\n  /*\n   * Convert data passed in as coordinates into features\n   */\n\n\n  const features = getFeaturesFromData(data);\n  /*\n   * Data source for features\n   */\n\n  const sourceId = sourceName;\n  map.addSource(sourceId, {\n    type: \"geojson\",\n    data: {\n      type: \"FeatureCollection\",\n      features\n    },\n    cluster: showCluster,\n    clusterMaxZoom: (_a = clusterOptions.clusterMaxZoom) !== null && _a !== void 0 ? _a : 14,\n    clusterRadius: (_b = clusterOptions.smCircleSize) !== null && _b !== void 0 ? _b : 60,\n    generateId: true\n  });\n  /*\n   * Draw ui layers for source data\n   */\n\n  let clusterLayerId, clusterSymbolLayerId;\n\n  if (showCluster) {\n    ({\n      clusterLayerId,\n      clusterSymbolLayerId\n    } = drawClusterLayer(sourceId, map, clusterOptions, mapStyle));\n  }\n\n  const {\n    unclusteredLayerId\n  } = drawUnclusteredLayer(sourceId, map, unclusteredMarkerOptions || {});\n\n  if (autoFit) {\n    const mapBounds = map.getBounds();\n    features.forEach(function (feature) {\n      mapBounds.extend(feature.geometry.coordinates);\n    });\n    map.fitBounds(mapBounds);\n  } // utility function for setting layer visibility to none\n\n\n  const hide = () => {\n    map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"none\");\n    if (clusterLayerId) map.setLayoutProperty(clusterLayerId, \"visibility\", \"none\");\n    if (clusterSymbolLayerId) map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"none\");\n  }; // utility function for setting layer visibility to visible\n\n\n  const show = () => {\n    map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"visible\");\n    if (clusterLayerId) map.setLayoutProperty(clusterLayerId, \"visibility\", \"visible\");\n    if (clusterSymbolLayerId) map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"visible\");\n  }; // utility function updating the data source\n\n\n  const setData = data => {\n    const features = getFeaturesFromData(data);\n    map.getSource(sourceId).setData({\n      type: \"FeatureCollection\",\n      features\n    });\n  };\n\n  return {\n    sourceId,\n    unclusteredLayerId,\n    clusterLayerId,\n    clusterSymbolLayerId,\n    setData,\n    show,\n    hide\n  };\n}","map":{"version":3,"sources":["/home/dalienst/node_modules/maplibre-gl-js-amplify/lib/esm/drawPoints.js"],"names":["getFeaturesFromData","drawClusterLayer","drawUnclusteredLayer","drawPoints","sourceName","data","map","showCluster","clusterOptions","unclusteredOptions","unclusteredMarkerOptions","autoFit","mapStyle","_a","_b","addSource","addLayer","Error","features","sourceId","type","cluster","clusterMaxZoom","clusterRadius","smCircleSize","generateId","clusterLayerId","clusterSymbolLayerId","unclusteredLayerId","mapBounds","getBounds","forEach","feature","extend","geometry","coordinates","fitBounds","hide","setLayoutProperty","show","setData","getSource"],"mappings":"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","sourcesContent":["import { getFeaturesFromData } from \"./utils\";\nimport { drawClusterLayer } from \"./drawClusterLayer\";\nimport { drawUnclusteredLayer } from \"./drawUnclusteredLayer\";\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n * @param {String} sourceName A user defined name used for determining the maplibre data source and the maplibre layers\n * @param {Coordinate[] | Feature[]} data An array of coordinate data or GeoJSON Features used as the data source for maplibre\n * @param {maplibre-gl-js-Map} map A maplibre-gl-js [map](https://maplibre.org/maplibre-gl-js-docs/api/map/) on which the points will be drawn\n * @param {Object} options An object containing options for changing the styles and features of the points rendered to the map, see the options for more details on available settings\n * @param {String} options.showCluster Determines whether or not points close together should be clustered into a single point\n * @param {String} options.clusterOptions Object for determining cluster options, see [ClusterOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L43) for more details\n * @param {String} options.unclusteredOptions Object for determining unclustered point options, see [UnclusteredOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L8) for more details\n * @param {MAP_STYLE} mapStyle A required parameter that indicates the map style returned from Amazon Location Service. This is used to determine the default fonts to be used with maplibre-gl-js. View existing styles [here](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/constants.ts#L8)\n * @returns {DrawPointsOutput} output An object containing the string id's of the sources and layers used to draw the points to the map. This includes the sourceId, clusterLayerId, clusterSymbolLayerId, unclusteredLayerId.\n * @property {String} sourceId The [source](https://maplibre.org/maplibre-gl-js-docs/api/sources/) used to contain all of the coordinate/feature data\n * @property {String} clusterLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/) used for creating and styling the points that are clustered together\n * @property {String} clusterSymbolLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#symbol) used for creating styling the number that shows the count of points in a cluster\n * @property {String} unclusteredLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers) used for creating and styling the individual points on the map and the popup when clicking on a point\n */\nexport function drawPoints(sourceName, data, map, { showCluster = true, clusterOptions = {}, unclusteredOptions: unclusteredMarkerOptions = {}, autoFit = true, } = {}, mapStyle) {\n    var _a, _b;\n    if (!map ||\n        typeof map.addSource !== \"function\" ||\n        typeof map.addLayer !== \"function\") {\n        throw new Error(\"Please use a maplibre map\");\n    }\n    /*\n     * Convert data passed in as coordinates into features\n     */\n    const features = getFeaturesFromData(data);\n    /*\n     * Data source for features\n     */\n    const sourceId = sourceName;\n    map.addSource(sourceId, {\n        type: \"geojson\",\n        data: {\n            type: \"FeatureCollection\",\n            features,\n        },\n        cluster: showCluster,\n        clusterMaxZoom: (_a = clusterOptions.clusterMaxZoom) !== null && _a !== void 0 ? _a : 14,\n        clusterRadius: (_b = clusterOptions.smCircleSize) !== null && _b !== void 0 ? _b : 60,\n        generateId: true,\n    });\n    /*\n     * Draw ui layers for source data\n     */\n    let clusterLayerId, clusterSymbolLayerId;\n    if (showCluster) {\n        ({ clusterLayerId, clusterSymbolLayerId } = drawClusterLayer(sourceId, map, clusterOptions, mapStyle));\n    }\n    const { unclusteredLayerId } = drawUnclusteredLayer(sourceId, map, unclusteredMarkerOptions || {});\n    if (autoFit) {\n        const mapBounds = map.getBounds();\n        features.forEach(function (feature) {\n            mapBounds.extend(feature.geometry.coordinates);\n        });\n        map.fitBounds(mapBounds);\n    }\n    // utility function for setting layer visibility to none\n    const hide = () => {\n        map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"none\");\n        if (clusterLayerId)\n            map.setLayoutProperty(clusterLayerId, \"visibility\", \"none\");\n        if (clusterSymbolLayerId)\n            map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"none\");\n    };\n    // utility function for setting layer visibility to visible\n    const show = () => {\n        map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"visible\");\n        if (clusterLayerId)\n            map.setLayoutProperty(clusterLayerId, \"visibility\", \"visible\");\n        if (clusterSymbolLayerId)\n            map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"visible\");\n    };\n    // utility function updating the data source\n    const setData = (data) => {\n        const features = getFeaturesFromData(data);\n        map.getSource(sourceId).setData({\n            type: \"FeatureCollection\",\n            features,\n        });\n    };\n    return {\n        sourceId,\n        unclusteredLayerId,\n        clusterLayerId,\n        clusterSymbolLayerId,\n        setData,\n        show,\n        hide,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useCallback, useRef } from 'react';\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';\nimport { isActorWithState } from './useActor';\nimport { getServiceSnapshot } from './utils';\n\nfunction isService(actor) {\n  return 'state' in actor && 'machine' in actor;\n}\n\nvar defaultCompare = function (a, b) {\n  return a === b;\n};\n\nvar defaultGetSnapshot = function (a, initialStateCacheRef) {\n  if (isService(a)) {\n    // A status of 0 = interpreter not started\n    if (a.status === 0 && initialStateCacheRef.current) {\n      return initialStateCacheRef.current;\n    }\n\n    var snapshot = getServiceSnapshot(a);\n    initialStateCacheRef.current = a.status === 0 ? snapshot : null;\n    return snapshot;\n  }\n\n  return isActorWithState(a) ? a.state : undefined;\n};\n\nexport function useSelector(actor, selector, compare, getSnapshot) {\n  if (compare === void 0) {\n    compare = defaultCompare;\n  }\n\n  var initialStateCacheRef = useRef(null);\n  var subscribe = useCallback(function (handleStoreChange) {\n    var unsubscribe = actor.subscribe(handleStoreChange).unsubscribe;\n    return unsubscribe;\n  }, [actor]);\n  var boundGetSnapshot = useCallback(function () {\n    if (getSnapshot) {\n      return getSnapshot(actor);\n    }\n\n    return defaultGetSnapshot(actor, initialStateCacheRef);\n  }, [actor, getSnapshot]);\n  var selectedSnapshot = useSyncExternalStoreWithSelector(subscribe, boundGetSnapshot, boundGetSnapshot, selector, compare);\n  return selectedSnapshot;\n}","map":{"version":3,"sources":["/home/dalienst/node_modules/@aws-amplify/ui-react-core/node_modules/@xstate/react/es/useSelector.js"],"names":["useCallback","useRef","useSyncExternalStoreWithSelector","isActorWithState","getServiceSnapshot","isService","actor","defaultCompare","a","b","defaultGetSnapshot","initialStateCacheRef","status","current","snapshot","state","undefined","useSelector","selector","compare","getSnapshot","subscribe","handleStoreChange","unsubscribe","boundGetSnapshot","selectedSnapshot"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AACA,SAASC,gCAAT,QAAiD,4CAAjD;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,kBAAT,QAAmC,SAAnC;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,SAAO,WAAWA,KAAX,IAAoB,aAAaA,KAAxC;AACH;;AACD,IAAIC,cAAc,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,SAAOD,CAAC,KAAKC,CAAb;AAAiB,CAAxD;;AACA,IAAIC,kBAAkB,GAAG,UAAUF,CAAV,EAAaG,oBAAb,EAAmC;AACxD,MAAIN,SAAS,CAACG,CAAD,CAAb,EAAkB;AACd;AACA,QAAIA,CAAC,CAACI,MAAF,KAAa,CAAb,IAAkBD,oBAAoB,CAACE,OAA3C,EAAoD;AAChD,aAAOF,oBAAoB,CAACE,OAA5B;AACH;;AACD,QAAIC,QAAQ,GAAGV,kBAAkB,CAACI,CAAD,CAAjC;AACAG,IAAAA,oBAAoB,CAACE,OAArB,GAA+BL,CAAC,CAACI,MAAF,KAAa,CAAb,GAAiBE,QAAjB,GAA4B,IAA3D;AACA,WAAOA,QAAP;AACH;;AACD,SAAOX,gBAAgB,CAACK,CAAD,CAAhB,GAAsBA,CAAC,CAACO,KAAxB,GAAgCC,SAAvC;AACH,CAXD;;AAYA,OAAO,SAASC,WAAT,CAAqBX,KAArB,EAA4BY,QAA5B,EAAsCC,OAAtC,EAA+CC,WAA/C,EAA4D;AAC/D,MAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAGZ,cAAV;AAA2B;;AACrD,MAAII,oBAAoB,GAAGV,MAAM,CAAC,IAAD,CAAjC;AACA,MAAIoB,SAAS,GAAGrB,WAAW,CAAC,UAAUsB,iBAAV,EAA6B;AACrD,QAAIC,WAAW,GAAGjB,KAAK,CAACe,SAAN,CAAgBC,iBAAhB,EAAmCC,WAArD;AACA,WAAOA,WAAP;AACH,GAH0B,EAGxB,CAACjB,KAAD,CAHwB,CAA3B;AAIA,MAAIkB,gBAAgB,GAAGxB,WAAW,CAAC,YAAY;AAC3C,QAAIoB,WAAJ,EAAiB;AACb,aAAOA,WAAW,CAACd,KAAD,CAAlB;AACH;;AACD,WAAOI,kBAAkB,CAACJ,KAAD,EAAQK,oBAAR,CAAzB;AACH,GALiC,EAK/B,CAACL,KAAD,EAAQc,WAAR,CAL+B,CAAlC;AAMA,MAAIK,gBAAgB,GAAGvB,gCAAgC,CAACmB,SAAD,EAAYG,gBAAZ,EAA8BA,gBAA9B,EAAgDN,QAAhD,EAA0DC,OAA1D,CAAvD;AACA,SAAOM,gBAAP;AACH","sourcesContent":["import { useCallback, useRef } from 'react';\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';\nimport { isActorWithState } from './useActor';\nimport { getServiceSnapshot } from './utils';\nfunction isService(actor) {\n    return 'state' in actor && 'machine' in actor;\n}\nvar defaultCompare = function (a, b) { return a === b; };\nvar defaultGetSnapshot = function (a, initialStateCacheRef) {\n    if (isService(a)) {\n        // A status of 0 = interpreter not started\n        if (a.status === 0 && initialStateCacheRef.current) {\n            return initialStateCacheRef.current;\n        }\n        var snapshot = getServiceSnapshot(a);\n        initialStateCacheRef.current = a.status === 0 ? snapshot : null;\n        return snapshot;\n    }\n    return isActorWithState(a) ? a.state : undefined;\n};\nexport function useSelector(actor, selector, compare, getSnapshot) {\n    if (compare === void 0) { compare = defaultCompare; }\n    var initialStateCacheRef = useRef(null);\n    var subscribe = useCallback(function (handleStoreChange) {\n        var unsubscribe = actor.subscribe(handleStoreChange).unsubscribe;\n        return unsubscribe;\n    }, [actor]);\n    var boundGetSnapshot = useCallback(function () {\n        if (getSnapshot) {\n            return getSnapshot(actor);\n        }\n        return defaultGetSnapshot(actor, initialStateCacheRef);\n    }, [actor, getSnapshot]);\n    var selectedSnapshot = useSyncExternalStoreWithSelector(subscribe, boundGetSnapshot, boundGetSnapshot, selector, compare);\n    return selectedSnapshot;\n}\n"]},"metadata":{},"sourceType":"module"}
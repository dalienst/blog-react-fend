{"ast":null,"code":"export function blobReader(blob, onChunk, chunkSize) {\n  if (chunkSize === void 0) {\n    chunkSize = 1024 * 1024;\n  }\n\n  return new Promise(function (resolve, reject) {\n    var fileReader = new FileReader();\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n    var size = blob.size;\n    var totalBytesRead = 0;\n\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n\n      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n    }\n\n    fileReader.addEventListener(\"load\", function (event) {\n      var result = event.target.result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength; // read the next block\n\n      read();\n    }); // kick off the read\n\n    read();\n  });\n}","map":{"version":3,"mappings":"AAAA,OAAM,SAAUA,UAAV,CACJC,IADI,EAEJC,OAFI,EAGJC,SAHI,EAG2B;AAA/B;AAAAA,gBAAoB,OAAO,IAA3B;AAA+B;;AAE/B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AACjC,QAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;AAEAD,cAAU,CAACE,gBAAX,CAA4B,OAA5B,EAAqCH,MAArC;AACAC,cAAU,CAACE,gBAAX,CAA4B,OAA5B,EAAqCH,MAArC;AAEA,QAAMI,IAAI,GAAGT,IAAI,CAACS,IAAlB;AACA,QAAIC,cAAc,GAAG,CAArB;;AAEA,aAASC,IAAT,GAAa;AACX,UAAID,cAAc,IAAID,IAAtB,EAA4B;AAC1BL,eAAO;AACP;AACD;;AACDE,gBAAU,CAACM,iBAAX,CAA6BZ,IAAI,CAACa,KAAL,CAAWH,cAAX,EAA2BI,IAAI,CAACC,GAAL,CAASN,IAAT,EAAeC,cAAc,GAAGR,SAAhC,CAA3B,CAA7B;AACD;;AAEDI,cAAU,CAACE,gBAAX,CAA4B,MAA5B,EAAoC,UAACQ,KAAD,EAAM;AACxC,UAAMC,MAAM,GAAiBD,KAAK,CAACE,MAAN,CAAqBD,MAAlD;AACAhB,aAAO,CAAC,IAAIkB,UAAJ,CAAeF,MAAf,CAAD,CAAP;AACAP,oBAAc,IAAIO,MAAM,CAACG,UAAzB,CAHwC,CAIxC;;AACAT,UAAI;AACL,KAND,EAjBiC,CAyBjC;;AACAA,QAAI;AACL,GA3BM,CAAP;AA4BD","names":["blobReader","blob","onChunk","chunkSize","Promise","resolve","reject","fileReader","FileReader","addEventListener","size","totalBytesRead","read","readAsArrayBuffer","slice","Math","min","event","result","target","Uint8Array","byteLength"],"sources":["/home/dalienst/node_modules/@aws-sdk/chunked-blob-reader/src/index.ts"],"sourcesContent":["export function blobReader(\n  blob: Blob,\n  onChunk: (chunk: Uint8Array) => void,\n  chunkSize: number = 1024 * 1024\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n\n    const size = blob.size;\n    let totalBytesRead = 0;\n\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n    }\n\n    fileReader.addEventListener(\"load\", (event) => {\n      const result = <ArrayBuffer>(event.target as any).result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength;\n      // read the next block\n      read();\n    });\n\n    // kick off the read\n    read();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
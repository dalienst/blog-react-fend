{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __rest } from \"tslib\";\nimport { ModelPredicateCreator } from '../predicates';\nimport { QueryOne } from '../types';\nimport { USER, SYNC, valuesEqual } from '../util';\nimport { getIdentifierValue, TransformerMutationType } from './utils'; // TODO: Persist deleted ids\n// https://github.com/aws-amplify/amplify-js/blob/datastore-docs/packages/datastore/docs/sync-engine.md#outbox\n\nvar MutationEventOutbox =\n/** @class */\nfunction () {\n  function MutationEventOutbox(schema, MutationEvent, modelInstanceCreator, ownSymbol) {\n    this.schema = schema;\n    this.MutationEvent = MutationEvent;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.ownSymbol = ownSymbol;\n  }\n\n  MutationEventOutbox.prototype.enqueue = function (storage, mutationEvent) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , storage.runExclusive(function (s) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var mutationEventModelDefinition, predicate, _a, first, incomingMutationType, merged_1, incomingConditionJSON, incomingCondition, merged;\n\n                var _this = this;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      mutationEventModelDefinition = this.schema.namespaces[SYNC].models['MutationEvent'];\n                      predicate = ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n                        return c.modelId('eq', mutationEvent.modelId).id('ne', _this.inProgressMutationEventId);\n                      });\n                      return [4\n                      /*yield*/\n                      , s.query(this.MutationEvent, predicate)];\n\n                    case 1:\n                      _a = __read.apply(void 0, [_b.sent(), 1]), first = _a[0];\n                      if (!(first === undefined)) return [3\n                      /*break*/\n                      , 3];\n                      return [4\n                      /*yield*/\n                      , s.save(mutationEvent, undefined, this.ownSymbol)];\n\n                    case 2:\n                      _b.sent();\n\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      incomingMutationType = mutationEvent.operation;\n                      if (!(first.operation === TransformerMutationType.CREATE)) return [3\n                      /*break*/\n                      , 8];\n                      if (!(incomingMutationType === TransformerMutationType.DELETE)) return [3\n                      /*break*/\n                      , 5];\n                      return [4\n                      /*yield*/\n                      , s.delete(this.MutationEvent, predicate)];\n\n                    case 4:\n                      _b.sent();\n\n                      return [3\n                      /*break*/\n                      , 7];\n\n                    case 5:\n                      merged_1 = this.mergeUserFields(first, mutationEvent);\n                      return [4\n                      /*yield*/\n                      , s.save(this.MutationEvent.copyOf(first, function (draft) {\n                        draft.data = merged_1.data;\n                      }), undefined, this.ownSymbol)];\n\n                    case 6:\n                      _b.sent();\n\n                      _b.label = 7;\n\n                    case 7:\n                      return [3\n                      /*break*/\n                      , 12];\n\n                    case 8:\n                      incomingConditionJSON = mutationEvent.condition;\n                      incomingCondition = JSON.parse(incomingConditionJSON);\n                      merged = void 0;\n                      if (!(Object.keys(incomingCondition).length === 0)) return [3\n                      /*break*/\n                      , 10];\n                      merged = this.mergeUserFields(first, mutationEvent); // delete all for model\n\n                      return [4\n                      /*yield*/\n                      , s.delete(this.MutationEvent, predicate)];\n\n                    case 9:\n                      // delete all for model\n                      _b.sent();\n\n                      _b.label = 10;\n\n                    case 10:\n                      merged = merged || mutationEvent; // Enqueue new one\n\n                      return [4\n                      /*yield*/\n                      , s.save(merged, undefined, this.ownSymbol)];\n\n                    case 11:\n                      // Enqueue new one\n                      _b.sent();\n\n                      _b.label = 12;\n\n                    case 12:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.dequeue = function (storage, record, recordOp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var head;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.peek(storage)];\n\n          case 1:\n            head = _a.sent();\n            if (!record) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.syncOutboxVersionsOnDequeue(storage, record, head, recordOp)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , storage.delete(head)];\n\n          case 4:\n            _a.sent();\n\n            this.inProgressMutationEventId = undefined;\n            return [2\n            /*return*/\n            , head];\n        }\n      });\n    });\n  };\n  /**\n   * Doing a peek() implies that the mutation goes \"inProgress\"\n   *\n   * @param storage\n   */\n\n\n  MutationEventOutbox.prototype.peek = function (storage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var head;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , storage.queryOne(this.MutationEvent, QueryOne.FIRST)];\n\n          case 1:\n            head = _a.sent();\n            this.inProgressMutationEventId = head ? head.id : undefined;\n            return [2\n            /*return*/\n            , head];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.getForModel = function (storage, model, userModelDefinition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationEventModelDefinition, modelId, mutationEvents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            mutationEventModelDefinition = this.schema.namespaces[SYNC].models.MutationEvent;\n            modelId = getIdentifierValue(userModelDefinition, model);\n            return [4\n            /*yield*/\n            , storage.query(this.MutationEvent, ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n              return c.modelId('eq', modelId);\n            }))];\n\n          case 1:\n            mutationEvents = _a.sent();\n            return [2\n            /*return*/\n            , mutationEvents];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.getModelIds = function (storage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationEvents, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , storage.query(this.MutationEvent)];\n\n          case 1:\n            mutationEvents = _a.sent();\n            result = new Set();\n            mutationEvents.forEach(function (_a) {\n              var modelId = _a.modelId;\n              return result.add(modelId);\n            });\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  }; // applies _version from the AppSync mutation response to other items\n  // in the mutation queue with the same id\n  // see https://github.com/aws-amplify/amplify-js/pull/7354 for more details\n\n\n  MutationEventOutbox.prototype.syncOutboxVersionsOnDequeue = function (storage, record, head, recordOp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _version, _lastChangedAt, _deleted, _incomingData, incomingData, data, __version, __lastChangedAt, __deleted, _outgoingData, outgoingData, mutationEventModelDefinition, userModelDefinition, recordId, predicate, outdatedMutations, reconciledMutations;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (head.operation !== recordOp) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            _version = record._version, _lastChangedAt = record._lastChangedAt, _deleted = record._deleted, _incomingData = __rest(record, [\"_version\", \"_lastChangedAt\", \"_deleted\"]);\n            incomingData = this.removeTimestampFields(head.model, _incomingData);\n            data = JSON.parse(head.data);\n\n            if (!data) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            __version = data._version, __lastChangedAt = data._lastChangedAt, __deleted = data._deleted, _outgoingData = __rest(data, [\"_version\", \"_lastChangedAt\", \"_deleted\"]);\n            outgoingData = this.removeTimestampFields(head.model, _outgoingData); // Don't sync the version when the data in the response does not match the data\n            // in the request, i.e., when there's a handled conflict\n\n            if (!valuesEqual(incomingData, outgoingData, true)) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            mutationEventModelDefinition = this.schema.namespaces[SYNC].models['MutationEvent'];\n            userModelDefinition = this.schema.namespaces['user'].models[head.model];\n            recordId = getIdentifierValue(userModelDefinition, record);\n            predicate = ModelPredicateCreator.createFromExisting(mutationEventModelDefinition, function (c) {\n              return c.modelId('eq', recordId).id('ne', _this.inProgressMutationEventId);\n            });\n            return [4\n            /*yield*/\n            , storage.query(this.MutationEvent, predicate)];\n\n          case 1:\n            outdatedMutations = _a.sent();\n\n            if (!outdatedMutations.length) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            reconciledMutations = outdatedMutations.map(function (m) {\n              var oldData = JSON.parse(m.data);\n\n              var newData = __assign(__assign({}, oldData), {\n                _version: _version,\n                _lastChangedAt: _lastChangedAt\n              });\n\n              return _this.MutationEvent.copyOf(m, function (draft) {\n                draft.data = JSON.stringify(newData);\n              });\n            });\n            return [4\n            /*yield*/\n            , storage.delete(this.MutationEvent, predicate)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , Promise.all(reconciledMutations.map(function (m) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , storage.save(m, undefined, this.ownSymbol)];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _a.sent()];\n                  }\n                });\n              });\n            }))];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationEventOutbox.prototype.mergeUserFields = function (previous, current) {\n    var _a = JSON.parse(previous.data),\n        _version = _a._version,\n        _lastChangedAt = _a._lastChangedAt,\n        _deleted = _a._deleted,\n        previousData = __rest(_a, [\"_version\", \"_lastChangedAt\", \"_deleted\"]);\n\n    var _b = JSON.parse(current.data),\n        __version = _b._version,\n        __lastChangedAt = _b._lastChangedAt,\n        __deleted = _b._deleted,\n        currentData = __rest(_b, [\"_version\", \"_lastChangedAt\", \"_deleted\"]);\n\n    var data = JSON.stringify(__assign(__assign({\n      _version: _version,\n      _lastChangedAt: _lastChangedAt,\n      _deleted: _deleted\n    }, previousData), currentData));\n    return this.modelInstanceCreator(this.MutationEvent, __assign(__assign({}, current), {\n      data: data\n    }));\n  };\n  /*\n  if a model is using custom timestamp fields\n  the custom field names will be stored in the model attributes\n   e.g.\n  \"attributes\": [\n  {\n          \"type\": \"model\",\n          \"properties\": {\n              \"timestamps\": {\n                  \"createdAt\": \"createdOn\",\n                  \"updatedAt\": \"updatedOn\"\n              }\n          }\n  }\n  ]\n  */\n\n\n  MutationEventOutbox.prototype.removeTimestampFields = function (model, record) {\n    var _a, _b;\n\n    var CREATED_AT_DEFAULT_KEY = 'createdAt';\n    var UPDATED_AT_DEFAULT_KEY = 'updatedAt';\n    var createdTimestampKey = CREATED_AT_DEFAULT_KEY;\n    var updatedTimestampKey = UPDATED_AT_DEFAULT_KEY;\n    var modelAttributes = (_a = this.schema.namespaces[USER].models[model].attributes) === null || _a === void 0 ? void 0 : _a.find(function (attr) {\n      return attr.type === 'model';\n    });\n    var timestampFieldsMap = (_b = modelAttributes === null || modelAttributes === void 0 ? void 0 : modelAttributes.properties) === null || _b === void 0 ? void 0 : _b.timestamps;\n\n    if (timestampFieldsMap) {\n      createdTimestampKey = timestampFieldsMap[CREATED_AT_DEFAULT_KEY];\n      updatedTimestampKey = timestampFieldsMap[UPDATED_AT_DEFAULT_KEY];\n    }\n\n    delete record[createdTimestampKey];\n    delete record[updatedTimestampKey];\n    return record;\n  };\n\n  return MutationEventOutbox;\n}();\n\nexport { MutationEventOutbox };","map":{"version":3,"mappings":"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","names":["ModelPredicateCreator","QueryOne","USER","SYNC","valuesEqual","getIdentifierValue","TransformerMutationType","schema","MutationEvent","modelInstanceCreator","ownSymbol","MutationEventOutbox","storage","mutationEvent","runExclusive","s","mutationEventModelDefinition","namespaces","models","predicate","createFromExisting","modelId","id","_this","inProgressMutationEventId","query","_a","_b","first","undefined","save","incomingMutationType","operation","CREATE","DELETE","delete","merged_1","mergeUserFields","copyOf","draft","data","incomingConditionJSON","incomingCondition","JSON","parse","merged","Object","keys","length","record","recordOp","peek","head","syncOutboxVersionsOnDequeue","queryOne","FIRST","model","userModelDefinition","mutationEvents","result","Set","forEach","add","_version","_lastChangedAt","_deleted","_incomingData","incomingData","removeTimestampFields","__version","__lastChangedAt","__deleted","_outgoingData","outgoingData","recordId","outdatedMutations","reconciledMutations","map","oldData","m","newData","stringify","Promise","all","previous","current","previousData","currentData","__assign","CREATED_AT_DEFAULT_KEY","UPDATED_AT_DEFAULT_KEY","createdTimestampKey","updatedTimestampKey","modelAttributes","attributes","find","type","timestampFieldsMap","properties","timestamps"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/sync/outbox.ts"],"sourcesContent":["import { MutationEvent } from './index';\nimport { ModelPredicateCreator } from '../predicates';\nimport {\n\tExclusiveStorage as Storage,\n\tStorageFacade,\n\tStorage as StorageClass,\n} from '../storage/storage';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport {\n\tInternalSchema,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tQueryOne,\n\tSchemaModel,\n} from '../types';\nimport { USER, SYNC, valuesEqual } from '../util';\nimport { getIdentifierValue, TransformerMutationType } from './utils';\n\n// TODO: Persist deleted ids\n// https://github.com/aws-amplify/amplify-js/blob/datastore-docs/packages/datastore/docs/sync-engine.md#outbox\nclass MutationEventOutbox {\n\tprivate inProgressMutationEventId!: string;\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly MutationEvent: PersistentModelConstructor<MutationEvent>,\n\t\tprivate readonly modelInstanceCreator: ModelInstanceCreator,\n\t\tprivate readonly ownSymbol: Symbol\n\t) {}\n\n\tpublic async enqueue(\n\t\tstorage: Storage,\n\t\tmutationEvent: MutationEvent\n\t): Promise<void> {\n\t\tawait storage.runExclusive(async s => {\n\t\t\tconst mutationEventModelDefinition =\n\t\t\t\tthis.schema.namespaces[SYNC].models['MutationEvent'];\n\n\t\t\t// `id` is the key for the record in the mutationEvent;\n\t\t\t// `modelId` is the key for the actual record that was mutated\n\t\t\tconst predicate = ModelPredicateCreator.createFromExisting<MutationEvent>(\n\t\t\t\tmutationEventModelDefinition,\n\t\t\t\tc =>\n\t\t\t\t\tc\n\t\t\t\t\t\t.modelId('eq', mutationEvent.modelId)\n\t\t\t\t\t\t.id('ne', this.inProgressMutationEventId)\n\t\t\t);\n\n\t\t\t// Check if there are any other records with same id\n\t\t\tconst [first] = await s.query(this.MutationEvent, predicate);\n\n\t\t\t// No other record with same modelId, so enqueue\n\t\t\tif (first === undefined) {\n\t\t\t\tawait s.save(mutationEvent, undefined, this.ownSymbol);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// There was an enqueued mutation for the modelId, so continue\n\t\t\tconst { operation: incomingMutationType } = mutationEvent;\n\n\t\t\tif (first.operation === TransformerMutationType.CREATE) {\n\t\t\t\tif (incomingMutationType === TransformerMutationType.DELETE) {\n\t\t\t\t\tawait s.delete(this.MutationEvent, predicate);\n\t\t\t\t} else {\n\t\t\t\t\t// first gets updated with the incoming mutation's data, condition intentionally skipped\n\n\t\t\t\t\t// we need to merge the fields for a create and update mutation to prevent\n\t\t\t\t\t// data loss, since update mutations only include changed fields\n\t\t\t\t\tconst merged = this.mergeUserFields(first, mutationEvent);\n\t\t\t\t\tawait s.save(\n\t\t\t\t\t\tthis.MutationEvent.copyOf(first, draft => {\n\t\t\t\t\t\t\tdraft.data = merged.data;\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tthis.ownSymbol\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst { condition: incomingConditionJSON } = mutationEvent;\n\t\t\t\tconst incomingCondition = JSON.parse(incomingConditionJSON);\n\t\t\t\tlet merged: MutationEvent;\n\n\t\t\t\t// If no condition\n\t\t\t\tif (Object.keys(incomingCondition).length === 0) {\n\t\t\t\t\tmerged = this.mergeUserFields(first, mutationEvent);\n\n\t\t\t\t\t// delete all for model\n\t\t\t\t\tawait s.delete(this.MutationEvent, predicate);\n\t\t\t\t}\n\n\t\t\t\tmerged = merged! || mutationEvent;\n\n\t\t\t\t// Enqueue new one\n\t\t\t\tawait s.save(merged, undefined, this.ownSymbol);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async dequeue(\n\t\tstorage: StorageClass,\n\t\trecord?: PersistentModel,\n\t\trecordOp?: TransformerMutationType\n\t): Promise<MutationEvent> {\n\t\tconst head = await this.peek(storage);\n\n\t\tif (record) {\n\t\t\tawait this.syncOutboxVersionsOnDequeue(storage, record, head, recordOp!);\n\t\t}\n\n\t\tawait storage.delete(head);\n\t\tthis.inProgressMutationEventId = undefined!;\n\n\t\treturn head;\n\t}\n\n\t/**\n\t * Doing a peek() implies that the mutation goes \"inProgress\"\n\t *\n\t * @param storage\n\t */\n\tpublic async peek(storage: StorageFacade): Promise<MutationEvent> {\n\t\tconst head = await storage.queryOne(this.MutationEvent, QueryOne.FIRST);\n\n\t\tthis.inProgressMutationEventId = head ? head.id : undefined!;\n\n\t\treturn head!;\n\t}\n\n\tpublic async getForModel<T extends PersistentModel>(\n\t\tstorage: StorageFacade,\n\t\tmodel: T,\n\t\tuserModelDefinition: SchemaModel\n\t): Promise<MutationEvent[]> {\n\t\tconst mutationEventModelDefinition =\n\t\t\tthis.schema.namespaces[SYNC].models.MutationEvent;\n\n\t\tconst modelId = getIdentifierValue(userModelDefinition, model);\n\n\t\tconst mutationEvents = await storage.query(\n\t\t\tthis.MutationEvent,\n\t\t\tModelPredicateCreator.createFromExisting(\n\t\t\t\tmutationEventModelDefinition,\n\t\t\t\tc => c.modelId('eq', modelId)\n\t\t\t)\n\t\t);\n\n\t\treturn mutationEvents;\n\t}\n\n\tpublic async getModelIds(storage: StorageFacade): Promise<Set<string>> {\n\t\tconst mutationEvents = await storage.query(this.MutationEvent);\n\n\t\tconst result = new Set<string>();\n\n\t\tmutationEvents.forEach(({ modelId }) => result.add(modelId));\n\n\t\treturn result;\n\t}\n\n\t// applies _version from the AppSync mutation response to other items\n\t// in the mutation queue with the same id\n\t// see https://github.com/aws-amplify/amplify-js/pull/7354 for more details\n\tprivate async syncOutboxVersionsOnDequeue(\n\t\tstorage: StorageClass,\n\t\trecord: PersistentModel,\n\t\thead: PersistentModel,\n\t\trecordOp: string\n\t): Promise<void> {\n\t\tif (head.operation !== recordOp) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { _version, _lastChangedAt, _deleted, ..._incomingData } = record;\n\t\tconst incomingData = this.removeTimestampFields(head.model, _incomingData);\n\n\t\tconst data = JSON.parse(head.data);\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst {\n\t\t\t_version: __version,\n\t\t\t_lastChangedAt: __lastChangedAt,\n\t\t\t_deleted: __deleted,\n\t\t\t..._outgoingData\n\t\t} = data;\n\t\tconst outgoingData = this.removeTimestampFields(head.model, _outgoingData);\n\n\t\t// Don't sync the version when the data in the response does not match the data\n\t\t// in the request, i.e., when there's a handled conflict\n\t\tif (!valuesEqual(incomingData, outgoingData, true)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mutationEventModelDefinition =\n\t\t\tthis.schema.namespaces[SYNC].models['MutationEvent'];\n\n\t\tconst userModelDefinition =\n\t\t\tthis.schema.namespaces['user'].models[head.model];\n\n\t\tconst recordId = getIdentifierValue(userModelDefinition, record);\n\n\t\tconst predicate = ModelPredicateCreator.createFromExisting<MutationEvent>(\n\t\t\tmutationEventModelDefinition,\n\t\t\tc => c.modelId('eq', recordId).id('ne', this.inProgressMutationEventId)\n\t\t);\n\n\t\tconst outdatedMutations = await storage.query(\n\t\t\tthis.MutationEvent,\n\t\t\tpredicate\n\t\t);\n\n\t\tif (!outdatedMutations.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst reconciledMutations = outdatedMutations.map(m => {\n\t\t\tconst oldData = JSON.parse(m.data);\n\n\t\t\tconst newData = { ...oldData, _version, _lastChangedAt };\n\n\t\t\treturn this.MutationEvent.copyOf(m, draft => {\n\t\t\t\tdraft.data = JSON.stringify(newData);\n\t\t\t});\n\t\t});\n\n\t\tawait storage.delete(this.MutationEvent, predicate);\n\n\t\tawait Promise.all(\n\t\t\treconciledMutations.map(\n\t\t\t\tasync m => await storage.save(m, undefined, this.ownSymbol)\n\t\t\t)\n\t\t);\n\t}\n\n\tprivate mergeUserFields(\n\t\tprevious: MutationEvent,\n\t\tcurrent: MutationEvent\n\t): MutationEvent {\n\t\tconst { _version, _lastChangedAt, _deleted, ...previousData } = JSON.parse(\n\t\t\tprevious.data\n\t\t);\n\n\t\tconst {\n\t\t\t_version: __version,\n\t\t\t_lastChangedAt: __lastChangedAt,\n\t\t\t_deleted: __deleted,\n\t\t\t...currentData\n\t\t} = JSON.parse(current.data);\n\n\t\tconst data = JSON.stringify({\n\t\t\t_version,\n\t\t\t_lastChangedAt,\n\t\t\t_deleted,\n\t\t\t...previousData,\n\t\t\t...currentData,\n\t\t});\n\n\t\treturn this.modelInstanceCreator(this.MutationEvent, {\n\t\t\t...current,\n\t\t\tdata,\n\t\t});\n\t}\n\n\t/* \n\tif a model is using custom timestamp fields\n\tthe custom field names will be stored in the model attributes\n\n\te.g.\n\t\"attributes\": [\n    {\n\t\t\t\"type\": \"model\",\n\t\t\t\"properties\": {\n\t\t\t\t\"timestamps\": {\n\t\t\t\t\t\"createdAt\": \"createdOn\",\n\t\t\t\t\t\"updatedAt\": \"updatedOn\"\n\t\t\t\t}\n\t\t\t}\n    }\n\t]\n\t*/\n\tprivate removeTimestampFields(\n\t\tmodel: string,\n\t\trecord: PersistentModel\n\t): PersistentModel {\n\t\tconst CREATED_AT_DEFAULT_KEY = 'createdAt';\n\t\tconst UPDATED_AT_DEFAULT_KEY = 'updatedAt';\n\n\t\tlet createdTimestampKey = CREATED_AT_DEFAULT_KEY;\n\t\tlet updatedTimestampKey = UPDATED_AT_DEFAULT_KEY;\n\n\t\tconst modelAttributes = this.schema.namespaces[USER].models[\n\t\t\tmodel\n\t\t].attributes?.find(attr => attr.type === 'model');\n\t\tconst timestampFieldsMap = modelAttributes?.properties?.timestamps;\n\n\t\tif (timestampFieldsMap) {\n\t\t\tcreatedTimestampKey = timestampFieldsMap[CREATED_AT_DEFAULT_KEY];\n\t\t\tupdatedTimestampKey = timestampFieldsMap[UPDATED_AT_DEFAULT_KEY];\n\t\t}\n\n\t\tdelete (record as Record<string, any>)[createdTimestampKey];\n\t\tdelete (record as Record<string, any>)[updatedTimestampKey];\n\n\t\treturn record;\n\t}\n}\n\nexport { MutationEventOutbox };\n"]},"metadata":{},"sourceType":"module"}
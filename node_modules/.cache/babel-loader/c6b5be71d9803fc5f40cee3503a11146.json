{"ast":null,"code":"import { __awaiter, __extends, __generator, __read } from \"tslib\";\nimport { Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { AbstractInterpretPredictionsProvider } from '../types/Providers';\nimport { InterpretTextCategories } from '../types';\nimport { ComprehendClient, DetectSyntaxCommand, DetectEntitiesCommand, DetectDominantLanguageCommand, DetectKeyPhrasesCommand, DetectSentimentCommand } from '@aws-sdk/client-comprehend';\n\nvar AmazonAIInterpretPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIInterpretPredictionsProvider, _super);\n\n  function AmazonAIInterpretPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n\n  AmazonAIInterpretPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIInterpretPredictionsProvider';\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.interpretText = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, interpretTypeConfig, _f, _g, _h, _j, text, _k, interpretType, _l, _m, _o, language, comprehendClient, doAll, languagePromise, languageDetectionParams, entitiesPromise, LanguageCode, _p, entitiesDetectionParams, sentimentPromise, LanguageCode, _q, sentimentParams, syntaxPromise, LanguageCode, _r, syntaxParams, keyPhrasesPromise, LanguageCode, _s, keyPhrasesParams, results, err_1;\n\n        return __generator(this, function (_t) {\n          switch (_t.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _t.sent();\n              if (!credentials) return [2\n              /*return*/\n              , rej('No credentials')];\n              _a = this._config.interpretText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, interpretTypeConfig = _e === void 0 ? '' : _e;\n              _f = input.text, _g = _f === void 0 ? {} : _f, _h = _g.source, _j = (_h === void 0 ? {} : _h).text, text = _j === void 0 ? '' : _j, _k = _g.type, interpretType = _k === void 0 ? interpretTypeConfig : _k;\n              _l = input.text, _m = (_l === void 0 ? {} : _l).source, _o = (_m === void 0 ? {} : _m).language, language = _o === void 0 ? undefined : _o;\n              comprehendClient = new ComprehendClient({\n                credentials: credentials,\n                region: region,\n                customUserAgent: getAmplifyUserAgent()\n              });\n              doAll = interpretType === InterpretTextCategories.ALL;\n\n              if (doAll || interpretType === InterpretTextCategories.LANGUAGE) {\n                languageDetectionParams = {\n                  Text: text\n                };\n                languagePromise = this.detectLanguage(languageDetectionParams, comprehendClient);\n              }\n\n              if (!(doAll || interpretType === InterpretTextCategories.ENTITIES)) return [3\n              /*break*/\n              , 4];\n              _p = language;\n              if (_p) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , languagePromise];\n\n            case 2:\n              _p = _t.sent();\n              _t.label = 3;\n\n            case 3:\n              LanguageCode = _p;\n\n              if (!LanguageCode) {\n                return [2\n                /*return*/\n                , rej('language code is required on source for this selection')];\n              }\n\n              entitiesDetectionParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              entitiesPromise = this.detectEntities(entitiesDetectionParams, comprehendClient);\n              _t.label = 4;\n\n            case 4:\n              if (!(doAll || interpretType === InterpretTextCategories.SENTIMENT)) return [3\n              /*break*/\n              , 7];\n              _q = language;\n              if (_q) return [3\n              /*break*/\n              , 6];\n              return [4\n              /*yield*/\n              , languagePromise];\n\n            case 5:\n              _q = _t.sent();\n              _t.label = 6;\n\n            case 6:\n              LanguageCode = _q;\n\n              if (!LanguageCode) {\n                return [2\n                /*return*/\n                , rej('language code is required on source for this selection')];\n              }\n\n              sentimentParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              sentimentPromise = this.detectSentiment(sentimentParams, comprehendClient);\n              _t.label = 7;\n\n            case 7:\n              if (!(doAll || interpretType === InterpretTextCategories.SYNTAX)) return [3\n              /*break*/\n              , 10];\n              _r = language;\n              if (_r) return [3\n              /*break*/\n              , 9];\n              return [4\n              /*yield*/\n              , languagePromise];\n\n            case 8:\n              _r = _t.sent();\n              _t.label = 9;\n\n            case 9:\n              LanguageCode = _r;\n\n              if (!LanguageCode) {\n                return [2\n                /*return*/\n                , rej('language code is required on source for this selection')];\n              }\n\n              syntaxParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              syntaxPromise = this.detectSyntax(syntaxParams, comprehendClient);\n              _t.label = 10;\n\n            case 10:\n              if (!(doAll || interpretType === InterpretTextCategories.KEY_PHRASES)) return [3\n              /*break*/\n              , 13];\n              _s = language;\n              if (_s) return [3\n              /*break*/\n              , 12];\n              return [4\n              /*yield*/\n              , languagePromise];\n\n            case 11:\n              _s = _t.sent();\n              _t.label = 12;\n\n            case 12:\n              LanguageCode = _s;\n\n              if (!LanguageCode) {\n                return [2\n                /*return*/\n                , rej('language code is required on source for this selection')];\n              }\n\n              keyPhrasesParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              keyPhrasesPromise = this.detectKeyPhrases(keyPhrasesParams, comprehendClient);\n              _t.label = 13;\n\n            case 13:\n              _t.trys.push([13, 15,, 16]);\n\n              return [4\n              /*yield*/\n              , Promise.all([languagePromise, entitiesPromise, sentimentPromise, syntaxPromise, keyPhrasesPromise])];\n\n            case 14:\n              results = _t.sent();\n              res({\n                textInterpretation: {\n                  keyPhrases: results[4] || [],\n                  language: results[0] || '',\n                  sentiment: results[2],\n                  syntax: results[3] || [],\n                  textEntities: results[1] || []\n                }\n              });\n              return [3\n              /*break*/\n              , 16];\n\n            case 15:\n              err_1 = _t.sent();\n              rej(err_1);\n              return [3\n              /*break*/\n              , 16];\n\n            case 16:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.detectKeyPhrases = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectKeyPhrasesCommand, data, _a, KeyPhrases, err_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n\n            detectKeyPhrasesCommand = new DetectKeyPhrasesCommand(params);\n            return [4\n            /*yield*/\n            , comprehend.send(detectKeyPhrasesCommand)];\n\n          case 1:\n            data = _b.sent();\n            _a = (data || {}).KeyPhrases, KeyPhrases = _a === void 0 ? [] : _a;\n            return [2\n            /*return*/\n            , KeyPhrases.map(function (_a) {\n              var text = _a.Text;\n              return {\n                text: text\n              };\n            })];\n\n          case 2:\n            err_2 = _b.sent();\n\n            if (err_2.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_2.message);\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.detectSyntax = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectSyntaxCommand, data, _a, SyntaxTokens, err_3;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n\n            detectSyntaxCommand = new DetectSyntaxCommand(params);\n            return [4\n            /*yield*/\n            , comprehend.send(detectSyntaxCommand)];\n\n          case 1:\n            data = _b.sent();\n            _a = (data || {}).SyntaxTokens, SyntaxTokens = _a === void 0 ? [] : _a;\n            return [2\n            /*return*/\n            , this.serializeSyntaxFromComprehend(SyntaxTokens)];\n\n          case 2:\n            err_3 = _b.sent();\n\n            if (err_3.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_3.message);\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.serializeSyntaxFromComprehend = function (tokens) {\n    var response = [];\n\n    if (tokens && Array.isArray(tokens)) {\n      response = tokens.map(function (_a) {\n        var _b = _a.Text,\n            text = _b === void 0 ? '' : _b,\n            _c = _a.PartOfSpeech,\n            _d = (_c === void 0 ? {} : _c).Tag,\n            syntax = _d === void 0 ? '' : _d;\n        return {\n          text: text,\n          syntax: syntax\n        };\n      });\n    }\n\n    return response;\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.detectSentiment = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectSentimentCommand, data, _a, _b, predominant, _c, _d, _e, positive, _f, negative, _g, neutral, _h, mixed, err_4;\n\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            _j.trys.push([0, 2,, 3]);\n\n            detectSentimentCommand = new DetectSentimentCommand(params);\n            return [4\n            /*yield*/\n            , comprehend.send(detectSentimentCommand)];\n\n          case 1:\n            data = _j.sent();\n            _a = data, _b = _a.Sentiment, predominant = _b === void 0 ? '' : _b, _c = _a.SentimentScore, _d = _c === void 0 ? {} : _c, _e = _d.Positive, positive = _e === void 0 ? 0 : _e, _f = _d.Negative, negative = _f === void 0 ? 0 : _f, _g = _d.Neutral, neutral = _g === void 0 ? 0 : _g, _h = _d.Mixed, mixed = _h === void 0 ? 0 : _h;\n            return [2\n            /*return*/\n            , {\n              predominant: predominant,\n              positive: positive,\n              negative: negative,\n              neutral: neutral,\n              mixed: mixed\n            }];\n\n          case 2:\n            err_4 = _j.sent();\n\n            if (err_4.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_4.message);\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.detectEntities = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectEntitiesCommand, data, _a, Entities, err_5;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n\n            detectEntitiesCommand = new DetectEntitiesCommand(params);\n            return [4\n            /*yield*/\n            , comprehend.send(detectEntitiesCommand)];\n\n          case 1:\n            data = _b.sent();\n            _a = (data || {}).Entities, Entities = _a === void 0 ? [] : _a;\n            return [2\n            /*return*/\n            , this.serializeEntitiesFromComprehend(Entities)];\n\n          case 2:\n            err_5 = _b.sent();\n\n            if (err_5.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_5.message);\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.serializeEntitiesFromComprehend = function (data) {\n    var response = [];\n\n    if (data && Array.isArray(data)) {\n      response = data.map(function (_a) {\n        var type = _a.Type,\n            text = _a.Text;\n        return {\n          type: type,\n          text: text\n        };\n      });\n    }\n\n    return response;\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.detectLanguage = function (params, comprehend) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectDominantLanguageCommand, data, _a, _b, LanguageCode, err_6;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 2,, 3]);\n\n            detectDominantLanguageCommand = new DetectDominantLanguageCommand(params);\n            return [4\n            /*yield*/\n            , comprehend.send(detectDominantLanguageCommand)];\n\n          case 1:\n            data = _c.sent();\n            _a = (data || {}).Languages, _b = __read(_a === void 0 ? [''] : _a, 1), LanguageCode = _b[0].LanguageCode;\n\n            if (!LanguageCode) {\n              Promise.reject('Language not detected');\n            }\n\n            return [2\n            /*return*/\n            , data.Languages[0].LanguageCode];\n\n          case 2:\n            err_6 = _c.sent();\n\n            if (err_6.code === 'AccessDeniedException') {\n              Promise.reject('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n            } else {\n              Promise.reject(err_6.message);\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return AmazonAIInterpretPredictionsProvider;\n}(AbstractInterpretPredictionsProvider);\n\nexport { AmazonAIInterpretPredictionsProvider };","map":{"version":3,"mappings":"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","names":["Credentials","getAmplifyUserAgent","AbstractInterpretPredictionsProvider","InterpretTextCategories","ComprehendClient","DetectSyntaxCommand","DetectEntitiesCommand","DetectDominantLanguageCommand","DetectKeyPhrasesCommand","DetectSentimentCommand","__extends","_super","AmazonAIInterpretPredictionsProvider","input","Promise","res","rej","get","credentials","_t","_a","_config","interpretText","_c","region","_d","_e","type","interpretTypeConfig","_f","text","_h","_j","_k","interpretType","_l","_m","source","_o","language","undefined","comprehendClient","customUserAgent","doAll","ALL","LANGUAGE","languageDetectionParams","Text","languagePromise","detectLanguage","ENTITIES","_p","LanguageCode","entitiesDetectionParams","entitiesPromise","detectEntities","SENTIMENT","_q","sentimentParams","sentimentPromise","detectSentiment","SYNTAX","_r","syntaxParams","syntaxPromise","detectSyntax","KEY_PHRASES","_s","keyPhrasesParams","keyPhrasesPromise","detectKeyPhrases","all","results","textInterpretation","keyPhrases","sentiment","syntax","textEntities","err_1","params","comprehend","detectKeyPhrasesCommand","send","data","_b","KeyPhrases","map","err_2","code","reject","message","detectSyntaxCommand","SyntaxTokens","serializeSyntaxFromComprehend","err_3","tokens","response","Array","isArray","detectSentimentCommand","predominant","positive","negative","_g","neutral","mixed","err_4","detectEntitiesCommand","Entities","serializeEntitiesFromComprehend","err_5","detectDominantLanguageCommand","Languages","err_6"],"sources":["/home/dalienst/node_modules/@aws-amplify/predictions/src/Providers/AmazonAIInterpretPredictionsProvider.ts"],"sourcesContent":["import { Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { AbstractInterpretPredictionsProvider } from '../types/Providers';\n\nimport {\n\tInterpretTextInput,\n\tInterpretTextOutput,\n\tInterpretTextCategories,\n\tTextEntities,\n\tTextSentiment,\n\tTextSyntax,\n\tKeyPhrases,\n} from '../types';\nimport {\n\tComprehendClient,\n\tDetectSyntaxCommand,\n\tDetectEntitiesCommand,\n\tDetectDominantLanguageCommand,\n\tDetectKeyPhrasesCommand,\n\tDetectSentimentCommand,\n} from '@aws-sdk/client-comprehend';\n\nexport class AmazonAIInterpretPredictionsProvider extends AbstractInterpretPredictionsProvider {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIInterpretPredictionsProvider';\n\t}\n\n\tinterpretText(input: InterpretTextInput): Promise<InterpretTextOutput> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return rej('No credentials');\n\t\t\tconst {\n\t\t\t\tinterpretText: {\n\t\t\t\t\tregion = '',\n\t\t\t\t\tdefaults: { type: interpretTypeConfig = '' } = {},\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\t\t\tconst {\n\t\t\t\ttext: {\n\t\t\t\t\tsource: { text = '' } = {},\n\t\t\t\t\ttype: interpretType = interpretTypeConfig,\n\t\t\t\t} = {},\n\t\t\t} = ({} = input);\n\n\t\t\tconst { text: { source: { language = undefined } = {} } = {} } = ({} =\n\t\t\t\tinput as any); // language is only required for specific interpret types\n\n\t\t\tconst comprehendClient = new ComprehendClient({\n\t\t\t\tcredentials,\n\t\t\t\tregion,\n\t\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\t});\n\n\t\t\tconst doAll = interpretType === InterpretTextCategories.ALL;\n\n\t\t\tlet languagePromise: Promise<string>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.LANGUAGE) {\n\t\t\t\tconst languageDetectionParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t};\n\t\t\t\tlanguagePromise = this.detectLanguage(\n\t\t\t\t\tlanguageDetectionParams,\n\t\t\t\t\tcomprehendClient\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet entitiesPromise: Promise<Array<TextEntities>>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.ENTITIES) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst entitiesDetectionParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tentitiesPromise = this.detectEntities(\n\t\t\t\t\tentitiesDetectionParams,\n\t\t\t\t\tcomprehendClient\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet sentimentPromise: Promise<TextSentiment>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.SENTIMENT) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst sentimentParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tsentimentPromise = this.detectSentiment(\n\t\t\t\t\tsentimentParams,\n\t\t\t\t\tcomprehendClient\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet syntaxPromise: Promise<Array<TextSyntax>>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.SYNTAX) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst syntaxParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tsyntaxPromise = this.detectSyntax(syntaxParams, comprehendClient);\n\t\t\t}\n\n\t\t\tlet keyPhrasesPromise: Promise<Array<KeyPhrases>>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.KEY_PHRASES) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst keyPhrasesParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tkeyPhrasesPromise = this.detectKeyPhrases(\n\t\t\t\t\tkeyPhrasesParams,\n\t\t\t\t\tcomprehendClient\n\t\t\t\t);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst results = await Promise.all([\n\t\t\t\t\tlanguagePromise,\n\t\t\t\t\tentitiesPromise,\n\t\t\t\t\tsentimentPromise,\n\t\t\t\t\tsyntaxPromise,\n\t\t\t\t\tkeyPhrasesPromise,\n\t\t\t\t]);\n\t\t\t\tres({\n\t\t\t\t\ttextInterpretation: {\n\t\t\t\t\t\tkeyPhrases: results[4] || [],\n\t\t\t\t\t\tlanguage: results[0] || '',\n\t\t\t\t\t\tsentiment: results[2],\n\t\t\t\t\t\tsyntax: <TextSyntax[]>results[3] || [],\n\t\t\t\t\t\ttextEntities: <TextEntities[]>results[1] || [],\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\trej(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async detectKeyPhrases(\n\t\tparams,\n\t\tcomprehend\n\t): Promise<Array<KeyPhrases>> {\n\t\ttry {\n\t\t\tconst detectKeyPhrasesCommand = new DetectKeyPhrasesCommand(params);\n\t\t\tconst data = await comprehend.send(detectKeyPhrasesCommand);\n\t\t\tconst { KeyPhrases = [] } = data || {};\n\t\t\treturn KeyPhrases.map(({ Text: text }) => {\n\t\t\t\treturn { text };\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async detectSyntax(params, comprehend): Promise<Array<TextSyntax>> {\n\t\ttry {\n\t\t\tconst detectSyntaxCommand = new DetectSyntaxCommand(params);\n\t\t\tconst data = await comprehend.send(detectSyntaxCommand);\n\t\t\tconst { SyntaxTokens = [] } = data || {};\n\t\t\treturn this.serializeSyntaxFromComprehend(SyntaxTokens);\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate serializeSyntaxFromComprehend(tokens): Array<TextSyntax> {\n\t\tlet response = [];\n\t\tif (tokens && Array.isArray(tokens)) {\n\t\t\tresponse = tokens.map(\n\t\t\t\t({ Text: text = '', PartOfSpeech: { Tag: syntax = '' } = {} }) => {\n\t\t\t\t\treturn { text, syntax };\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate async detectSentiment(params, comprehend): Promise<TextSentiment> {\n\t\ttry {\n\t\t\tconst detectSentimentCommand = new DetectSentimentCommand(params);\n\t\t\tconst data = await comprehend.send(detectSentimentCommand);\n\t\t\tconst {\n\t\t\t\tSentiment: predominant = '',\n\t\t\t\tSentimentScore: {\n\t\t\t\t\tPositive: positive = 0,\n\t\t\t\t\tNegative: negative = 0,\n\t\t\t\t\tNeutral: neutral = 0,\n\t\t\t\t\tMixed: mixed = 0,\n\t\t\t\t} = {},\n\t\t\t} = ({} = data);\n\t\t\treturn { predominant, positive, negative, neutral, mixed };\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async detectEntities(\n\t\tparams,\n\t\tcomprehend\n\t): Promise<Array<TextEntities>> {\n\t\ttry {\n\t\t\tconst detectEntitiesCommand = new DetectEntitiesCommand(params);\n\t\t\tconst data = await comprehend.send(detectEntitiesCommand);\n\t\t\tconst { Entities = [] } = data || {};\n\t\t\treturn this.serializeEntitiesFromComprehend(Entities);\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate serializeEntitiesFromComprehend(data): Array<TextEntities> {\n\t\tlet response = [];\n\t\tif (data && Array.isArray(data)) {\n\t\t\tresponse = data.map(({ Type: type, Text: text }) => {\n\t\t\t\treturn { type, text };\n\t\t\t});\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate async detectLanguage(params, comprehend): Promise<string> {\n\t\ttry {\n\t\t\tconst detectDominantLanguageCommand = new DetectDominantLanguageCommand(\n\t\t\t\tparams\n\t\t\t);\n\t\t\tconst data = await comprehend.send(detectDominantLanguageCommand);\n\t\t\tconst { Languages: [{ LanguageCode }] = [''] } = ({} = data || {});\n\t\t\tif (!LanguageCode) {\n\t\t\t\tPromise.reject('Language not detected');\n\t\t\t}\n\t\t\treturn data.Languages[0].LanguageCode;\n\t\t} catch (err) {\n\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\tPromise.reject(\n\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tPromise.reject(err.message);\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
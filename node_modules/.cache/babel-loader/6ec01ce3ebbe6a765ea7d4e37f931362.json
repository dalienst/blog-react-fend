{"ast":null,"code":"import $6vYhU$react from \"react\";\nimport { createContextScope as $6vYhU$createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs as $6vYhU$useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { Slot as $6vYhU$Slot } from \"@radix-ui/react-slot\"; // We have resorted to returning slots directly rather than exposing primitives that can then\n// be slotted like `<CollectionItem as={Slot}>…</CollectionItem>`.\n// This is because we encountered issues with generic types that cannot be statically analysed\n// due to creating them dynamically via createCollection.\n\nfunction $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {\n  /* -----------------------------------------------------------------------------------------------\n  * CollectionProvider\n  * ---------------------------------------------------------------------------------------------*/\n  const PROVIDER_NAME = name + 'CollectionProvider';\n  const [createCollectionContext, createCollectionScope] = $6vYhU$createContextScope(PROVIDER_NAME);\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {\n    collectionRef: {\n      current: null\n    },\n    itemMap: new Map()\n  });\n\n  const CollectionProvider = props => {\n    const {\n      scope: scope,\n      children: children\n    } = props;\n    const ref = $6vYhU$react.useRef(null);\n    const itemMap = $6vYhU$react.useRef(new Map()).current;\n    return /*#__PURE__*/$6vYhU$react.createElement(CollectionProviderImpl, {\n      scope: scope,\n      itemMap: itemMap,\n      collectionRef: ref\n    }, children);\n  };\n  /*#__PURE__*/\n\n\n  Object.assign(CollectionProvider, {\n    displayName: PROVIDER_NAME\n  });\n  /* -----------------------------------------------------------------------------------------------\n  * CollectionSlot\n  * ---------------------------------------------------------------------------------------------*/\n\n  const COLLECTION_SLOT_NAME = name + 'CollectionSlot';\n  const CollectionSlot = /*#__PURE__*/$6vYhU$react.forwardRef((props, forwardedRef) => {\n    const {\n      scope: scope,\n      children: children\n    } = props;\n    const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n    const composedRefs = $6vYhU$useComposedRefs(forwardedRef, context.collectionRef);\n    return /*#__PURE__*/$6vYhU$react.createElement($6vYhU$Slot, {\n      ref: composedRefs\n    }, children);\n  });\n  /*#__PURE__*/\n\n  Object.assign(CollectionSlot, {\n    displayName: COLLECTION_SLOT_NAME\n  });\n  /* -----------------------------------------------------------------------------------------------\n  * CollectionItem\n  * ---------------------------------------------------------------------------------------------*/\n\n  const ITEM_SLOT_NAME = name + 'CollectionItemSlot';\n  const ITEM_DATA_ATTR = 'data-radix-collection-item';\n  const CollectionItemSlot = /*#__PURE__*/$6vYhU$react.forwardRef((props, forwardedRef) => {\n    const {\n      scope: scope,\n      children: children,\n      ...itemData\n    } = props;\n    const ref = $6vYhU$react.useRef(null);\n    const composedRefs = $6vYhU$useComposedRefs(forwardedRef, ref);\n    const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n    $6vYhU$react.useEffect(() => {\n      context.itemMap.set(ref, {\n        ref: ref,\n        ...itemData\n      });\n      return () => void context.itemMap.delete(ref);\n    });\n    return /*#__PURE__*/$6vYhU$react.createElement($6vYhU$Slot, {\n      [ITEM_DATA_ATTR]: '',\n      ref: composedRefs\n    }, children);\n  });\n  /*#__PURE__*/\n\n  Object.assign(CollectionItemSlot, {\n    displayName: ITEM_SLOT_NAME\n  });\n  /* -----------------------------------------------------------------------------------------------\n  * useCollection\n  * ---------------------------------------------------------------------------------------------*/\n\n  function useCollection(scope) {\n    const context = useCollectionContext(name + 'CollectionConsumer', scope);\n    const getItems = $6vYhU$react.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort((a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current));\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n    return getItems;\n  }\n\n  return [{\n    Provider: CollectionProvider,\n    Slot: CollectionSlot,\n    ItemSlot: CollectionItemSlot\n  }, useCollection, createCollectionScope];\n}\n\nexport { $e02a7d9cb1dc128c$export$c74125a8e3af6bb2 as createCollection };","map":{"version":3,"mappings":"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","names":["createCollection","name","PROVIDER_NAME","createCollectionContext","createCollectionScope","createContextScope","CollectionProviderImpl","useCollectionContext","collectionRef","current","itemMap","Map","CollectionProvider","props","scope","children","ref","React","useRef","$6vYhU$react","Object","displayName","COLLECTION_SLOT_NAME","CollectionSlot","forwardRef","forwardedRef","context","composedRefs","useComposedRefs","$6vYhU$Slot","ITEM_SLOT_NAME","ITEM_DATA_ATTR","CollectionItemSlot","itemData","useEffect","set","delete","useCollection","getItems","useCallback","collectionNode","orderedNodes","Array","from","querySelectorAll","items","values","orderedItems","sort","a","b","indexOf","Provider","Slot","ItemSlot"],"sources":["/home/dalienst/node_modules/@radix-ui/react-collection/dist/packages/react/collection/src/Collection.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Slot } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\ntype SlotProps = Radix.ComponentPropsWithoutRef<typeof Slot>;\ntype CollectionElement = HTMLElement;\ninterface CollectionProps extends SlotProps {\n  scope: any;\n}\n\n// We have resorted to returning slots directly rather than exposing primitives that can then\n// be slotted like `<CollectionItem as={Slot}>…</CollectionItem>`.\n// This is because we encountered issues with generic types that cannot be statically analysed\n// due to creating them dynamically via createCollection.\n\nfunction createCollection<ItemElement extends HTMLElement, ItemData = {}>(name: string) {\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionProvider\n   * ---------------------------------------------------------------------------------------------*/\n\n  const PROVIDER_NAME = name + 'CollectionProvider';\n  const [createCollectionContext, createCollectionScope] = createContextScope(PROVIDER_NAME);\n\n  type ContextValue = {\n    collectionRef: React.RefObject<CollectionElement>;\n    itemMap: Map<React.RefObject<ItemElement>, { ref: React.RefObject<ItemElement> } & ItemData>;\n  };\n\n  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext<ContextValue>(\n    PROVIDER_NAME,\n    { collectionRef: { current: null }, itemMap: new Map() }\n  );\n\n  const CollectionProvider: React.FC<{ children?: React.ReactNode; scope: any }> = (props) => {\n    const { scope, children } = props;\n    const ref = React.useRef<CollectionElement>(null);\n    const itemMap = React.useRef<ContextValue['itemMap']>(new Map()).current;\n    return (\n      <CollectionProviderImpl scope={scope} itemMap={itemMap} collectionRef={ref}>\n        {children}\n      </CollectionProviderImpl>\n    );\n  };\n\n  CollectionProvider.displayName = PROVIDER_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionSlot\n   * ---------------------------------------------------------------------------------------------*/\n\n  const COLLECTION_SLOT_NAME = name + 'CollectionSlot';\n\n  const CollectionSlot = React.forwardRef<CollectionElement, CollectionProps>(\n    (props, forwardedRef) => {\n      const { scope, children } = props;\n      const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n      const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);\n      return <Slot ref={composedRefs}>{children}</Slot>;\n    }\n  );\n\n  CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionItem\n   * ---------------------------------------------------------------------------------------------*/\n\n  const ITEM_SLOT_NAME = name + 'CollectionItemSlot';\n  const ITEM_DATA_ATTR = 'data-radix-collection-item';\n\n  type CollectionItemSlotProps = ItemData & {\n    children: React.ReactNode;\n    scope: any;\n  };\n\n  const CollectionItemSlot = React.forwardRef<ItemElement, CollectionItemSlotProps>(\n    (props, forwardedRef) => {\n      const { scope, children, ...itemData } = props;\n      const ref = React.useRef<ItemElement>(null);\n      const composedRefs = useComposedRefs(forwardedRef, ref);\n      const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n\n      React.useEffect(() => {\n        context.itemMap.set(ref, { ref, ...(itemData as unknown as ItemData) });\n        return () => void context.itemMap.delete(ref);\n      });\n\n      return (\n        <Slot {...{ [ITEM_DATA_ATTR]: '' }} ref={composedRefs}>\n          {children}\n        </Slot>\n      );\n    }\n  );\n\n  CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * useCollection\n   * ---------------------------------------------------------------------------------------------*/\n\n  function useCollection(scope: any) {\n    const context = useCollectionContext(name + 'CollectionConsumer', scope);\n\n    const getItems = React.useCallback(() => {\n      const collectionNode = context.collectionRef.current;\n      if (!collectionNode) return [];\n      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n      const items = Array.from(context.itemMap.values());\n      const orderedItems = items.sort(\n        (a, b) => orderedNodes.indexOf(a.ref.current!) - orderedNodes.indexOf(b.ref.current!)\n      );\n      return orderedItems;\n    }, [context.collectionRef, context.itemMap]);\n\n    return getItems;\n  }\n\n  return [\n    { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },\n    useCollection,\n    createCollectionScope,\n  ] as const;\n}\n\nexport { createCollection };\nexport type { CollectionProps };\n"]},"metadata":{},"sourceType":"module"}
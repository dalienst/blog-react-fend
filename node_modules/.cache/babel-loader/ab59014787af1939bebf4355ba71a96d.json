{"ast":null,"code":"import { useState as $9gyGR$useState } from \"react\";\nimport { useLayoutEffect as $9gyGR$useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\n\nfunction $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {\n  const [size, setSize] = $9gyGR$useState(undefined);\n  $9gyGR$useLayoutEffect(() => {\n    if (element) {\n      // provide size as early as possible\n      setSize({\n        width: element.offsetWidth,\n        height: element.offsetHeight\n      });\n      const resizeObserver = new ResizeObserver(entries => {\n        if (!Array.isArray(entries)) return; // Since we only observe the one element, we don't need to loop over the\n        // array\n\n        if (!entries.length) return;\n        const entry = entries[0];\n        let width;\n        let height;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize']; // iron out differences between browsers\n\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate it ourselves to get the correct border box.\n          width = element.offsetWidth;\n          height = element.offsetHeight;\n        }\n\n        setSize({\n          width: width,\n          height: height\n        });\n      });\n      resizeObserver.observe(element, {\n        box: 'border-box'\n      });\n      return () => resizeObserver.unobserve(element);\n    } else // We only want to reset to `undefined` when the element becomes `null`,\n      // not if it changes to another element.\n      setSize(undefined);\n  }, [element]);\n  return size;\n}\n\nexport { $db6c3485150b8e66$export$1ab7ae714698c4b8 as useSize };","map":{"version":3,"mappings":";;;AAKA,SAASA,yCAAT,CAAiBC,OAAjB,EAA8C;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,gBAA8DC,SAA9D,CAAxB;AAEAC,wBAAe,CAAC,MAAM;AACpB,QAAIL,OAAJ,EAAa;AACX;AACAE,aAAO,CAAC;AAAEI,aAAK,EAAEN,OAAO,CAACO,WAAjB;AAA8BC,cAAM,EAAER,OAAO,CAACS;AAA9C,OAAD,CAAPP;AAEA,YAAMQ,cAAc,GAAG,IAAIC,cAAJ,CAAoBC,WAAY;AACrD,YAAI,CAACC,KAAK,CAACC,OAAND,CAAcD,OAAdC,CAAL,EACE,OAFmD,CAKrD;AACA;;AACA,YAAI,CAACD,OAAO,CAACG,MAAb,EACE;AAGF,cAAMC,KAAK,GAAGJ,OAAO,CAAC,CAAD,CAArB;AACA,YAAIN,KAAJ;AACA,YAAIE,MAAJ;;AAEA,YAAI,mBAAmBQ,KAAvB,EAA8B;AAC5B,gBAAMC,eAAe,GAAGD,KAAK,CAAC,eAAD,CAA7B,CAD4B,CAE5B;;AACA,gBAAME,UAAU,GAAGL,KAAK,CAACC,OAAND,CAAcI,eAAdJ,IAAiCI,eAAe,CAAC,CAAD,CAAhDJ,GAAsDI,eAAzE;AACAX,eAAK,GAAGY,UAAU,CAAC,YAAD,CAAlBZ;AACAE,gBAAM,GAAGU,UAAU,CAAC,WAAD,CAAnBV;AALF,eAMO;AACL;AACA;AACAF,eAAK,GAAGN,OAAO,CAACO,WAAhBD;AACAE,gBAAM,GAAGR,OAAO,CAACS,YAAjBD;AACD;;AAEDN,eAAO,CAAC;AAzChBI,iBAyCkBA,KAAF;AAzChBE,kBAyCyBA;AAAT,SAAD,CAAPN;AA5BqB,QAAvB;AA+BAQ,oBAAc,CAACS,OAAfT,CAAuBV,OAAvBU,EAAgC;AAAEU,WAAG,EAAE;AAAP,OAAhCV;AAEA,aAAO,MAAMA,cAAc,CAACW,SAAfX,CAAyBV,OAAzBU,CAAb;AArCF,WAuCE;AACA;AACAR,aAAO,CAACE,SAAD,CAAPF;AA1CW,KA4CZ,CAACF,OAAD,CA5CY,CAAfK;AA8CA,SAAOJ,IAAP;AACD","names":["useSize","element","size","setSize","React","undefined","useLayoutEffect","width","offsetWidth","height","offsetHeight","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","borderSizeEntry","borderSize","observe","box","unobserve"],"sources":["/home/dalienst/node_modules/@radix-ui/react-use-size/dist/packages/react/use-size/src/useSize.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\nfunction useSize(element: HTMLElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  useLayoutEffect(() => {\n    if (element) {\n      // provide size as early as possible\n      setSize({ width: element.offsetWidth, height: element.offsetHeight });\n\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate it ourselves to get the correct border box.\n          width = element.offsetWidth;\n          height = element.offsetHeight;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => resizeObserver.unobserve(element);\n    } else {\n      // We only want to reset to `undefined` when the element becomes `null`,\n      // not if it changes to another element.\n      setSize(undefined);\n    }\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"]},"metadata":{},"sourceType":"module"}
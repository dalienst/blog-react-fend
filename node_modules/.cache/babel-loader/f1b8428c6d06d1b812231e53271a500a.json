{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { Comprehend } from \"../Comprehend\";\nimport { ComprehendClient } from \"../ComprehendClient\";\nimport { ListTopicsDetectionJobsCommand } from \"../commands/ListTopicsDetectionJobsCommand\";\n/**\n * @private\n */\n\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.send.apply(client, __spread([new ListTopicsDetectionJobsCommand(input)], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n/**\n * @private\n */\n\n\nvar makePagedRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.listTopicsDetectionJobs.apply(client, __spread([input], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n\nexport function paginateListTopicsDetectionJobs(config, input) {\n  var additionalArguments = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n\n  return __asyncGenerator(this, arguments, function paginateListTopicsDetectionJobs_1() {\n    var token, hasNext, page;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n\n        case 1:\n          if (!hasNext) return [3\n          /*break*/\n          , 9];\n          input.NextToken = token;\n          input[\"MaxResults\"] = config.pageSize;\n          if (!(config.client instanceof Comprehend)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 2:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 3:\n          if (!(config.client instanceof ComprehendClient)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 4:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          throw new Error(\"Invalid client, expected Comprehend | ComprehendClient\");\n\n        case 6:\n          return [4\n          /*yield*/\n          , __await(page)];\n\n        case 7:\n          return [4\n          /*yield*/\n          , _a.sent()];\n\n        case 8:\n          _a.sent();\n\n          token = page.NextToken;\n          hasNext = !!token;\n          return [3\n          /*break*/\n          , 1];\n\n        case 9:\n          return [4\n          /*yield*/\n          , __await(undefined)];\n\n        case 10:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SACEC,8BADF,QAIO,4CAJP;AAQA;;;;AAGA,IAAMC,sBAAsB,GAAG,UAC7BC,MAD6B,EAE7BC,KAF6B,EAEa;AAC1C;;OAAA,yCAAY;AAAZC;;;;;;;AAGO;AAAA;AAAA,YAAMF,MAAM,CAACG,IAAP,CAAWC,KAAX,SAAMC,UAAM,IAAIP,8BAAJ,CAAmCG,KAAnC,CAAN,GAAoDC,IAApD,CAAN,CAAN;;;AADP;AACA;AAAA;AAAA,YAAOI,SAAP;;;;AACD,CAPD;AAQA;;;;;AAGA,IAAMC,gBAAgB,GAAG,UACvBP,MADuB,EAEvBC,KAFuB,EAEmB;AAC1C;;OAAA,yCAAY;AAAZC;;;;;;;AAGO;AAAA;AAAA,YAAMF,MAAM,CAACQ,uBAAP,CAA8BJ,KAA9B,SAAMC,UAAyBJ,KAAzB,GAAmCC,IAAnC,CAAN,CAAN;;;AADP;AACA;AAAA;AAAA,YAAOI,SAAP;;;;AACD,CAPD;;AAQA,OAAM,SAAiBG,+BAAjB,CACJC,MADI,EAEJT,KAFI,EAEsC;AAC1C;;OAAA,yCAA2B;AAA3BU;;;;;;;;AAGIC,eAAK,GAAuCF,MAAM,CAACG,aAAP,IAAwBC,SAApE;AACAC,iBAAO,GAAG,IAAV;;;;eAEGA,SAAO;AAAA;AAAA;AACZd,eAAK,CAACe,SAAN,GAAkBJ,KAAlB;AACAX,eAAK,CAAC,YAAD,CAAL,GAAsBS,MAAM,CAACO,QAA7B;gBACIP,MAAM,CAACV,MAAP,YAAyBJ,aAAzB;AAAA;AAAA;AACK;AAAA;AAAA,oBAAMW,gBAAgB,MAAhB,CAAgB,MAAhB,EAAgBF,UAACK,MAAM,CAACV,MAAR,EAAgBC,KAAhB,GAA0BU,mBAA1B,CAAhB,CAAN;;;AAAPO,cAAI,GAAGZ,SAAP;;;;;;gBACSI,MAAM,CAACV,MAAP,YAAyBH,mBAAzB;AAAA;AAAA;AACF;AAAA;AAAA,oBAAME,sBAAsB,MAAtB,CAAsB,MAAtB,EAAsBM,UAACK,MAAM,CAACV,MAAR,EAAgBC,KAAhB,GAA0BU,mBAA1B,CAAtB,CAAN;;;AAAPO,cAAI,GAAGZ,SAAP;;;;;;AAEA,gBAAM,IAAIa,KAAJ,CAAU,wDAAV,CAAN;;;;;oBAEID;;;AAAN;AAAA;AAAA;;;AAAAZ;;AACAM,eAAK,GAAGM,IAAI,CAACF,SAAb;AACAD,iBAAO,GAAG,CAAC,CAACH,KAAZ;;;;;;;;oBAGKE;;;AADP;AACA;AAAA;AAAA;;;;AACD","names":["Comprehend","ComprehendClient","ListTopicsDetectionJobsCommand","makePagedClientRequest","client","input","args","send","apply","__spread","_a","makePagedRequest","listTopicsDetectionJobs","paginateListTopicsDetectionJobs","config","additionalArguments","token","startingToken","undefined","hasNext","NextToken","pageSize","page","Error"],"sources":["/home/dalienst/node_modules/@aws-sdk/client-comprehend/pagination/ListTopicsDetectionJobsPaginator.ts"],"sourcesContent":["import { Comprehend } from \"../Comprehend\";\nimport { ComprehendClient } from \"../ComprehendClient\";\nimport {\n  ListTopicsDetectionJobsCommand,\n  ListTopicsDetectionJobsCommandInput,\n  ListTopicsDetectionJobsCommandOutput,\n} from \"../commands/ListTopicsDetectionJobsCommand\";\nimport { ComprehendPaginationConfiguration } from \"./Interfaces\";\nimport { Paginator } from \"@aws-sdk/types\";\n\n/**\n * @private\n */\nconst makePagedClientRequest = async (\n  client: ComprehendClient,\n  input: ListTopicsDetectionJobsCommandInput,\n  ...args: any\n): Promise<ListTopicsDetectionJobsCommandOutput> => {\n  // @ts-ignore\n  return await client.send(new ListTopicsDetectionJobsCommand(input), ...args);\n};\n/**\n * @private\n */\nconst makePagedRequest = async (\n  client: Comprehend,\n  input: ListTopicsDetectionJobsCommandInput,\n  ...args: any\n): Promise<ListTopicsDetectionJobsCommandOutput> => {\n  // @ts-ignore\n  return await client.listTopicsDetectionJobs(input, ...args);\n};\nexport async function* paginateListTopicsDetectionJobs(\n  config: ComprehendPaginationConfiguration,\n  input: ListTopicsDetectionJobsCommandInput,\n  ...additionalArguments: any\n): Paginator<ListTopicsDetectionJobsCommandOutput> {\n  // ToDo: replace with actual type instead of typeof input.NextToken\n  let token: typeof input.NextToken | undefined = config.startingToken || undefined;\n  let hasNext = true;\n  let page: ListTopicsDetectionJobsCommandOutput;\n  while (hasNext) {\n    input.NextToken = token;\n    input[\"MaxResults\"] = config.pageSize;\n    if (config.client instanceof Comprehend) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof ComprehendClient) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected Comprehend | ComprehendClient\");\n    }\n    yield page;\n    token = page.NextToken;\n    hasNext = !!token;\n  }\n  // @ts-ignore\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import $3DjNB$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport $3DjNB$react from \"react\";\nimport { createContextScope as $3DjNB$createContextScope } from \"@radix-ui/react-context\";\nimport { createCollection as $3DjNB$createCollection } from \"@radix-ui/react-collection\";\nimport { useComposedRefs as $3DjNB$useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { composeEventHandlers as $3DjNB$composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useControllableState as $3DjNB$useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { Primitive as $3DjNB$Primitive } from \"@radix-ui/react-primitive\";\nimport { createCollapsibleScope as $3DjNB$createCollapsibleScope, Root as $3DjNB$Root, Trigger as $3DjNB$Trigger, Content as $3DjNB$Content } from \"@radix-ui/react-collapsible\";\nimport { useId as $3DjNB$useId } from \"@radix-ui/react-id\";\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst $1bf158f521e1b1b4$var$ACCORDION_NAME = 'Accordion';\nconst $1bf158f521e1b1b4$var$ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp'];\nconst [$1bf158f521e1b1b4$var$Collection, $1bf158f521e1b1b4$var$useCollection, $1bf158f521e1b1b4$var$createCollectionScope] = $3DjNB$createCollection($1bf158f521e1b1b4$var$ACCORDION_NAME);\nconst [$1bf158f521e1b1b4$var$createAccordionContext, $1bf158f521e1b1b4$export$9748edc328a73be1] = $3DjNB$createContextScope($1bf158f521e1b1b4$var$ACCORDION_NAME, [$1bf158f521e1b1b4$var$createCollectionScope, $3DjNB$createCollapsibleScope]);\nconst $1bf158f521e1b1b4$var$useCollapsibleScope = $3DjNB$createCollapsibleScope();\nconst $1bf158f521e1b1b4$export$a766cd26d0d69044 = /*#__PURE__*/$3DjNB$react.forwardRef((props, forwardedRef) => {\n  const {\n    type: type,\n    ...accordionProps\n  } = props;\n  const singleProps = accordionProps;\n  const multipleProps = accordionProps;\n  return /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$Collection.Provider, {\n    scope: props.__scopeAccordion\n  }, type === 'multiple' ? /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionImplMultiple, $3DjNB$babelruntimehelpersesmextends({}, multipleProps, {\n    ref: forwardedRef\n  })) : /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionImplSingle, $3DjNB$babelruntimehelpersesmextends({}, singleProps, {\n    ref: forwardedRef\n  })));\n});\n/*#__PURE__*/\n\nObject.assign($1bf158f521e1b1b4$export$a766cd26d0d69044, {\n  displayName: $1bf158f521e1b1b4$var$ACCORDION_NAME\n});\n$1bf158f521e1b1b4$export$a766cd26d0d69044.propTypes = {\n  type(props) {\n    const value = props.value || props.defaultValue;\n    if (props.type && !['single', 'multiple'].includes(props.type)) return new Error('Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.');\n    if (props.type === 'multiple' && typeof value === 'string') return new Error('Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.');\n    if (props.type === 'single' && Array.isArray(value)) return new Error('Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.');\n    return null;\n  }\n\n};\n/* -----------------------------------------------------------------------------------------------*/\n\nconst [$1bf158f521e1b1b4$var$AccordionValueProvider, $1bf158f521e1b1b4$var$useAccordionValueContext] = $1bf158f521e1b1b4$var$createAccordionContext($1bf158f521e1b1b4$var$ACCORDION_NAME);\nconst [$1bf158f521e1b1b4$var$AccordionCollapsibleProvider, $1bf158f521e1b1b4$var$useAccordionCollapsibleContext] = $1bf158f521e1b1b4$var$createAccordionContext($1bf158f521e1b1b4$var$ACCORDION_NAME, {\n  collapsible: false\n});\nconst $1bf158f521e1b1b4$var$AccordionImplSingle = /*#__PURE__*/$3DjNB$react.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue: defaultValue,\n    onValueChange = () => {},\n    collapsible = false,\n    ...accordionSingleProps\n  } = props;\n  const [value, setValue] = $3DjNB$useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  return /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionValueProvider, {\n    scope: props.__scopeAccordion,\n    value: value ? [value] : [],\n    onItemOpen: setValue,\n    onItemClose: $3DjNB$react.useCallback(() => collapsible && setValue(''), [collapsible, setValue])\n  }, /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionCollapsibleProvider, {\n    scope: props.__scopeAccordion,\n    collapsible: collapsible\n  }, /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionImpl, $3DjNB$babelruntimehelpersesmextends({}, accordionSingleProps, {\n    ref: forwardedRef\n  }))));\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst $1bf158f521e1b1b4$var$AccordionImplMultiple = /*#__PURE__*/$3DjNB$react.forwardRef((props, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue: defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n  const [value1 = [], setValue] = $3DjNB$useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  const handleItemOpen = $3DjNB$react.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [...prevValue, itemValue];\n  }), [setValue]);\n  const handleItemClose = $3DjNB$react.useCallback(itemValue => setValue(function () {\n    let prevValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return prevValue.filter(value => value !== itemValue);\n  }), [setValue]);\n  return /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionValueProvider, {\n    scope: props.__scopeAccordion,\n    value: value1,\n    onItemOpen: handleItemOpen,\n    onItemClose: handleItemClose\n  }, /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionCollapsibleProvider, {\n    scope: props.__scopeAccordion,\n    collapsible: true\n  }, /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionImpl, $3DjNB$babelruntimehelpersesmextends({}, accordionMultipleProps, {\n    ref: forwardedRef\n  }))));\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst [$1bf158f521e1b1b4$var$AccordionImplProvider, $1bf158f521e1b1b4$var$useAccordionContext] = $1bf158f521e1b1b4$var$createAccordionContext($1bf158f521e1b1b4$var$ACCORDION_NAME);\nconst $1bf158f521e1b1b4$var$AccordionImpl = /*#__PURE__*/$3DjNB$react.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion: __scopeAccordion,\n    disabled: disabled,\n    ...accordionProps\n  } = props;\n  const accordionRef = $3DjNB$react.useRef(null);\n  const composedRefs = $3DjNB$useComposedRefs(accordionRef, forwardedRef);\n  const getItems = $1bf158f521e1b1b4$var$useCollection(__scopeAccordion);\n  const handleKeyDown = $3DjNB$composeEventHandlers(props.onKeyDown, event => {\n    var _triggerCollection$cl;\n\n    if (!$1bf158f521e1b1b4$var$ACCORDION_KEYS.includes(event.key)) return;\n    const target = event.target;\n    const triggerCollection = getItems().filter(item => {\n      var _item$ref$current;\n\n      return !((_item$ref$current = item.ref.current) !== null && _item$ref$current !== void 0 && _item$ref$current.disabled);\n    });\n    const triggerIndex = triggerCollection.findIndex(item => item.ref.current === target);\n    const triggerCount = triggerCollection.length;\n    if (triggerIndex === -1) return; // Prevents page scroll while user is navigating\n\n    event.preventDefault();\n    let nextIndex = triggerIndex;\n\n    switch (event.key) {\n      case 'Home':\n        nextIndex = 0;\n        break;\n\n      case 'End':\n        nextIndex = triggerCount - 1;\n        break;\n\n      case 'ArrowDown':\n        nextIndex = triggerIndex + 1;\n        break;\n\n      case 'ArrowUp':\n        nextIndex = triggerIndex - 1;\n        if (nextIndex < 0) nextIndex = triggerCount - 1;\n        break;\n    }\n\n    const clampedIndex = nextIndex % triggerCount;\n    (_triggerCollection$cl = triggerCollection[clampedIndex].ref.current) === null || _triggerCollection$cl === void 0 || _triggerCollection$cl.focus();\n  });\n  return /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionImplProvider, {\n    scope: __scopeAccordion,\n    disabled: disabled\n  }, /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$Collection.Slot, {\n    scope: __scopeAccordion\n  }, /*#__PURE__*/$3DjNB$react.createElement($3DjNB$Primitive.div, $3DjNB$babelruntimehelpersesmextends({}, accordionProps, {\n    ref: composedRefs,\n    onKeyDown: disabled ? undefined : handleKeyDown\n  }))));\n});\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst $1bf158f521e1b1b4$var$ITEM_NAME = 'AccordionItem';\nconst [$1bf158f521e1b1b4$var$AccordionItemProvider, $1bf158f521e1b1b4$var$useAccordionItemContext] = $1bf158f521e1b1b4$var$createAccordionContext($1bf158f521e1b1b4$var$ITEM_NAME);\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\n\nconst $1bf158f521e1b1b4$export$d99097c13d4dac9f = /*#__PURE__*/$3DjNB$react.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion: __scopeAccordion,\n    value: value,\n    ...accordionItemProps\n  } = props;\n  const accordionContext = $1bf158f521e1b1b4$var$useAccordionContext($1bf158f521e1b1b4$var$ITEM_NAME, __scopeAccordion);\n  const valueContext = $1bf158f521e1b1b4$var$useAccordionValueContext($1bf158f521e1b1b4$var$ITEM_NAME, __scopeAccordion);\n  const collapsibleScope = $1bf158f521e1b1b4$var$useCollapsibleScope(__scopeAccordion);\n  const triggerId = $3DjNB$useId();\n  const open1 = value && valueContext.value.includes(value) || false;\n  const disabled = accordionContext.disabled || props.disabled;\n  return /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$AccordionItemProvider, {\n    scope: __scopeAccordion,\n    open: open1,\n    disabled: disabled,\n    triggerId: triggerId\n  }, /*#__PURE__*/$3DjNB$react.createElement($3DjNB$Root, $3DjNB$babelruntimehelpersesmextends({\n    \"data-state\": open1 ? 'open' : 'closed'\n  }, collapsibleScope, accordionItemProps, {\n    ref: forwardedRef,\n    disabled: disabled,\n    open: open1,\n    onOpenChange: open => {\n      if (open) valueContext.onItemOpen(value);else valueContext.onItemClose(value);\n    }\n  })));\n});\n/*#__PURE__*/\n\nObject.assign($1bf158f521e1b1b4$export$d99097c13d4dac9f, {\n  displayName: $1bf158f521e1b1b4$var$ITEM_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst $1bf158f521e1b1b4$var$HEADER_NAME = 'AccordionHeader';\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\n\nconst $1bf158f521e1b1b4$export$5e3e5deaaf81ee41 = /*#__PURE__*/$3DjNB$react.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion: __scopeAccordion,\n    ...headerProps\n  } = props;\n  const itemContext = $1bf158f521e1b1b4$var$useAccordionItemContext($1bf158f521e1b1b4$var$HEADER_NAME, __scopeAccordion);\n  return /*#__PURE__*/$3DjNB$react.createElement($3DjNB$Primitive.h3, $3DjNB$babelruntimehelpersesmextends({\n    \"data-state\": $1bf158f521e1b1b4$var$getState(itemContext.open),\n    \"data-disabled\": itemContext.disabled ? '' : undefined\n  }, headerProps, {\n    ref: forwardedRef\n  }));\n});\n/*#__PURE__*/\n\nObject.assign($1bf158f521e1b1b4$export$5e3e5deaaf81ee41, {\n  displayName: $1bf158f521e1b1b4$var$HEADER_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst $1bf158f521e1b1b4$var$TRIGGER_NAME = 'AccordionTrigger';\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\n\nconst $1bf158f521e1b1b4$export$94e939b1f85bdd73 = /*#__PURE__*/$3DjNB$react.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion: __scopeAccordion,\n    ...triggerProps\n  } = props;\n  const itemContext = $1bf158f521e1b1b4$var$useAccordionItemContext($1bf158f521e1b1b4$var$TRIGGER_NAME, __scopeAccordion);\n  const collapsibleContext = $1bf158f521e1b1b4$var$useAccordionCollapsibleContext($1bf158f521e1b1b4$var$TRIGGER_NAME, __scopeAccordion);\n  const collapsibleScope = $1bf158f521e1b1b4$var$useCollapsibleScope(__scopeAccordion);\n  return /*#__PURE__*/$3DjNB$react.createElement($1bf158f521e1b1b4$var$Collection.ItemSlot, {\n    scope: __scopeAccordion\n  }, /*#__PURE__*/$3DjNB$react.createElement($3DjNB$Trigger, $3DjNB$babelruntimehelpersesmextends({\n    \"aria-disabled\": itemContext.open && !collapsibleContext.collapsible || undefined,\n    id: itemContext.triggerId\n  }, collapsibleScope, triggerProps, {\n    ref: forwardedRef\n  })));\n});\n/*#__PURE__*/\n\nObject.assign($1bf158f521e1b1b4$export$94e939b1f85bdd73, {\n  displayName: $1bf158f521e1b1b4$var$TRIGGER_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst $1bf158f521e1b1b4$var$CONTENT_NAME = 'AccordionContent';\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\n\nconst $1bf158f521e1b1b4$export$985b9a77379b54a0 = /*#__PURE__*/$3DjNB$react.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAccordion: __scopeAccordion,\n    ...contentProps\n  } = props;\n  const itemContext = $1bf158f521e1b1b4$var$useAccordionItemContext($1bf158f521e1b1b4$var$CONTENT_NAME, __scopeAccordion);\n  const collapsibleScope = $1bf158f521e1b1b4$var$useCollapsibleScope(__scopeAccordion);\n  return /*#__PURE__*/$3DjNB$react.createElement($3DjNB$Content, $3DjNB$babelruntimehelpersesmextends({\n    role: \"region\",\n    \"aria-labelledby\": itemContext.triggerId\n  }, collapsibleScope, contentProps, {\n    ref: forwardedRef,\n    style: {\n      ['--radix-accordion-content-height']: 'var(--radix-collapsible-content-height)',\n      ['--radix-accordion-content-width']: 'var(--radix-collapsible-content-width)',\n      ...props.style\n    }\n  }));\n});\n/*#__PURE__*/\n\nObject.assign($1bf158f521e1b1b4$export$985b9a77379b54a0, {\n  displayName: $1bf158f521e1b1b4$var$CONTENT_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction $1bf158f521e1b1b4$var$getState(open) {\n  return open ? 'open' : 'closed';\n}\n\nconst $1bf158f521e1b1b4$export$be92b6f5f03c0fe9 = $1bf158f521e1b1b4$export$a766cd26d0d69044;\nconst $1bf158f521e1b1b4$export$6d08773d2e66f8f2 = $1bf158f521e1b1b4$export$d99097c13d4dac9f;\nconst $1bf158f521e1b1b4$export$8b251419efc915eb = $1bf158f521e1b1b4$export$5e3e5deaaf81ee41;\nconst $1bf158f521e1b1b4$export$41fb9f06171c75f4 = $1bf158f521e1b1b4$export$94e939b1f85bdd73;\nconst $1bf158f521e1b1b4$export$7c6e2c02157bb7d2 = $1bf158f521e1b1b4$export$985b9a77379b54a0;\nexport { $1bf158f521e1b1b4$export$9748edc328a73be1 as createAccordionScope, $1bf158f521e1b1b4$export$a766cd26d0d69044 as Accordion, $1bf158f521e1b1b4$export$d99097c13d4dac9f as AccordionItem, $1bf158f521e1b1b4$export$5e3e5deaaf81ee41 as AccordionHeader, $1bf158f521e1b1b4$export$94e939b1f85bdd73 as AccordionTrigger, $1bf158f521e1b1b4$export$985b9a77379b54a0 as AccordionContent, $1bf158f521e1b1b4$export$be92b6f5f03c0fe9 as Root, $1bf158f521e1b1b4$export$6d08773d2e66f8f2 as Item, $1bf158f521e1b1b4$export$8b251419efc915eb as Header, $1bf158f521e1b1b4$export$41fb9f06171c75f4 as Trigger, $1bf158f521e1b1b4$export$7c6e2c02157bb7d2 as Content };","map":{"version":3,"mappings":"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","names":["ACCORDION_NAME","ACCORDION_KEYS","Collection","useCollection","createCollectionScope","createCollection","createAccordionContext","createAccordionScope","createContextScope","createCollapsibleScope","useCollapsibleScope","Accordion","React","forwardRef","props","forwardedRef","type","accordionProps","singleProps","multipleProps","$3DjNB$react","$1bf158f521e1b1b4$var$Collection","Provider","scope","__scopeAccordion","$1bf158f521e1b1b4$var$AccordionImplMultiple","ref","$1bf158f521e1b1b4$var$AccordionImplSingle","Object","displayName","propTypes","value","defaultValue","includes","Error","Array","isArray","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","AccordionImplSingle","valueProp","onValueChange","accordionSingleProps","setValue","useControllableState","prop","defaultProp","onChange","$1bf158f521e1b1b4$var$AccordionValueProvider","onItemOpen","onItemClose","useCallback","$1bf158f521e1b1b4$var$AccordionCollapsibleProvider","$1bf158f521e1b1b4$var$AccordionImpl","AccordionImplMultiple","accordionMultipleProps","handleItemOpen","itemValue","prevValue","handleItemClose","filter","AccordionImplProvider","useAccordionContext","AccordionImpl","disabled","accordionRef","useRef","composedRefs","useComposedRefs","getItems","handleKeyDown","composeEventHandlers","onKeyDown","event","key","target","triggerCollection","item","current","_item$ref$current","triggerIndex","findIndex","triggerCount","length","preventDefault","nextIndex","clampedIndex","focus","$1bf158f521e1b1b4$var$AccordionImplProvider","Slot","$3DjNB$Primitive","div","undefined","ITEM_NAME","AccordionItemProvider","useAccordionItemContext","AccordionItem","accordionItemProps","accordionContext","valueContext","collapsibleScope","triggerId","useId","open","$1bf158f521e1b1b4$var$AccordionItemProvider","$3DjNB$Root","$3DjNB$babelruntimehelpersesmextends","onOpenChange","HEADER_NAME","AccordionHeader","headerProps","itemContext","h3","getState","TRIGGER_NAME","AccordionTrigger","triggerProps","collapsibleContext","ItemSlot","$3DjNB$Trigger","id","CONTENT_NAME","AccordionContent","contentProps","$3DjNB$Content","role","style","Root","Item","Header","Trigger","Content"],"sources":["/home/dalienst/node_modules/@radix-ui/react-accordion/dist/packages/react/accordion/src/Accordion.tsx"],"sourcesContent":["import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\nAccordion.propTypes = {\n  type(props) {\n    const value = props.value || props.defaultValue;\n    if (props.type && !['single', 'multiple'].includes(props.type)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.'\n      );\n    }\n    if (props.type === 'multiple' && typeof value === 'string') {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.'\n      );\n    }\n    if (props.type === 'single' && Array.isArray(value)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.'\n      );\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      switch (event.key) {\n        case 'Home':\n          nextIndex = 0;\n          break;\n        case 'End':\n          nextIndex = triggerCount - 1;\n          break;\n        case 'ArrowDown':\n          nextIndex = triggerIndex + 1;\n          break;\n        case 'ArrowUp':\n          nextIndex = triggerIndex - 1;\n          if (nextIndex < 0) {\n            nextIndex = triggerCount - 1;\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex].ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider scope={__scopeAccordion} disabled={disabled}>\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-state={open ? 'open' : 'closed'}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"]},"metadata":{},"sourceType":"module"}
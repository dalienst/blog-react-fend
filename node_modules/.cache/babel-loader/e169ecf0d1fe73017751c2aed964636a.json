{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { fromBase64 } from \"@aws-sdk/util-base64-browser\"; //reference: https://snack.expo.io/r1JCSWRGU\n\nexport var streamCollector = function (stream) {\n  if (typeof Blob === \"function\" && stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n\n  return collectStream(stream);\n};\n\nfunction collectBlob(blob) {\n  return __awaiter(this, void 0, void 0, function () {\n    var base64, arrayBuffer;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , readToBase64(blob)];\n\n        case 1:\n          base64 = _a.sent();\n          arrayBuffer = fromBase64(base64);\n          return [2\n          /*return*/\n          , new Uint8Array(arrayBuffer)];\n      }\n    });\n  });\n}\n\nfunction collectStream(stream) {\n  return __awaiter(this, void 0, void 0, function () {\n    var res, reader, isDone, _a, done, value, prior;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          res = new Uint8Array(0);\n          reader = stream.getReader();\n          isDone = false;\n          _b.label = 1;\n\n        case 1:\n          if (!!isDone) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , reader.read()];\n\n        case 2:\n          _a = _b.sent(), done = _a.done, value = _a.value;\n\n          if (value) {\n            prior = res;\n            res = new Uint8Array(prior.length + value.length);\n            res.set(prior);\n            res.set(value, prior.length);\n          }\n\n          isDone = done;\n          return [3\n          /*break*/\n          , 1];\n\n        case 3:\n          return [2\n          /*return*/\n          , res];\n      }\n    });\n  });\n}\n\nfunction readToBase64(blob) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n      var _a; // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n      // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n\n\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n\n      var result = (_a = reader.result) !== null && _a !== void 0 ? _a : \"\"; // Response can include only 'data:' for empty blob, return empty string in this case.\n      // Otherwise, return the string after ','\n\n      var commaIndex = result.indexOf(\",\");\n      var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n\n    reader.onabort = function () {\n      return reject(new Error(\"Read aborted\"));\n    };\n\n    reader.onerror = function () {\n      return reject(reader.error);\n    }; // reader.readAsArrayBuffer is not always available\n\n\n    reader.readAsDataURL(blob);\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,UAAT,QAA2B,8BAA3B,C,CAEA;;AACA,OAAO,IAAMC,eAAe,GAAoB,UAACC,MAAD,EAA8B;AAC5E,MAAI,OAAOC,IAAP,KAAgB,UAAhB,IAA8BD,MAAM,YAAYC,IAApD,EAA0D;AACxD,WAAOC,WAAW,CAACF,MAAD,CAAlB;AACD;;AAED,SAAOG,aAAa,CAACH,MAAD,CAApB;AACD,CANM;;AAQP,SAAeE,WAAf,CAA2BE,IAA3B,EAAqC;;;;;;AACpB;AAAA;AAAA,YAAMC,YAAY,CAACD,IAAD,CAAlB;;;AAATE,gBAAM,GAAGC,SAAT;AACAC,qBAAW,GAAGV,UAAU,CAACQ,MAAD,CAAxB;AACN;AAAA;AAAA,YAAO,IAAIG,UAAJ,CAAeD,WAAf,CAAP;;;;AACD;;AAED,SAAeL,aAAf,CAA6BH,MAA7B,EAAmD;;;;;;;AAC7CU,aAAG,GAAG,IAAID,UAAJ,CAAe,CAAf,CAAN;AACEE,gBAAM,GAAGX,MAAM,CAACY,SAAP,EAAT;AACFC,gBAAM,GAAG,KAAT;;;;eACG,CAACA,QAAM;AAAA;AAAA;AACY;AAAA;AAAA,YAAMF,MAAM,CAACG,IAAP,EAAN;;;AAAlBP,eAAkBQ,SAAlB,EAAEC,IAAI,UAAN,EAAQC,KAAK,WAAb;;AACN,cAAIA,KAAJ,EAAW;AACHC,iBAAK,GAAGR,GAAR;AACNA,eAAG,GAAG,IAAID,UAAJ,CAAeS,KAAK,CAACC,MAAN,GAAeF,KAAK,CAACE,MAApC,CAAN;AACAT,eAAG,CAACU,GAAJ,CAAQF,KAAR;AACAR,eAAG,CAACU,GAAJ,CAAQH,KAAR,EAAeC,KAAK,CAACC,MAArB;AACD;;AACDN,gBAAM,GAAGG,IAAT;;;;;;AAEF;AAAA;AAAA,YAAON,GAAP;;;;AACD;;AAED,SAASL,YAAT,CAAsBD,IAAtB,EAAgC;AAC9B,SAAO,IAAIiB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AACjC,QAAMZ,MAAM,GAAG,IAAIa,UAAJ,EAAf;;AACAb,UAAM,CAACc,SAAP,GAAmB;aAAA,CACjB;AACA;;;AACA,UAAId,MAAM,CAACe,UAAP,KAAsB,CAA1B,EAA6B;AAC3B,eAAOH,MAAM,CAAC,IAAII,KAAJ,CAAU,0BAAV,CAAD,CAAb;AACD;;AACD,UAAMC,MAAM,GAAG,MAACjB,MAAM,CAACiB,MAAR,MAAc,IAAd,IAAcrB,aAAd,GAAcA,EAAd,GAAkB,EAAjC,CANiB,CAOjB;AACA;;AACA,UAAMsB,UAAU,GAAGD,MAAM,CAACE,OAAP,CAAe,GAAf,CAAnB;AACA,UAAMC,UAAU,GAAGF,UAAU,GAAG,CAAC,CAAd,GAAkBA,UAAU,GAAG,CAA/B,GAAmCD,MAAM,CAACT,MAA7D;AACAG,aAAO,CAACM,MAAM,CAACI,SAAP,CAAiBD,UAAjB,CAAD,CAAP;AACD,KAZD;;AAaApB,UAAM,CAACsB,OAAP,GAAiB;AAAM,mBAAM,CAAC,IAAIN,KAAJ,CAAU,cAAV,CAAD,CAAN;AAAiC,KAAxD;;AACAhB,UAAM,CAACuB,OAAP,GAAiB;AAAM,mBAAM,CAACvB,MAAM,CAACwB,KAAR,CAAN;AAAoB,KAA3C,CAhBiC,CAiBjC;;;AACAxB,UAAM,CAACyB,aAAP,CAAqBhC,IAArB;AACD,GAnBM,CAAP;AAoBD","names":["fromBase64","streamCollector","stream","Blob","collectBlob","collectStream","blob","readToBase64","base64","_a","arrayBuffer","Uint8Array","res","reader","getReader","isDone","read","_b","done","value","prior","length","set","Promise","resolve","reject","FileReader","onloadend","readyState","Error","result","commaIndex","indexOf","dataOffset","substring","onabort","onerror","error","readAsDataURL"],"sources":["/home/dalienst/node_modules/@aws-sdk/fetch-http-handler/src/stream-collector.ts"],"sourcesContent":["import { StreamCollector } from \"@aws-sdk/types\";\nimport { fromBase64 } from \"@aws-sdk/util-base64-browser\";\n\n//reference: https://snack.expo.io/r1JCSWRGU\nexport const streamCollector: StreamCollector = (stream: Blob | ReadableStream): Promise<Uint8Array> => {\n  if (typeof Blob === \"function\" && stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n\n  return collectStream(stream as ReadableStream);\n};\n\nasync function collectBlob(blob: Blob): Promise<Uint8Array> {\n  const base64 = await readToBase64(blob);\n  const arrayBuffer = fromBase64(base64);\n  return new Uint8Array(arrayBuffer);\n}\n\nasync function collectStream(stream: ReadableStream): Promise<Uint8Array> {\n  let res = new Uint8Array(0);\n  const reader = stream.getReader();\n  let isDone = false;\n  while (!isDone) {\n    const { done, value } = await reader.read();\n    if (value) {\n      const prior = res;\n      res = new Uint8Array(prior.length + value.length);\n      res.set(prior);\n      res.set(value, prior.length);\n    }\n    isDone = done;\n  }\n  return res;\n}\n\nfunction readToBase64(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n      // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n      const result = (reader.result ?? \"\") as string;\n      // Response can include only 'data:' for empty blob, return empty string in this case.\n      // Otherwise, return the string after ','\n      const commaIndex = result.indexOf(\",\");\n      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n    reader.onabort = () => reject(new Error(\"Read aborted\"));\n    reader.onerror = () => reject(reader.error);\n    // reader.readAsArrayBuffer is not always available\n    reader.readAsDataURL(blob);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
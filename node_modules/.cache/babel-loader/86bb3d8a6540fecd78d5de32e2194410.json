{"ast":null,"code":"import { useCallback as $bnPw9$useCallback, useState as $bnPw9$useState, useRef as $bnPw9$useRef, useEffect as $bnPw9$useEffect } from \"react\";\nimport { useCallbackRef as $bnPw9$useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\n\nfunction $71cd76cc60e0454e$export$6f32135080cb4c3(_ref) {\n  let {\n    prop: prop,\n    defaultProp: defaultProp,\n    onChange = () => {}\n  } = _ref;\n  const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({\n    defaultProp: defaultProp,\n    onChange: onChange\n  });\n  const isControlled = prop !== undefined;\n  const value1 = isControlled ? prop : uncontrolledProp;\n  const handleChange = $bnPw9$useCallbackRef(onChange);\n  const setValue = $bnPw9$useCallback(nextValue => {\n    if (isControlled) {\n      const setter = nextValue;\n      const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n      if (value !== prop) handleChange(value);\n    } else setUncontrolledProp(nextValue);\n  }, [isControlled, prop, setUncontrolledProp, handleChange]);\n  return [value1, setValue];\n}\n\nfunction $71cd76cc60e0454e$var$useUncontrolledState(_ref2) {\n  let {\n    defaultProp: defaultProp,\n    onChange: onChange\n  } = _ref2;\n  const uncontrolledState = $bnPw9$useState(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = $bnPw9$useRef(value);\n  const handleChange = $bnPw9$useCallbackRef(onChange);\n  $bnPw9$useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n  return uncontrolledState;\n}\n\nexport { $71cd76cc60e0454e$export$6f32135080cb4c3 as useControllableState };","map":{"version":3,"mappings":";;;AAWA,SAASA,wCAAT,OAIkC;AAAA,MAJD;AAXjCC,UAYEA,IAD+B;AAXjCC,iBAaEA,WAF+B;AAG/BC,YAAQ,GAAG,MAAM,CAAjBA;AAH+B,GAIC;AAChC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CC,0CAAoB,CAAC;AAhBvEJ,iBAgByEA,WAAF;AAhBvEC,cAgBsFA;AAAf,GAAD,CAApE;AACA,QAAMI,YAAY,GAAGN,IAAI,KAAKO,SAA9B;AACA,QAAMC,MAAK,GAAGF,YAAY,GAAGN,IAAH,GAAUG,gBAApC;AACA,QAAMM,YAAY,GAAGC,qBAAc,CAACR,QAAD,CAAnC;AAEA,QAAMS,QAA6D,GAAGC,mBACnEC,aAAc;AACb,QAAIP,YAAJ,EAAkB;AAChB,YAAMQ,MAAM,GAAGD,SAAf;AACA,YAAML,KAAK,GAAG,OAAOK,SAAP,KAAqB,UAArB,GAAkCC,MAAM,CAACd,IAAD,CAAxC,GAAiDa,SAA/D;AACA,UAAIL,KAAK,KAAKR,IAAd,EAAoBS,YAAY,CAACD,KAAD,CAAZC;AAHtB,WAKEL,mBAAmB,CAACS,SAAD,CAAnBT;AAPgE,KAUpE,CAACE,YAAD,EAAeN,IAAf,EAAqBI,mBAArB,EAA0CK,YAA1C,CAVoE,CAAtE;AAaA,SAAO,CAACD,MAAD,EAAQG,QAAR,CAAP;AACD;;AAED,SAASN,0CAAT,QAGgD;AAAA,MAHf;AArCjCJ,iBAsCEA,WAD+B;AArCjCC,cAuCEA;AAF+B,GAGe;AAC9C,QAAMa,iBAAiB,GAAGH,gBAA8BX,WAA9B,CAA1B;AACA,QAAM,CAACO,KAAD,IAAUO,iBAAhB;AACA,QAAMC,YAAY,GAAGJ,cAAaJ,KAAb,CAArB;AACA,QAAMC,YAAY,GAAGC,qBAAc,CAACR,QAAD,CAAnC;AAEAU,mBAAgB,MAAM;AACpB,QAAII,YAAY,CAACC,OAAbD,KAAyBR,KAA7B,EAAoC;AAClCC,kBAAY,CAACD,KAAD,CAAZC;AACAO,kBAAY,CAACC,OAAbD,GAAuBR,KAAvBQ;AACD;AAJH,KAKG,CAACR,KAAD,EAAQQ,YAAR,EAAsBP,YAAtB,CALH;AAOA,SAAOM,iBAAP;AACD","names":["useControllableState","prop","defaultProp","onChange","uncontrolledProp","setUncontrolledProp","useUncontrolledState","isControlled","undefined","value","handleChange","useCallbackRef","setValue","React","nextValue","setter","uncontrolledState","prevValueRef","current"],"sources":["/home/dalienst/node_modules/@radix-ui/react-use-controllable-state/dist/packages/react/use-controllable-state/src/useControllableState.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"module"}
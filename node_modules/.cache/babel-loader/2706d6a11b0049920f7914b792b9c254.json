{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketVersioningRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketVersioningCommand, serializeAws_restXmlPutBucketVersioningCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the versioning state of an existing bucket. To set the versioning state, you must\n *          be the bucket owner.</p>\n *          <p>You can set the versioning state with one of the following values:</p>\n *\n *          <p>\n *             <b>Enabled</b>—Enables versioning for the objects in the\n *          bucket. All objects added to the bucket receive a unique version ID.</p>\n *\n *          <p>\n *             <b>Suspended</b>—Disables versioning for the objects in the\n *          bucket. All objects added to the bucket receive the version ID null.</p>\n *\n *          <p>If the versioning state has never been set on a bucket, it has no versioning state; a\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html\">GetBucketVersioning</a> request does not return a versioning state value.</p>\n *\n *          <p>If the bucket owner enables MFA Delete in the bucket versioning configuration, the\n *          bucket owner must include the <code>x-amz-mfa request</code> header and the\n *             <code>Status</code> and the <code>MfaDelete</code> request elements in a request to set\n *          the versioning state of the bucket.</p>\n *\n *          <important>\n *             <p>If you have an object expiration lifecycle policy in your non-versioned bucket and\n *             you want to maintain the same permanent delete behavior when you enable versioning, you\n *             must add a noncurrent expiration policy. The noncurrent expiration lifecycle policy will\n *             manage the deletes of the noncurrent object versions in the version-enabled bucket. (A\n *             version-enabled bucket maintains one current and zero or more noncurrent object\n *             versions.) For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-and-other-bucket-config\">Lifecycle and Versioning</a>.</p>\n *          </important>\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html\">CreateBucket</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html\">DeleteBucket</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html\">GetBucketVersioning</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar PutBucketVersioningCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutBucketVersioningCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutBucketVersioningCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutBucketVersioningCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketVersioningCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketVersioningRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutBucketVersioningCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketVersioningCommand(input, context);\n  };\n\n  PutBucketVersioningCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketVersioningCommand(output, context);\n  };\n\n  return PutBucketVersioningCommand;\n}($Command);\n\nexport { PutBucketVersioningCommand };","map":{"version":3,"mappings":";AACA,SAASA,0BAAT,QAA2C,oBAA3C;AACA,SACEC,gDADF,EAEEC,8CAFF,QAGO,0BAHP;AAIA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AAAA;AAAA;AAAgDC,gDAAhD,CAKE;AACA;;;AAEA,sCAAqBC,KAArB,EAA2D;AAA3D,gBACE;AACAC,yBAAO,IAFT;;AAAqBC;iBAAsC,CAGzD;AACD;AAED;;;;;AAGAC,qEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;AAE9B,SAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;AACA,SAAKH,eAAL,CAAqBC,GAArB,CAAyBb,uBAAuB,CAACU,aAAD,CAAhD;AAEA,QAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;AAEQ,cAAM,GAAKF,aAAa,OAAxB;AACR,QAAMQ,UAAU,GAAG,UAAnB;AACA,QAAMC,WAAW,GAAG,4BAApB;AACA,QAAMC,uBAAuB,GAA4B;AACvDC,YAAM,QADiD;AAEvDH,gBAAU,YAF6C;AAGvDC,iBAAW,aAH4C;AAIvDG,6BAAuB,EAAEzB,0BAA0B,CAAC0B,kBAJG;AAKvDC,8BAAwB,EAAE,UAACC,MAAD,EAAY;AAAK;AAAM;AALM,KAAzD;AAOQ,sBAAc,GAAKf,aAAa,eAAhC;AACR,WAAOM,KAAK,CAACU,OAAN,CACL,UAACC,OAAD,EAAuC;AACrC,2BAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDhB,OAAO,IAAI,EAAnE;AAAsE,KAFnE,EAGLS,uBAHK,CAAP;AAKD,GA1BD;;AA4BQZ,mDAAR,UAAkBH,KAAlB,EAA0DwB,OAA1D,EAAiF;AAC/E,WAAO9B,8CAA8C,CAACM,KAAD,EAAQwB,OAAR,CAArD;AACD,GAFO;;AAIArB,qDAAR,UAAoBiB,MAApB,EAA4CI,OAA5C,EAAmE;AACjE,WAAO/B,gDAAgD,CAAC2B,MAAD,EAASI,OAAT,CAAvD;AACD,GAFO;;AAMV;AAAC,CAvDD,CAAgD1B,QAAhD","names":["PutBucketVersioningRequest","deserializeAws_restXmlPutBucketVersioningCommand","serializeAws_restXmlPutBucketVersioningCommand","getBucketEndpointPlugin","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutBucketVersioningCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/home/dalienst/node_modules/@aws-sdk/client-s3/commands/PutBucketVersioningCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { PutBucketVersioningRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlPutBucketVersioningCommand,\n  serializeAws_restXmlPutBucketVersioningCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutBucketVersioningCommandInput = PutBucketVersioningRequest;\nexport type PutBucketVersioningCommandOutput = __MetadataBearer;\n\n/**\n * <p>Sets the versioning state of an existing bucket. To set the versioning state, you must\n *          be the bucket owner.</p>\n *          <p>You can set the versioning state with one of the following values:</p>\n *\n *          <p>\n *             <b>Enabled</b>—Enables versioning for the objects in the\n *          bucket. All objects added to the bucket receive a unique version ID.</p>\n *\n *          <p>\n *             <b>Suspended</b>—Disables versioning for the objects in the\n *          bucket. All objects added to the bucket receive the version ID null.</p>\n *\n *          <p>If the versioning state has never been set on a bucket, it has no versioning state; a\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html\">GetBucketVersioning</a> request does not return a versioning state value.</p>\n *\n *          <p>If the bucket owner enables MFA Delete in the bucket versioning configuration, the\n *          bucket owner must include the <code>x-amz-mfa request</code> header and the\n *             <code>Status</code> and the <code>MfaDelete</code> request elements in a request to set\n *          the versioning state of the bucket.</p>\n *\n *          <important>\n *             <p>If you have an object expiration lifecycle policy in your non-versioned bucket and\n *             you want to maintain the same permanent delete behavior when you enable versioning, you\n *             must add a noncurrent expiration policy. The noncurrent expiration lifecycle policy will\n *             manage the deletes of the noncurrent object versions in the version-enabled bucket. (A\n *             version-enabled bucket maintains one current and zero or more noncurrent object\n *             versions.) For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-and-other-bucket-config\">Lifecycle and Versioning</a>.</p>\n *          </important>\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html\">CreateBucket</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html\">DeleteBucket</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html\">GetBucketVersioning</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class PutBucketVersioningCommand extends $Command<\n  PutBucketVersioningCommandInput,\n  PutBucketVersioningCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutBucketVersioningCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutBucketVersioningCommandInput, PutBucketVersioningCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"PutBucketVersioningCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutBucketVersioningRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutBucketVersioningCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlPutBucketVersioningCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutBucketVersioningCommandOutput> {\n    return deserializeAws_restXmlPutBucketVersioningCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}
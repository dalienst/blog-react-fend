{"ast":null,"code":"import { useMemo } from 'react';\nimport useAuthenticator from '../useAuthenticator/useAuthenticator.js';\nimport { getRouteMachineSelector, resolveDefault, resolveVerifyUserRoute, resolveSignUpRoute, resolveSignInRoute, resolveSetupTOTPRoute, resolveResetPasswordRoute, resolveForceNewPasswordRoute, resolveConfirmVerifyUserRoute, resolveConfirmSignUpRoute, resolveConfirmSignInRoute, resolveConfirmResetPasswordRoute, routeSelector } from './utils.js';\n\nfunction useAuthenticatorRoute(_ref) {\n  let {\n    components\n  } = _ref;\n  const {\n    route\n  } = useAuthenticator(routeSelector);\n  const routeMachineSelector = useMemo(() => getRouteMachineSelector(route), [route]); // `useAuthenticator` exposes both state machine (example: `toSignIn`) and non-state machine\n  // props (example: `getTotpSecretCode`). `routeSelector` specifies which state machine props\n  // should be returned for a specific route.\n  // Only state machine props specified by the current `routeSelector` will have their current value\n  // returned by `useAuthenticator`, non-machine props returned will always be the current value\n\n  const routeSelectorProps = useAuthenticator(routeMachineSelector);\n  const {\n    ConfirmResetPassword,\n    ConfirmSignIn,\n    ConfirmSignUp,\n    ConfirmVerifyUser,\n    ForceNewPassword,\n    ResetPassword,\n    SetupTOTP,\n    SignIn,\n    SignUp,\n    VerifyUser\n  } = components;\n\n  switch (route) {\n    case 'confirmResetPassword':\n      {\n        return resolveConfirmResetPasswordRoute(ConfirmResetPassword, routeSelectorProps);\n      }\n\n    case 'confirmSignIn':\n      {\n        return resolveConfirmSignInRoute(ConfirmSignIn, routeSelectorProps);\n      }\n\n    case 'confirmSignUp':\n      {\n        return resolveConfirmSignUpRoute(ConfirmSignUp, routeSelectorProps);\n      }\n\n    case 'confirmVerifyUser':\n      {\n        return resolveConfirmVerifyUserRoute(ConfirmVerifyUser, routeSelectorProps);\n      }\n\n    case 'forceNewPassword':\n      {\n        return resolveForceNewPasswordRoute(ForceNewPassword, routeSelectorProps);\n      }\n\n    case 'resetPassword':\n      {\n        return resolveResetPasswordRoute(ResetPassword, routeSelectorProps);\n      }\n\n    case 'setupTOTP':\n      {\n        return resolveSetupTOTPRoute(SetupTOTP, routeSelectorProps);\n      }\n\n    case 'signIn':\n      {\n        return resolveSignInRoute(SignIn, routeSelectorProps);\n      }\n\n    case 'signUp':\n      {\n        return resolveSignUpRoute(SignUp, routeSelectorProps);\n      }\n\n    case 'verifyUser':\n      {\n        return resolveVerifyUserRoute(VerifyUser, routeSelectorProps);\n      }\n\n    default:\n      {\n        return resolveDefault();\n      }\n  }\n}\n\nexport { useAuthenticatorRoute as default };","map":{"version":3,"sources":["/home/dalienst/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/useAuthenticatorRoute.js"],"names":["useMemo","useAuthenticator","getRouteMachineSelector","resolveDefault","resolveVerifyUserRoute","resolveSignUpRoute","resolveSignInRoute","resolveSetupTOTPRoute","resolveResetPasswordRoute","resolveForceNewPasswordRoute","resolveConfirmVerifyUserRoute","resolveConfirmSignUpRoute","resolveConfirmSignInRoute","resolveConfirmResetPasswordRoute","routeSelector","useAuthenticatorRoute","components","route","routeMachineSelector","routeSelectorProps","ConfirmResetPassword","ConfirmSignIn","ConfirmSignUp","ConfirmVerifyUser","ForceNewPassword","ResetPassword","SetupTOTP","SignIn","SignUp","VerifyUser","default"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,gBAAP,MAA6B,yCAA7B;AACA,SAASC,uBAAT,EAAkCC,cAAlC,EAAkDC,sBAAlD,EAA0EC,kBAA1E,EAA8FC,kBAA9F,EAAkHC,qBAAlH,EAAyIC,yBAAzI,EAAoKC,4BAApK,EAAkMC,6BAAlM,EAAiOC,yBAAjO,EAA4PC,yBAA5P,EAAuRC,gCAAvR,EAAyTC,aAAzT,QAA8U,YAA9U;;AAEA,SAASC,qBAAT,OAAgD;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM;AAAEC,IAAAA;AAAF,MAAYhB,gBAAgB,CAACa,aAAD,CAAlC;AACA,QAAMI,oBAAoB,GAAGlB,OAAO,CAAC,MAAME,uBAAuB,CAACe,KAAD,CAA9B,EAAuC,CAACA,KAAD,CAAvC,CAApC,CAF4C,CAG5C;AACA;AACA;AACA;AACA;;AACA,QAAME,kBAAkB,GAAGlB,gBAAgB,CAACiB,oBAAD,CAA3C;AACA,QAAM;AAAEE,IAAAA,oBAAF;AAAwBC,IAAAA,aAAxB;AAAuCC,IAAAA,aAAvC;AAAsDC,IAAAA,iBAAtD;AAAyEC,IAAAA,gBAAzE;AAA2FC,IAAAA,aAA3F;AAA0GC,IAAAA,SAA1G;AAAqHC,IAAAA,MAArH;AAA6HC,IAAAA,MAA7H;AAAqIC,IAAAA;AAArI,MAAqJb,UAA3J;;AACA,UAAQC,KAAR;AACI,SAAK,sBAAL;AAA6B;AACzB,eAAOJ,gCAAgC,CAACO,oBAAD,EAAuBD,kBAAvB,CAAvC;AACH;;AACD,SAAK,eAAL;AAAsB;AAClB,eAAOP,yBAAyB,CAACS,aAAD,EAAgBF,kBAAhB,CAAhC;AACH;;AACD,SAAK,eAAL;AAAsB;AAClB,eAAOR,yBAAyB,CAACW,aAAD,EAAgBH,kBAAhB,CAAhC;AACH;;AACD,SAAK,mBAAL;AAA0B;AACtB,eAAOT,6BAA6B,CAACa,iBAAD,EAAoBJ,kBAApB,CAApC;AACH;;AACD,SAAK,kBAAL;AAAyB;AACrB,eAAOV,4BAA4B,CAACe,gBAAD,EAAmBL,kBAAnB,CAAnC;AACH;;AACD,SAAK,eAAL;AAAsB;AAClB,eAAOX,yBAAyB,CAACiB,aAAD,EAAgBN,kBAAhB,CAAhC;AACH;;AACD,SAAK,WAAL;AAAkB;AACd,eAAOZ,qBAAqB,CAACmB,SAAD,EAAYP,kBAAZ,CAA5B;AACH;;AACD,SAAK,QAAL;AAAe;AACX,eAAOb,kBAAkB,CAACqB,MAAD,EAASR,kBAAT,CAAzB;AACH;;AACD,SAAK,QAAL;AAAe;AACX,eAAOd,kBAAkB,CAACuB,MAAD,EAAST,kBAAT,CAAzB;AACH;;AACD,SAAK,YAAL;AAAmB;AACf,eAAOf,sBAAsB,CAACyB,UAAD,EAAaV,kBAAb,CAA7B;AACH;;AACD;AAAS;AACL,eAAOhB,cAAc,EAArB;AACH;AAjCL;AAmCH;;AAED,SAASY,qBAAqB,IAAIe,OAAlC","sourcesContent":["import { useMemo } from 'react';\nimport useAuthenticator from '../useAuthenticator/useAuthenticator.js';\nimport { getRouteMachineSelector, resolveDefault, resolveVerifyUserRoute, resolveSignUpRoute, resolveSignInRoute, resolveSetupTOTPRoute, resolveResetPasswordRoute, resolveForceNewPasswordRoute, resolveConfirmVerifyUserRoute, resolveConfirmSignUpRoute, resolveConfirmSignInRoute, resolveConfirmResetPasswordRoute, routeSelector } from './utils.js';\n\nfunction useAuthenticatorRoute({ components, }) {\n    const { route } = useAuthenticator(routeSelector);\n    const routeMachineSelector = useMemo(() => getRouteMachineSelector(route), [route]);\n    // `useAuthenticator` exposes both state machine (example: `toSignIn`) and non-state machine\n    // props (example: `getTotpSecretCode`). `routeSelector` specifies which state machine props\n    // should be returned for a specific route.\n    // Only state machine props specified by the current `routeSelector` will have their current value\n    // returned by `useAuthenticator`, non-machine props returned will always be the current value\n    const routeSelectorProps = useAuthenticator(routeMachineSelector);\n    const { ConfirmResetPassword, ConfirmSignIn, ConfirmSignUp, ConfirmVerifyUser, ForceNewPassword, ResetPassword, SetupTOTP, SignIn, SignUp, VerifyUser, } = components;\n    switch (route) {\n        case 'confirmResetPassword': {\n            return resolveConfirmResetPasswordRoute(ConfirmResetPassword, routeSelectorProps);\n        }\n        case 'confirmSignIn': {\n            return resolveConfirmSignInRoute(ConfirmSignIn, routeSelectorProps);\n        }\n        case 'confirmSignUp': {\n            return resolveConfirmSignUpRoute(ConfirmSignUp, routeSelectorProps);\n        }\n        case 'confirmVerifyUser': {\n            return resolveConfirmVerifyUserRoute(ConfirmVerifyUser, routeSelectorProps);\n        }\n        case 'forceNewPassword': {\n            return resolveForceNewPasswordRoute(ForceNewPassword, routeSelectorProps);\n        }\n        case 'resetPassword': {\n            return resolveResetPasswordRoute(ResetPassword, routeSelectorProps);\n        }\n        case 'setupTOTP': {\n            return resolveSetupTOTPRoute(SetupTOTP, routeSelectorProps);\n        }\n        case 'signIn': {\n            return resolveSignInRoute(SignIn, routeSelectorProps);\n        }\n        case 'signUp': {\n            return resolveSignUpRoute(SignUp, routeSelectorProps);\n        }\n        case 'verifyUser': {\n            return resolveVerifyUserRoute(VerifyUser, routeSelectorProps);\n        }\n        default: {\n            return resolveDefault();\n        }\n    }\n}\n\nexport { useAuthenticatorRoute as default };\n"]},"metadata":{},"sourceType":"module"}
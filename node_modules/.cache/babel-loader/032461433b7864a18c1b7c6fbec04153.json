{"ast":null,"code":"import { __asyncValues, __awaiter, __generator, __values } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, getIndex, getIndexFromAssociation, isModelConstructor, traverseModel, validatePredicate, inMemoryPagination, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, IDENTIFIER_KEY_SEPARATOR } from '../../util';\nvar logger = new Logger('DataStore');\n\nvar AsyncStorageAdapter =\n/** @class */\nfunction () {\n  function AsyncStorageAdapter() {}\n\n  AsyncStorageAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  }; // Retrieves primary key values from a model\n\n\n  AsyncStorageAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  }; // Retrieves concatenated primary key values from a model\n\n\n  AsyncStorageAdapter.prototype.getIndexKeyValuesPath = function (model) {\n    return this.getIndexKeyValuesFromModel(model).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n  };\n\n  AsyncStorageAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initPromise) return [3\n            /*break*/\n            , 1];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.initPromise];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _a.label = 4;\n\n          case 4:\n            _a.trys.push([4, 7,, 8]);\n\n            if (!!this.db) return [3\n            /*break*/\n            , 6];\n            this.db = new AsyncStorageDatabase();\n            return [4\n            /*yield*/\n            , this.db.init()];\n\n          case 5:\n            _a.sent();\n\n            this.resolve();\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            error_1 = _a.sent();\n            this.reject(error_1);\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.save = function (model, condition) {\n    var e_1, _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, keyValuesPath, fromDB, predicates, _b, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, itemKeyValues, itemKeyValuesPath, fromDB_1, opType, modelKeyValues, e_1_1;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                  item = _a.item,\n                  instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            return [4\n            /*yield*/\n            , this.db.get(keyValuesPath, storeName)];\n\n          case 1:\n            fromDB = _c.sent();\n\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              _b = predicates, predicateObjs = _b.predicates, type = _b.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n\n            result = [];\n            _c.label = 2;\n\n          case 2:\n            _c.trys.push([2, 9, 10, 15]);\n\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _c.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , connectionStoreNames_1.next()];\n\n          case 4:\n            if (!(connectionStoreNames_1_1 = _c.sent(), !connectionStoreNames_1_1.done)) return [3\n            /*break*/\n            , 8];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            itemKeyValues = keys.map(function (key) {\n              return item[key];\n            });\n            itemKeyValuesPath = itemKeyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            return [4\n            /*yield*/\n            , this.db.get(itemKeyValuesPath, storeName_1)];\n\n          case 5:\n            fromDB_1 = _c.sent();\n            opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.db.save(item, storeName_1, keys, itemKeyValuesPath)];\n\n          case 6:\n            _c.sent();\n\n            result.push([instance, opType]);\n            _c.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 3];\n\n          case 8:\n            return [3\n            /*break*/\n            , 15];\n\n          case 9:\n            e_1_1 = _c.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 15];\n\n          case 10:\n            _c.trys.push([10,, 13, 14]);\n\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , _a.call(connectionStoreNames_1)];\n\n          case 11:\n            _c.sent();\n\n            _c.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (e_1) throw e_1.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        namespace = this.schema.namespaces[namespaceName];\n        relations = namespace.relationships[srcModelName].relationTypes;\n        connectionStoreNames = relations.map(function (_a) {\n          var modelName = _a.modelName;\n          return getStorename(namespaceName, modelName);\n        });\n        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n\n        if (connectionStoreNames.length === 0) {\n          return [2\n          /*return*/\n          , records.map(function (record) {\n            return _this.modelInstanceCreator(modelConstructor, record);\n          })];\n        }\n\n        return [2\n        /*return*/\n        , records.map(function (record) {\n          return _this.modelInstanceCreator(modelConstructor, record);\n        })];\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keys, queryByKey, hasSort, hasPagination, records;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keys);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4\n            /*yield*/\n            , function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3\n                      /*break*/\n                      , 2];\n                      return [4\n                      /*yield*/\n                      , this.getByKey(storeName, queryByKey)];\n\n                    case 1:\n                      record = _a.sent();\n                      return [2\n                      /*return*/\n                      , record ? [record] : []];\n\n                    case 2:\n                      if (!predicates) return [3\n                      /*break*/\n                      , 4];\n                      return [4\n                      /*yield*/\n                      , this.filterOnPredicate(storeName, predicates)];\n\n                    case 3:\n                      filtered = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(filtered, pagination)];\n\n                    case 4:\n                      if (!(hasSort || hasPagination)) return [3\n                      /*break*/\n                      , 6];\n                      return [4\n                      /*yield*/\n                      , this.getAll(storeName)];\n\n                    case 5:\n                      all = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(all, pagination)];\n\n                    case 6:\n                      return [2\n                      /*return*/\n                      , this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n\n          case 1:\n            records = _a.sent();\n            return [4\n            /*yield*/\n            , this.load(namespaceName, modelConstructor.name, records)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.getByKey = function (storeName, keyValuePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.get(keyValuePath, storeName)];\n\n          case 1:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.keyValueFromPredicate = function (predicates, keys) {\n    var e_2, _a;\n\n    var predicateObjs = predicates.predicates;\n\n    if (predicateObjs.length !== keys.length) {\n      return;\n    }\n\n    var keyValues = [];\n\n    var _loop_1 = function (key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq';\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n\n    try {\n      for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n        var key = keys_1_1.value;\n\n        _loop_1(key);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return keyValues.length === keys.length ? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR) : undefined;\n  };\n\n  AsyncStorageAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4\n            /*yield*/\n            , this.getAll(storeName)];\n\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2\n            /*return*/\n            , filtered];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    return inMemoryPagination(records, pagination);\n  };\n\n  AsyncStorageAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.db.getOne(firstOrLast, storeName)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, models, relations, deletedModels, deletedModels, model, modelConstructor, nameSpace, storeName, keyValuePath, fromDB, msg, predicates, _a, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3\n            /*break*/\n            , 8];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            return [4\n            /*yield*/\n            , this.query(modelConstructor, condition)];\n\n          case 1:\n            models = _b.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 2:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 3:\n            _b.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 5:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 6:\n            _b.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 7:\n            return [3\n            /*break*/\n            , 15];\n\n          case 8:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3\n            /*break*/\n            , 11];\n            keyValuePath = this.getIndexKeyValuesPath(model);\n            return [4\n            /*yield*/\n            , this.db.get(keyValuePath, storeName)];\n\n          case 9:\n            fromDB = _b.sent();\n\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2\n              /*return*/\n              , [[model], []]];\n            }\n\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            _a = predicates, predicateObjs = _a.predicates, type = _a.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 10:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 11:\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 12:\n            _b.sent();\n\n            _b.label = 13;\n\n          case 13:\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 14:\n            _b.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [[model], deletedModels]];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.deleteItem = function (deleteQueue) {\n    var e_3, _a, e_4, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _c, _d, deleteItem, storeName, items, items_1, items_1_1, item, keyValuesPath, e_4_1, e_3_1;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 17, 18, 23]);\n\n            _c = __asyncValues(deleteQueue);\n            _e.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , _c.next()];\n\n          case 2:\n            if (!(_d = _e.sent(), !_d.done)) return [3\n            /*break*/\n            , 16];\n            deleteItem = _d.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            _e.label = 3;\n\n          case 3:\n            _e.trys.push([3, 9, 10, 15]);\n\n            items_1 = __asyncValues(items);\n            _e.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , items_1.next()];\n\n          case 5:\n            if (!(items_1_1 = _e.sent(), !items_1_1.done)) return [3\n            /*break*/\n            , 8];\n            item = items_1_1.value;\n            if (!item) return [3\n            /*break*/\n            , 7];\n            if (!(typeof item === 'object')) return [3\n            /*break*/\n            , 7];\n            keyValuesPath = this.getIndexKeyValuesPath(item);\n            return [4\n            /*yield*/\n            , this.db.delete(keyValuesPath, storeName)];\n\n          case 6:\n            _e.sent();\n\n            _e.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 4];\n\n          case 8:\n            return [3\n            /*break*/\n            , 15];\n\n          case 9:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 15];\n\n          case 10:\n            _e.trys.push([10,, 13, 14]);\n\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , _b.call(items_1)];\n\n          case 11:\n            _e.sent();\n\n            _e.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (e_4) throw e_4.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [3\n            /*break*/\n            , 1];\n\n          case 16:\n            return [3\n            /*break*/\n            , 23];\n\n          case 17:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 23];\n\n          case 18:\n            _e.trys.push([18,, 21, 22]);\n\n            if (!(_d && !_d.done && (_a = _c.return))) return [3\n            /*break*/\n            , 20];\n            return [4\n            /*yield*/\n            , _a.call(_c)];\n\n          case 19:\n            _e.sent();\n\n            _e.label = 20;\n\n          case 20:\n            return [3\n            /*break*/\n            , 22];\n\n          case 21:\n            if (e_3) throw e_3.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 22:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 23:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Populates the delete Queue with all the items to delete\n   * @param relations\n   * @param models\n   * @param srcModel\n   * @param nameSpace\n   * @param deleteQueue\n   */\n\n\n  AsyncStorageAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_1, relations_1_1, models_1, models_1_1, models_2, models_2_1;\n\n    var e_5, _a, e_6, _b, e_7, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, index, _d, model, hasOneIndex_1, hasConnectedModelFields, keyValuesPath, values_1, isUnidirectionalConnection, allRecords, recordToDelete, hasOneIndex_2, hasOneCustomField, keyValuesPath, value_1, allRecords, recordToDelete, e_6_1, model, keyValues, allRecords, indices, childrenArray, e_7_1, e_5_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 38, 39, 44]);\n\n            relations_1 = __asyncValues(relations);\n            _e.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , relations_1.next()];\n\n          case 2:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3\n            /*break*/\n            , 37];\n            rel = relations_1_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) || // if we were unable to find an index via relationTypes\n            // i.e. for keyName connections, attempt to find one by the\n            // associatedWith property\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n            _d = relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 20];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 34];\n            }\n\n            return [3\n            /*break*/\n            , 35];\n\n          case 3:\n            _e.trys.push([3, 13, 14, 19]);\n\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , models_1.next()];\n\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3\n            /*break*/\n            , 12];\n            model = models_1_1.value;\n            if (!(targetNames && (targetNames === null || targetNames === void 0 ? void 0 : targetNames.length))) return [3\n            /*break*/\n            , 8];\n\n            if (index) {\n              hasOneIndex_1 = index.split(IDENTIFIER_KEY_SEPARATOR);\n            } else if (associatedWith) {\n              if (Array.isArray(associatedWith)) {\n                hasOneIndex_1 = associatedWith;\n              } else {\n                hasOneIndex_1 = [associatedWith];\n              }\n            }\n\n            hasConnectedModelFields = targetNames.every(function (targetName) {\n              return model.hasOwnProperty(targetName);\n            });\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            isUnidirectionalConnection = hasOneIndex_1 === associatedWith;\n\n            if (hasConnectedModelFields && isUnidirectionalConnection) {\n              // Values will be that of the child model\n              values_1 = targetNames.filter(function (targetName) {\n                var _a;\n\n                return (_a = model[targetName]) !== null && _a !== void 0 ? _a : false;\n              }).map(function (targetName) {\n                return model[targetName];\n              });\n            } else {\n              // values will be that of the parent model\n              values_1 = keyValuesPath.split(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n            }\n\n            if (values_1.length === 0) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 6:\n            allRecords = _e.sent();\n            recordToDelete = void 0; // values === targetNames\n\n            if (hasConnectedModelFields) {\n              /**\n               * Retrieve record by finding the record where all\n               * targetNames are present on the connected model.\n               *\n               */\n              // recordToDelete = allRecords.filter(childItem =>\n              // \tvalues.every(value => childItem[value] != null)\n              // ) as T[];\n              recordToDelete = allRecords.filter(function (childItem) {\n                return hasOneIndex_1.every(function (index) {\n                  return values_1.includes(childItem[index]);\n                });\n              });\n            } else {\n              // values === keyValuePath\n              recordToDelete = allRecords.filter(function (childItem) {\n                return childItem[hasOneIndex_1] === values_1;\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n\n          case 7:\n            _e.sent();\n\n            return [3\n            /*break*/\n            , 11];\n\n          case 8:\n            hasOneIndex_2 = index || associatedWith;\n            hasOneCustomField = targetName in model;\n            keyValuesPath = this.getIndexKeyValuesPath(model);\n            value_1 = hasOneCustomField ? model[targetName] : keyValuesPath;\n            if (!value_1) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 9:\n            allRecords = _e.sent();\n            recordToDelete = allRecords.filter(function (childItem) {\n              return childItem[hasOneIndex_2] === value_1;\n            });\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n\n          case 10:\n            _e.sent();\n\n            _e.label = 11;\n\n          case 11:\n            return [3\n            /*break*/\n            , 4];\n\n          case 12:\n            return [3\n            /*break*/\n            , 19];\n\n          case 13:\n            e_6_1 = _e.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3\n            /*break*/\n            , 19];\n\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3\n            /*break*/\n            , 16];\n            return [4\n            /*yield*/\n            , _b.call(models_1)];\n\n          case 15:\n            _e.sent();\n\n            _e.label = 16;\n\n          case 16:\n            return [3\n            /*break*/\n            , 18];\n\n          case 17:\n            if (e_6) throw e_6.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 18:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 19:\n            return [3\n            /*break*/\n            , 36];\n\n          case 20:\n            _e.trys.push([20, 27, 28, 33]);\n\n            models_2 = __asyncValues(models);\n            _e.label = 21;\n\n          case 21:\n            return [4\n            /*yield*/\n            , models_2.next()];\n\n          case 22:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3\n            /*break*/\n            , 26];\n            model = models_2_1.value;\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 23:\n            allRecords = _e.sent();\n            indices = index.split(IDENTIFIER_KEY_SEPARATOR);\n            childrenArray = allRecords.filter(function (childItem) {\n              return indices.every(function (index) {\n                return keyValues.includes(childItem[index]);\n              });\n            });\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n\n          case 24:\n            _e.sent();\n\n            _e.label = 25;\n\n          case 25:\n            return [3\n            /*break*/\n            , 21];\n\n          case 26:\n            return [3\n            /*break*/\n            , 33];\n\n          case 27:\n            e_7_1 = _e.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3\n            /*break*/\n            , 33];\n\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3\n            /*break*/\n            , 30];\n            return [4\n            /*yield*/\n            , _c.call(models_2)];\n\n          case 29:\n            _e.sent();\n\n            _e.label = 30;\n\n          case 30:\n            return [3\n            /*break*/\n            , 32];\n\n          case 31:\n            if (e_7) throw e_7.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 32:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 33:\n            return [3\n            /*break*/\n            , 36];\n\n          case 34:\n            // Intentionally blank\n            return [3\n            /*break*/\n            , 36];\n\n          case 35:\n            throw new Error(\"Invalid relationType \" + relationType);\n\n          case 36:\n            return [3\n            /*break*/\n            , 1];\n\n          case 37:\n            return [3\n            /*break*/\n            , 44];\n\n          case 38:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3\n            /*break*/\n            , 44];\n\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3\n            /*break*/\n            , 41];\n            return [4\n            /*yield*/\n            , _a.call(relations_1)];\n\n          case 40:\n            _e.sent();\n\n            _e.label = 41;\n\n          case 41:\n            return [3\n            /*break*/\n            , 43];\n\n          case 42:\n            if (e_5) throw e_5.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 43:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 44:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.clear()];\n\n          case 1:\n            _a.sent();\n\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelName, namespaceName, storeName, keys, batch, _loop_2, this_1, items_2, items_2_1, item;\n\n      var e_8, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelName = modelConstructor.name;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = getStorename(namespaceName, modelName);\n            keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n            batch = [];\n\n            _loop_2 = function (item) {\n              var model = this_1.modelInstanceCreator(modelConstructor, item);\n              var connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n              var keyValuesPath = this_1.getIndexKeyValuesPath(model);\n              var instance = connectedModels.find(function (_a) {\n                var instance = _a.instance;\n\n                var instanceKeyValuesPath = _this.getIndexKeyValuesPath(instance);\n\n                return keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n              }).instance;\n              batch.push(instance);\n            };\n\n            this_1 = this;\n\n            try {\n              for (items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n                item = items_2_1.value;\n\n                _loop_2(item);\n              }\n            } catch (e_8_1) {\n              e_8 = {\n                error: e_8_1\n              };\n            } finally {\n              try {\n                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n              } finally {\n                if (e_8) throw e_8.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.db.batchSave(storeName, batch, keys)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  return AsyncStorageAdapter;\n}();\n\nexport { AsyncStorageAdapter };\nexport default new AsyncStorageAdapter();","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","AsyncStorageDatabase","ModelPredicateCreator","isPredicateObj","OpType","QueryOne","DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR","getIndex","getIndexFromAssociation","isModelConstructor","traverseModel","validatePredicate","inMemoryPagination","keysEqual","getStorename","getIndexKeys","extractPrimaryKeyValues","IDENTIFIER_KEY_SEPARATOR","logger","AsyncStorageAdapter","modelConstructor","namespace","namespaceResolver","modelName","model","Object","getPrototypeOf","constructor","namespaceName","keys","schema","namespaces","name","getIndexKeyValuesFromModel","join","theSchema","modelInstanceCreator","getModelConstructorByModelName","initPromise","Promise","res","rej","_this","resolve","reject","_a","db","init","error_1","condition","storeName","getStorenameForModel","connectedModels","set","Set","connectionStoreNames","values","map","item","instance","add","keyValuesPath","getIndexKeyValuesPath","get","fromDB","_c","predicates","getPredicates","_b","predicateObjs","type","isValid","msg","error","Error","result","connectionStoreNames_1","resItem","storeName_1","itemKeyValues","key","itemKeyValuesPath","fromDB_1","opType","UPDATE","INSERT","modelKeyValues","save","push","srcModelName","records","relations","relationships","relationTypes","length","record","predicate","pagination","queryByKey","keyValueFromPredicate","hasSort","sort","hasPagination","limit","getByKey","filterOnPredicate","filtered","getAll","all","load","keyValuePath","keyValues","predicateObj","find","p","field","operator","operand","keys_1_1","undefined","filter","m","firstOrLast","FIRST","getOne","modelOrModelConstructor","deleteQueue","nameSpace","query","models","deleteTraverse","deleteItem","deletedModels","reduce","acc","items","concat","warn","items_1","delete","_e","srcModel","relations_1","rel","relationType","targetName","targetNames","associatedWith","index","indexes","_d","models_1","hasOneIndex_1","split","Array","isArray","hasConnectedModelFields","every","hasOwnProperty","isUnidirectionalConnection","values_1","allRecords","recordToDelete","includes","childItem","hasOneIndex_2","hasOneCustomField","value_1","models_2","indices","childrenArray","clear","batch","this_1","items_2","items_2_1","batchSave"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/storage/adapter/AsyncStorageAdapter.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { Adapter } from './index';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport { ModelPredicateCreator } from '../../predicates';\nimport {\n\tInternalSchema,\n\tisPredicateObj,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n\tRelationType,\n} from '../../types';\nimport {\n\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR,\n\tgetIndex,\n\tgetIndexFromAssociation,\n\tisModelConstructor,\n\ttraverseModel,\n\tvalidatePredicate,\n\tinMemoryPagination,\n\tNAMESPACES,\n\tkeysEqual,\n\tgetStorename,\n\tgetIndexKeys,\n\textractPrimaryKeyValues,\n\tIDENTIFIER_KEY_SEPARATOR,\n} from '../../util';\n\nconst logger = new Logger('DataStore');\n\nexport class AsyncStorageAdapter implements Adapter {\n\t// Non-null assertions (bang operators) added to most properties to make TS happy.\n\t// For now, we can be reasonably sure they're available when they're needed, because\n\t// the adapter is not used directly outside the library boundary.\n\t// TODO: rejigger for DI?\n\tprivate schema!: InternalSchema;\n\tprivate namespaceResolver!: NamespaceResolver;\n\tprivate modelInstanceCreator!: ModelInstanceCreator;\n\tprivate getModelConstructorByModelName!: (\n\t\tnamsespaceName: NAMESPACES,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>;\n\tprivate db!: AsyncStorageDatabase;\n\tprivate initPromise!: Promise<void>;\n\tprivate resolve!: (value?: any) => void;\n\tprivate reject!: (value?: any) => void;\n\n\tprivate getStorenameForModel(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t) {\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { name: modelName } = modelConstructor;\n\n\t\treturn getStorename(namespace, modelName);\n\t}\n\n\t// Retrieves primary key values from a model\n\tprivate getIndexKeyValuesFromModel<T extends PersistentModel>(\n\t\tmodel: T\n\t): string[] {\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\tconst keys = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\n\t\treturn extractPrimaryKeyValues(model, keys);\n\t}\n\n\t// Retrieves concatenated primary key values from a model\n\tprivate getIndexKeyValuesPath<T extends PersistentModel>(model: T): string {\n\t\treturn this.getIndexKeyValuesFromModel(model).join(\n\t\t\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR\n\t\t);\n\t}\n\n\tasync setUp(\n\t\ttheSchema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: NAMESPACES,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>\n\t) {\n\t\tif (!this.initPromise) {\n\t\t\tthis.initPromise = new Promise((res, rej) => {\n\t\t\t\tthis.resolve = res;\n\t\t\t\tthis.reject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initPromise;\n\t\t\treturn;\n\t\t}\n\t\tthis.schema = theSchema;\n\t\tthis.namespaceResolver = namespaceResolver;\n\t\tthis.modelInstanceCreator = modelInstanceCreator;\n\t\tthis.getModelConstructorByModelName = getModelConstructorByModelName;\n\t\ttry {\n\t\t\tif (!this.db) {\n\t\t\t\tthis.db = new AsyncStorageDatabase();\n\t\t\t\tawait this.db.init();\n\t\t\t\tthis.resolve();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reject(error);\n\t\t}\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst connectedModels = traverseModel(\n\t\t\tmodelConstructor.name,\n\t\t\tmodel,\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tthis.modelInstanceCreator,\n\t\t\tthis.getModelConstructorByModelName as any\n\t\t);\n\n\t\tconst set = new Set<string>();\n\t\tconst connectionStoreNames = Object.values(connectedModels).map(\n\t\t\t({ modelName, item, instance }) => {\n\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\tset.add(storeName);\n\t\t\t\tconst keys = getIndexKeys(\n\t\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\t\tmodelName\n\t\t\t\t);\n\t\t\t\treturn { storeName, item, instance, keys };\n\t\t\t}\n\t\t);\n\t\tconst keyValuesPath = this.getIndexKeyValuesPath(model);\n\n\t\tconst fromDB = await this.db.get(keyValuesPath, storeName);\n\n\t\tif (condition && fromDB) {\n\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\tconst { predicates: predicateObjs, type } = predicates!;\n\n\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\tif (!isValid) {\n\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance, keys } = resItem;\n\n\t\t\t/* Find the key values in the item, and concatenate them */\n\t\t\tconst itemKeyValues: string[] = keys.map(key => item[key]);\n\t\t\tconst itemKeyValuesPath: string = itemKeyValues.join(\n\t\t\t\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR\n\t\t\t);\n\n\t\t\tconst fromDB = <T>await this.db.get(itemKeyValuesPath, storeName);\n\t\t\tconst opType: OpType = fromDB ? OpType.UPDATE : OpType.INSERT;\n\t\t\tconst modelKeyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t// If item key values and model key values are equal, save to db\n\t\t\tif (\n\t\t\t\tkeysEqual(itemKeyValues, modelKeyValues) ||\n\t\t\t\topType === OpType.INSERT\n\t\t\t) {\n\t\t\t\tawait this.db.save(item, storeName, keys, itemKeyValuesPath);\n\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async load<T>(\n\t\tnamespaceName: NAMESPACES,\n\t\tsrcModelName: string,\n\t\trecords: T[]\n\t): Promise<T[]> {\n\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\tconst relations = namespace.relationships![srcModelName].relationTypes;\n\t\tconst connectionStoreNames = relations.map(({ modelName }) => {\n\t\t\treturn getStorename(namespaceName, modelName);\n\t\t});\n\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\tnamespaceName,\n\t\t\tsrcModelName\n\t\t);\n\n\t\tif (connectionStoreNames.length === 0) {\n\t\t\treturn records.map(record =>\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t\t);\n\t\t}\n\n\t\treturn records.map(record =>\n\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t);\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(\n\t\t\tmodelConstructor\n\t\t) as NAMESPACES;\n\n\t\tconst predicates =\n\t\t\tpredicate && ModelPredicateCreator.getPredicates(predicate);\n\t\tconst keys = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\t\tconst queryByKey =\n\t\t\tpredicates && this.keyValueFromPredicate(predicates, keys);\n\n\t\tconst hasSort = pagination && pagination.sort;\n\t\tconst hasPagination = pagination && pagination.limit;\n\n\t\tconst records: T[] = (await (async () => {\n\t\t\tif (queryByKey) {\n\t\t\t\tconst record = await this.getByKey(storeName, queryByKey);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort || hasPagination) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})()) as T[];\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tprivate async getByKey<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tkeyValuePath: string\n\t): Promise<T> {\n\t\tconst record = <T>await this.db.get(keyValuePath, storeName);\n\t\treturn record;\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\tprivate keyValueFromPredicate<T extends PersistentModel>(\n\t\tpredicates: PredicatesGroup<T>,\n\t\tkeys: string[]\n\t): string | undefined {\n\t\tconst { predicates: predicateObjs } = predicates;\n\n\t\tif (predicateObjs.length !== keys.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyValues = [] as any[];\n\n\t\tfor (const key of keys) {\n\t\t\tconst predicateObj = predicateObjs.find(\n\t\t\t\tp => isPredicateObj(p) && p.field === key && p.operator === 'eq'\n\t\t\t) as PredicateObject<T>;\n\n\t\t\tpredicateObj && keyValues.push(predicateObj.operand);\n\t\t}\n\n\t\treturn keyValues.length === keys.length\n\t\t\t? keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)\n\t\t\t: undefined;\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\tconst all = <T[]>await this.getAll(storeName);\n\n\t\tconst filtered = predicateObjs\n\t\t\t? all.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: all;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\treturn inMemoryPagination(records, pagination);\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst result = <T>await this.db.getOne(firstOrLast, storeName);\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T[], T[]]> {\n\t\tconst deleteQueue: { storeName: string; items: T[] }[] = [];\n\n\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\tconst modelConstructor =\n\t\t\t\tmodelOrModelConstructor as PersistentModelConstructor<T>;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor) as NAMESPACES;\n\n\t\t\t// models to be deleted.\n\t\t\tconst models = await this.query(modelConstructor, condition!);\n\t\t\t// TODO: refactor this to use a function like getRelations()\n\t\t\tconst relations =\n\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelConstructor.name]\n\t\t\t\t\t.relationTypes;\n\n\t\t\tif (condition !== undefined) {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t} else {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = modelOrModelConstructor as T;\n\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor) as NAMESPACES;\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tif (condition) {\n\t\t\t\tconst keyValuePath = this.getIndexKeyValuesPath(model);\n\n\t\t\t\tconst fromDB = await this.db.get(keyValuePath, storeName);\n\n\t\t\t\tif (fromDB === undefined) {\n\t\t\t\t\tconst msg = 'Model instance not found in storage';\n\t\t\t\t\tlogger.warn(msg, { model });\n\n\t\t\t\t\treturn [[model], []];\n\t\t\t\t}\n\n\t\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\t\tconst { predicates: predicateObjs, type } = predicates!;\n\n\t\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t<T[]>[]\n\t\t\t);\n\n\t\t\treturn [[model], deletedModels];\n\t\t}\n\t}\n\n\tprivate async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue?: { storeName: string; items: T[] | IDBValidKey[] }[]\n\t) {\n\t\tfor await (const deleteItem of deleteQueue!) {\n\t\t\tconst { storeName, items } = deleteItem;\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tconst keyValuesPath: string = this.getIndexKeyValuesPath(item as T);\n\t\t\t\t\t\tawait this.db.delete(keyValuesPath, storeName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Populates the delete Queue with all the items to delete\n\t * @param relations\n\t * @param models\n\t * @param srcModel\n\t * @param nameSpace\n\t * @param deleteQueue\n\t */\n\tprivate async deleteTraverse<T extends PersistentModel>(\n\t\trelations: RelationType[],\n\t\tmodels: T[],\n\t\tsrcModel: string,\n\t\tnameSpace: NAMESPACES,\n\t\tdeleteQueue: { storeName: string; items: T[] }[]\n\t): Promise<void> {\n\t\tfor await (const rel of relations) {\n\t\t\tconst {\n\t\t\t\trelationType,\n\t\t\t\tmodelName,\n\t\t\t\ttargetName,\n\t\t\t\ttargetNames,\n\t\t\t\tassociatedWith,\n\t\t\t} = rel;\n\t\t\tconst storeName = getStorename(nameSpace, modelName);\n\n\t\t\tconst index: string | undefined =\n\t\t\t\tgetIndex(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\tsrcModel\n\t\t\t\t) ||\n\t\t\t\t// if we were unable to find an index via relationTypes\n\t\t\t\t// i.e. for keyName connections, attempt to find one by the\n\t\t\t\t// associatedWith property\n\t\t\t\tgetIndexFromAssociation(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName].indexes,\n\t\t\t\t\trel.associatedWith!\n\t\t\t\t);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tif (targetNames && targetNames?.length) {\n\t\t\t\t\t\t\tlet hasOneIndex;\n\n\t\t\t\t\t\t\tif (index) {\n\t\t\t\t\t\t\t\thasOneIndex = index.split(IDENTIFIER_KEY_SEPARATOR);\n\t\t\t\t\t\t\t} else if (associatedWith) {\n\t\t\t\t\t\t\t\tif (Array.isArray(associatedWith)) {\n\t\t\t\t\t\t\t\t\thasOneIndex = associatedWith;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\thasOneIndex = [associatedWith];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// iterate over targetNames array and see if each key is present in model object\n\t\t\t\t\t\t\t// targetNames here being the keys for the CHILD model\n\t\t\t\t\t\t\tconst hasConnectedModelFields = targetNames.every(targetName =>\n\t\t\t\t\t\t\t\tmodel.hasOwnProperty(targetName)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// PK / Composite key for the parent model\n\t\t\t\t\t\t\tconst keyValuesPath: string = this.getIndexKeyValuesPath(model);\n\n\t\t\t\t\t\t\tlet values;\n\n\t\t\t\t\t\t\tconst isUnidirectionalConnection = hasOneIndex === associatedWith;\n\n\t\t\t\t\t\t\tif (hasConnectedModelFields && isUnidirectionalConnection) {\n\t\t\t\t\t\t\t\t// Values will be that of the child model\n\t\t\t\t\t\t\t\tvalues = targetNames\n\t\t\t\t\t\t\t\t\t.filter(targetName => model[targetName] ?? false)\n\t\t\t\t\t\t\t\t\t.map(targetName => model[targetName]) as any;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// values will be that of the parent model\n\t\t\t\t\t\t\t\tvalues = keyValuesPath.split(\n\t\t\t\t\t\t\t\t\tDEFAULT_PRIMARY_KEY_VALUE_SEPARATOR\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (values.length === 0) break;\n\n\t\t\t\t\t\t\tconst allRecords = await this.db.getAll(storeName);\n\n\t\t\t\t\t\t\tlet recordToDelete;\n\n\t\t\t\t\t\t\t// values === targetNames\n\t\t\t\t\t\t\tif (hasConnectedModelFields) {\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * Retrieve record by finding the record where all\n\t\t\t\t\t\t\t\t * targetNames are present on the connected model.\n\t\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t// recordToDelete = allRecords.filter(childItem =>\n\t\t\t\t\t\t\t\t// \tvalues.every(value => childItem[value] != null)\n\t\t\t\t\t\t\t\t// ) as T[];\n\n\t\t\t\t\t\t\t\trecordToDelete = allRecords.filter(childItem =>\n\t\t\t\t\t\t\t\t\thasOneIndex.every(index => values.includes(childItem[index]))\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// values === keyValuePath\n\t\t\t\t\t\t\t\trecordToDelete = allRecords.filter(\n\t\t\t\t\t\t\t\t\tchildItem => childItem[hasOneIndex] === values\n\t\t\t\t\t\t\t\t) as T[];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait this.deleteTraverse<T>(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete,\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst hasOneIndex = index || associatedWith;\n\t\t\t\t\t\t\tconst hasOneCustomField = targetName! in model;\n\t\t\t\t\t\t\tconst keyValuesPath: string = this.getIndexKeyValuesPath(model);\n\t\t\t\t\t\t\tconst value = hasOneCustomField\n\t\t\t\t\t\t\t\t? model[targetName!]\n\t\t\t\t\t\t\t\t: keyValuesPath;\n\n\t\t\t\t\t\t\tif (!value) break;\n\n\t\t\t\t\t\t\tconst allRecords = await this.db.getAll(storeName);\n\n\t\t\t\t\t\t\tconst recordToDelete = allRecords.filter(\n\t\t\t\t\t\t\t\tchildItem => childItem[hasOneIndex as string] === value\n\t\t\t\t\t\t\t) as T[];\n\n\t\t\t\t\t\t\tawait this.deleteTraverse<T>(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete,\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\t// Key values for the parent model:\n\t\t\t\t\t\tconst keyValues: string[] = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t\t\t\tconst allRecords = await this.db.getAll(storeName);\n\n\t\t\t\t\t\tconst indices = index!.split(IDENTIFIER_KEY_SEPARATOR);\n\n\t\t\t\t\t\tconst childrenArray = allRecords.filter(childItem =>\n\t\t\t\t\t\t\tindices.every(index => keyValues.includes(childItem[index]))\n\t\t\t\t\t\t) as T[];\n\n\t\t\t\t\t\tawait this.deleteTraverse<T>(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\tchildrenArray,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid relationType ${relationType}`);\n\t\t\t}\n\t\t}\n\n\t\tdeleteQueue.push({\n\t\t\tstoreName: getStorename(nameSpace, srcModel),\n\t\t\titems: models.map(record =>\n\t\t\t\tthis.modelInstanceCreator(\n\t\t\t\t\tthis.getModelConstructorByModelName(nameSpace, srcModel),\n\t\t\t\t\trecord\n\t\t\t\t)\n\t\t\t),\n\t\t});\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.db.clear();\n\n\t\tthis.db = undefined!;\n\t\tthis.initPromise = undefined!;\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tconst { name: modelName } = modelConstructor;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\tconst keys = getIndexKeys(this.schema.namespaces[namespaceName], modelName);\n\t\tconst batch: ModelInstanceMetadata[] = [];\n\n\t\tfor (const item of items) {\n\t\t\tconst model = this.modelInstanceCreator(modelConstructor, item);\n\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelName,\n\t\t\t\tmodel,\n\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName\n\t\t\t);\n\n\t\t\tconst keyValuesPath = this.getIndexKeyValuesPath(model);\n\n\t\t\tconst { instance } = connectedModels.find(({ instance }) => {\n\t\t\t\tconst instanceKeyValuesPath = this.getIndexKeyValuesPath(instance);\n\t\t\t\treturn keysEqual([instanceKeyValuesPath], [keyValuesPath]);\n\t\t\t})!;\n\n\t\t\tbatch.push(instance);\n\t\t}\n\n\t\treturn await this.db.batchSave(storeName, batch, keys);\n\t}\n}\n\nexport default new AsyncStorageAdapter();\n"]},"metadata":{},"sourceType":"module"}
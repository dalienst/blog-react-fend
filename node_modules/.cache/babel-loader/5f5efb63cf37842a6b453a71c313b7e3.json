{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __read } from \"tslib\";\nimport { Amplify, ConsoleLogger, Hub } from '@aws-amplify/core';\nimport { Layout as PinpointInAppMessageLayout } from '@aws-sdk/client-pinpoint';\nimport isEmpty from 'lodash/isEmpty';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar DELIVERY_TYPE = 'IN_APP_MESSAGE';\nvar eventNameMemo = {};\nvar eventAttributesMemo = {};\nvar eventMetricsMemo = {};\nexport var logger = new ConsoleLogger('AWSPinpointProvider');\nexport var dispatchInAppMessagingEvent = function (event, data, message) {\n  Hub.dispatch('inAppMessaging', {\n    event: event,\n    data: data,\n    message: message\n  }, 'InAppMessaging', AMPLIFY_SYMBOL);\n};\nexport var recordAnalyticsEvent = function (event, message) {\n  if (!message) {\n    logger.debug('Unable to record analytics event - no InAppMessage was received');\n    return;\n  }\n\n  if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n    var id = message.id,\n        metadata = message.metadata;\n    Amplify.Analytics.record({\n      name: event,\n      attributes: {\n        campaign_id: id,\n        delivery_type: DELIVERY_TYPE,\n        treatment_id: metadata === null || metadata === void 0 ? void 0 : metadata.treatmentId\n      }\n    });\n  } else {\n    logger.debug('Analytics module is not registered into Amplify');\n  }\n};\nexport var getStartOfDay = function () {\n  var now = new Date();\n  now.setHours(0, 0, 0, 0);\n  return now.toISOString();\n};\nexport var matchesEventType = function (_a, _b) {\n  var CampaignId = _a.CampaignId,\n      Schedule = _a.Schedule;\n  var eventType = _b.name;\n\n  var _c;\n\n  var EventType = ((_c = Schedule === null || Schedule === void 0 ? void 0 : Schedule.EventFilter) === null || _c === void 0 ? void 0 : _c.Dimensions).EventType;\n  var memoKey = CampaignId + \":\" + eventType;\n\n  if (!eventNameMemo.hasOwnProperty(memoKey)) {\n    eventNameMemo[memoKey] = !!(EventType === null || EventType === void 0 ? void 0 : EventType.Values.includes(eventType));\n  }\n\n  return eventNameMemo[memoKey];\n};\nexport var matchesAttributes = function (_a, _b) {\n  var CampaignId = _a.CampaignId,\n      Schedule = _a.Schedule;\n  var attributes = _b.attributes;\n\n  var _c;\n\n  var Attributes = ((_c = Schedule === null || Schedule === void 0 ? void 0 : Schedule.EventFilter) === null || _c === void 0 ? void 0 : _c.Dimensions).Attributes;\n\n  if (isEmpty(Attributes)) {\n    // if message does not have attributes defined it does not matter what attributes are on the event\n    return true;\n  }\n\n  if (isEmpty(attributes)) {\n    // if message does have attributes but the event does not then it always fails the check\n    return false;\n  }\n\n  var memoKey = CampaignId + \":\" + JSON.stringify(attributes);\n\n  if (!eventAttributesMemo.hasOwnProperty(memoKey)) {\n    eventAttributesMemo[memoKey] = Object.entries(Attributes).every(function (_a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          Values = _b[1].Values;\n\n      return Values.includes(attributes[key]);\n    });\n  }\n\n  return eventAttributesMemo[memoKey];\n};\nexport var matchesMetrics = function (_a, _b) {\n  var CampaignId = _a.CampaignId,\n      Schedule = _a.Schedule;\n  var metrics = _b.metrics;\n\n  var _c;\n\n  var Metrics = ((_c = Schedule === null || Schedule === void 0 ? void 0 : Schedule.EventFilter) === null || _c === void 0 ? void 0 : _c.Dimensions).Metrics;\n\n  if (isEmpty(Metrics)) {\n    // if message does not have metrics defined it does not matter what metrics are on the event\n    return true;\n  }\n\n  if (isEmpty(metrics)) {\n    // if message does have metrics but the event does not then it always fails the check\n    return false;\n  }\n\n  var memoKey = CampaignId + \":\" + JSON.stringify(metrics);\n\n  if (!eventMetricsMemo.hasOwnProperty(memoKey)) {\n    eventMetricsMemo[memoKey] = Object.entries(Metrics).every(function (_a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          _c = _b[1],\n          ComparisonOperator = _c.ComparisonOperator,\n          Value = _c.Value;\n\n      var compare = getComparator(ComparisonOperator); // if there is some unknown comparison operator, treat as a comparison failure\n\n      return compare ? compare(Value, metrics[key]) : false;\n    });\n  }\n\n  return eventMetricsMemo[memoKey];\n};\nexport var getComparator = function (operator) {\n  switch (operator) {\n    case 'EQUAL':\n      return function (metricsVal, eventVal) {\n        return metricsVal === eventVal;\n      };\n\n    case 'GREATER_THAN':\n      return function (metricsVal, eventVal) {\n        return metricsVal < eventVal;\n      };\n\n    case 'GREATER_THAN_OR_EQUAL':\n      return function (metricsVal, eventVal) {\n        return metricsVal <= eventVal;\n      };\n\n    case 'LESS_THAN':\n      return function (metricsVal, eventVal) {\n        return metricsVal > eventVal;\n      };\n\n    case 'LESS_THAN_OR_EQUAL':\n      return function (metricsVal, eventVal) {\n        return metricsVal >= eventVal;\n      };\n\n    default:\n      return null;\n  }\n};\nexport var isBeforeEndDate = function (_a) {\n  var Schedule = _a.Schedule;\n\n  if (!(Schedule === null || Schedule === void 0 ? void 0 : Schedule.EndDate)) {\n    return true;\n  }\n\n  return new Date() < new Date(Schedule.EndDate);\n};\nexport var isQuietTime = function (message) {\n  var Schedule = message.Schedule;\n\n  if (!(Schedule === null || Schedule === void 0 ? void 0 : Schedule.QuietTime)) {\n    return false;\n  }\n\n  var pattern = /^[0-2]\\d:[0-5]\\d$/; // basic sanity check, not a fully featured HH:MM validation\n\n  var _a = Schedule.QuietTime,\n      Start = _a.Start,\n      End = _a.End;\n\n  if (!Start || !End || Start === End || !pattern.test(Start) || !pattern.test(End)) {\n    return false;\n  }\n\n  var now = new Date();\n  var start = new Date(now);\n  var end = new Date(now);\n\n  var _b = __read(Start.split(':'), 2),\n      startHours = _b[0],\n      startMinutes = _b[1];\n\n  var _c = __read(End.split(':'), 2),\n      endHours = _c[0],\n      endMinutes = _c[1];\n\n  start.setHours(Number.parseInt(startHours, 10), Number.parseInt(startMinutes, 10), 0, 0);\n  end.setHours(Number.parseInt(endHours, 10), Number.parseInt(endMinutes, 10), 0, 0); // if quiet time includes midnight, bump the end time to the next day\n\n  if (start > end) {\n    end.setDate(end.getDate() + 1);\n  }\n\n  var isQuietTime = now >= start && now <= end;\n\n  if (isQuietTime) {\n    logger.debug('message filtered due to quiet time', message);\n  }\n\n  return isQuietTime;\n};\nexport var clearMemo = function () {\n  eventNameMemo = {};\n  eventAttributesMemo = {};\n  eventMetricsMemo = {};\n}; // in the pinpoint console when a message is created with a Modal or Full Screen layout,\n// it is assigned a layout value of MOBILE_FEED or OVERLAYS respectively in the message payload.\n// In the future, Pinpoint will be updating the layout values in the aforementioned scenario\n// to MODAL and FULL_SCREEN.\n//\n// This utility acts as a safeguard to ensure that:\n// - 1. the usage of MOBILE_FEED and OVERLAYS as values for message layouts are not leaked\n//      outside the Pinpoint provider\n// - 2. Amplify correctly handles the legacy layout values from Pinpoint after they are updated\n\nexport var interpretLayout = function (layout) {\n  if (layout === PinpointInAppMessageLayout.MOBILE_FEED) {\n    return 'MODAL';\n  }\n\n  if (layout === PinpointInAppMessageLayout.OVERLAYS) {\n    return 'FULL_SCREEN';\n  } // cast as PinpointInAppMessage['InAppMessage']['Layout'] allows `string` as a value\n\n\n  return layout;\n};\nexport var extractContent = function (_a) {\n  var message = _a.InAppMessage;\n\n  var _b, _c;\n\n  return (_c = (_b = message === null || message === void 0 ? void 0 : message.Content) === null || _b === void 0 ? void 0 : _b.map(function (content) {\n    var BackgroundColor = content.BackgroundColor,\n        BodyConfig = content.BodyConfig,\n        HeaderConfig = content.HeaderConfig,\n        ImageUrl = content.ImageUrl,\n        PrimaryBtn = content.PrimaryBtn,\n        SecondaryBtn = content.SecondaryBtn;\n    var defaultPrimaryButton = PrimaryBtn === null || PrimaryBtn === void 0 ? void 0 : PrimaryBtn.DefaultConfig;\n    var defaultSecondaryButton = SecondaryBtn === null || SecondaryBtn === void 0 ? void 0 : SecondaryBtn.DefaultConfig;\n    var extractedContent = {};\n\n    if (BackgroundColor) {\n      extractedContent.container = {\n        style: {\n          backgroundColor: BackgroundColor\n        }\n      };\n    }\n\n    if (HeaderConfig) {\n      extractedContent.header = {\n        content: HeaderConfig.Header,\n        style: {\n          color: HeaderConfig.TextColor,\n          textAlign: HeaderConfig.Alignment.toLowerCase()\n        }\n      };\n    }\n\n    if (BodyConfig) {\n      extractedContent.body = {\n        content: BodyConfig.Body,\n        style: {\n          color: BodyConfig.TextColor,\n          textAlign: BodyConfig.Alignment.toLowerCase()\n        }\n      };\n    }\n\n    if (ImageUrl) {\n      extractedContent.image = {\n        src: ImageUrl\n      };\n    }\n\n    if (defaultPrimaryButton) {\n      extractedContent.primaryButton = {\n        title: defaultPrimaryButton.Text,\n        action: defaultPrimaryButton.ButtonAction,\n        url: defaultPrimaryButton.Link,\n        style: {\n          backgroundColor: defaultPrimaryButton.BackgroundColor,\n          borderRadius: defaultPrimaryButton.BorderRadius,\n          color: defaultPrimaryButton.TextColor\n        }\n      };\n    }\n\n    if (defaultSecondaryButton) {\n      extractedContent.secondaryButton = {\n        title: defaultSecondaryButton.Text,\n        action: defaultSecondaryButton.ButtonAction,\n        url: defaultSecondaryButton.Link,\n        style: {\n          backgroundColor: defaultSecondaryButton.BackgroundColor,\n          borderRadius: defaultSecondaryButton.BorderRadius,\n          color: defaultSecondaryButton.TextColor\n        }\n      };\n    }\n\n    return extractedContent;\n  })) !== null && _c !== void 0 ? _c : [];\n};\nexport var extractMetadata = function (_a) {\n  var InAppMessage = _a.InAppMessage,\n      Priority = _a.Priority,\n      Schedule = _a.Schedule,\n      TreatmentId = _a.TreatmentId;\n  return {\n    customData: InAppMessage === null || InAppMessage === void 0 ? void 0 : InAppMessage.CustomConfig,\n    endDate: Schedule === null || Schedule === void 0 ? void 0 : Schedule.EndDate,\n    priority: Priority,\n    treatmentId: TreatmentId\n  };\n};","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Hub","Layout","PinpointInAppMessageLayout","isEmpty","AMPLIFY_SYMBOL","Symbol","for","DELIVERY_TYPE","eventNameMemo","eventAttributesMemo","eventMetricsMemo","logger","dispatchInAppMessagingEvent","event","data","message","dispatch","recordAnalyticsEvent","debug","Analytics","record","metadata","name","attributes","campaign_id","id","delivery_type","treatment_id","treatmentId","getStartOfDay","now","Date","setHours","toISOString","matchesEventType","_a","_b","CampaignId","Schedule","eventType","memoKey","hasOwnProperty","EventType","Values","includes","matchesAttributes","Attributes","JSON","stringify","Object","entries","every","key","matchesMetrics","metrics","Metrics","_c","ComparisonOperator","Value","compare","getComparator","operator","metricsVal","eventVal","isBeforeEndDate","EndDate","isQuietTime","QuietTime","pattern","Start","End","test","start","end","startHours","startMinutes","endHours","endMinutes","Number","parseInt","setDate","getDate","clearMemo","interpretLayout","layout","MOBILE_FEED","OVERLAYS","extractContent","Content","map","BodyConfig","HeaderConfig","ImageUrl","PrimaryBtn","SecondaryBtn","defaultPrimaryButton","DefaultConfig","defaultSecondaryButton","extractedContent","BackgroundColor","container","style","backgroundColor","header","content","Header","color","TextColor","textAlign","Alignment","toLowerCase","body","Body","image","src","primaryButton","title","Text","action","ButtonAction","url","Link","borderRadius","BorderRadius","secondaryButton","extractMetadata","InAppMessage","Priority","TreatmentId","customData","CustomConfig","endDate","priority"],"sources":["/home/dalienst/node_modules/@aws-amplify/notifications/src/InAppMessaging/Providers/AWSPinpointProvider/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Amplify, ConsoleLogger, Hub } from '@aws-amplify/core';\nimport {\n\tInAppMessageCampaign as PinpointInAppMessage,\n\tLayout as PinpointInAppMessageLayout,\n} from '@aws-sdk/client-pinpoint';\nimport isEmpty from 'lodash/isEmpty';\nimport {\n\tInAppMessage,\n\tInAppMessageAction,\n\tInAppMessageContent,\n\tInAppMessageLayout,\n\tInAppMessageTextAlign,\n\tInAppMessagingEvent,\n} from '../../types';\nimport { AWSPinpointMessageEvent, MetricsComparator } from './types';\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\nconst DELIVERY_TYPE = 'IN_APP_MESSAGE';\n\nlet eventNameMemo = {};\nlet eventAttributesMemo = {};\nlet eventMetricsMemo = {};\n\nexport const logger = new ConsoleLogger('AWSPinpointProvider');\n\nexport const dispatchInAppMessagingEvent = (\n\tevent: string,\n\tdata: any,\n\tmessage?: string\n) => {\n\tHub.dispatch(\n\t\t'inAppMessaging',\n\t\t{ event, data, message },\n\t\t'InAppMessaging',\n\t\tAMPLIFY_SYMBOL\n\t);\n};\n\nexport const recordAnalyticsEvent = (\n\tevent: AWSPinpointMessageEvent,\n\tmessage: InAppMessage\n) => {\n\tif (!message) {\n\t\tlogger.debug(\n\t\t\t'Unable to record analytics event - no InAppMessage was received'\n\t\t);\n\t\treturn;\n\t}\n\tif (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n\t\tconst { id, metadata } = message;\n\t\tAmplify.Analytics.record({\n\t\t\tname: event,\n\t\t\tattributes: {\n\t\t\t\tcampaign_id: id,\n\t\t\t\tdelivery_type: DELIVERY_TYPE,\n\t\t\t\ttreatment_id: metadata?.treatmentId,\n\t\t\t},\n\t\t});\n\t} else {\n\t\tlogger.debug('Analytics module is not registered into Amplify');\n\t}\n};\n\nexport const getStartOfDay = (): string => {\n\tconst now = new Date();\n\tnow.setHours(0, 0, 0, 0);\n\treturn now.toISOString();\n};\n\nexport const matchesEventType = (\n\t{ CampaignId, Schedule }: PinpointInAppMessage,\n\t{ name: eventType }: InAppMessagingEvent\n) => {\n\tconst { EventType } = Schedule?.EventFilter?.Dimensions;\n\tconst memoKey = `${CampaignId}:${eventType}`;\n\tif (!eventNameMemo.hasOwnProperty(memoKey)) {\n\t\teventNameMemo[memoKey] = !!EventType?.Values.includes(eventType);\n\t}\n\treturn eventNameMemo[memoKey];\n};\n\nexport const matchesAttributes = (\n\t{ CampaignId, Schedule }: PinpointInAppMessage,\n\t{ attributes }: InAppMessagingEvent\n): boolean => {\n\tconst { Attributes } = Schedule?.EventFilter?.Dimensions;\n\tif (isEmpty(Attributes)) {\n\t\t// if message does not have attributes defined it does not matter what attributes are on the event\n\t\treturn true;\n\t}\n\tif (isEmpty(attributes)) {\n\t\t// if message does have attributes but the event does not then it always fails the check\n\t\treturn false;\n\t}\n\tconst memoKey = `${CampaignId}:${JSON.stringify(attributes)}`;\n\tif (!eventAttributesMemo.hasOwnProperty(memoKey)) {\n\t\teventAttributesMemo[memoKey] = Object.entries(Attributes).every(\n\t\t\t([key, { Values }]) => Values.includes(attributes[key])\n\t\t);\n\t}\n\treturn eventAttributesMemo[memoKey];\n};\n\nexport const matchesMetrics = (\n\t{ CampaignId, Schedule }: PinpointInAppMessage,\n\t{ metrics }: InAppMessagingEvent\n): boolean => {\n\tconst { Metrics } = Schedule?.EventFilter?.Dimensions;\n\tif (isEmpty(Metrics)) {\n\t\t// if message does not have metrics defined it does not matter what metrics are on the event\n\t\treturn true;\n\t}\n\tif (isEmpty(metrics)) {\n\t\t// if message does have metrics but the event does not then it always fails the check\n\t\treturn false;\n\t}\n\tconst memoKey = `${CampaignId}:${JSON.stringify(metrics)}`;\n\tif (!eventMetricsMemo.hasOwnProperty(memoKey)) {\n\t\teventMetricsMemo[memoKey] = Object.entries(Metrics).every(\n\t\t\t([key, { ComparisonOperator, Value }]) => {\n\t\t\t\tconst compare = getComparator(ComparisonOperator);\n\t\t\t\t// if there is some unknown comparison operator, treat as a comparison failure\n\t\t\t\treturn compare ? compare(Value, metrics[key]) : false;\n\t\t\t}\n\t\t);\n\t}\n\treturn eventMetricsMemo[memoKey];\n};\n\nexport const getComparator = (operator: string): MetricsComparator => {\n\tswitch (operator) {\n\t\tcase 'EQUAL':\n\t\t\treturn (metricsVal, eventVal) => metricsVal === eventVal;\n\t\tcase 'GREATER_THAN':\n\t\t\treturn (metricsVal, eventVal) => metricsVal < eventVal;\n\t\tcase 'GREATER_THAN_OR_EQUAL':\n\t\t\treturn (metricsVal, eventVal) => metricsVal <= eventVal;\n\t\tcase 'LESS_THAN':\n\t\t\treturn (metricsVal, eventVal) => metricsVal > eventVal;\n\t\tcase 'LESS_THAN_OR_EQUAL':\n\t\t\treturn (metricsVal, eventVal) => metricsVal >= eventVal;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n};\n\nexport const isBeforeEndDate = ({\n\tSchedule,\n}: PinpointInAppMessage): boolean => {\n\tif (!Schedule?.EndDate) {\n\t\treturn true;\n\t}\n\treturn new Date() < new Date(Schedule.EndDate);\n};\n\nexport const isQuietTime = (message: PinpointInAppMessage): boolean => {\n\tconst { Schedule } = message;\n\tif (!Schedule?.QuietTime) {\n\t\treturn false;\n\t}\n\n\tconst pattern = /^[0-2]\\d:[0-5]\\d$/; // basic sanity check, not a fully featured HH:MM validation\n\tconst { Start, End } = Schedule.QuietTime;\n\tif (\n\t\t!Start ||\n\t\t!End ||\n\t\tStart === End ||\n\t\t!pattern.test(Start) ||\n\t\t!pattern.test(End)\n\t) {\n\t\treturn false;\n\t}\n\n\tconst now = new Date();\n\tconst start = new Date(now);\n\tconst end = new Date(now);\n\tconst [startHours, startMinutes] = Start.split(':');\n\tconst [endHours, endMinutes] = End.split(':');\n\n\tstart.setHours(\n\t\tNumber.parseInt(startHours, 10),\n\t\tNumber.parseInt(startMinutes, 10),\n\t\t0,\n\t\t0\n\t);\n\tend.setHours(\n\t\tNumber.parseInt(endHours, 10),\n\t\tNumber.parseInt(endMinutes, 10),\n\t\t0,\n\t\t0\n\t);\n\n\t// if quiet time includes midnight, bump the end time to the next day\n\tif (start > end) {\n\t\tend.setDate(end.getDate() + 1);\n\t}\n\n\tconst isQuietTime = now >= start && now <= end;\n\tif (isQuietTime) {\n\t\tlogger.debug('message filtered due to quiet time', message);\n\t}\n\treturn isQuietTime;\n};\n\nexport const clearMemo = () => {\n\teventNameMemo = {};\n\teventAttributesMemo = {};\n\teventMetricsMemo = {};\n};\n\n// in the pinpoint console when a message is created with a Modal or Full Screen layout,\n// it is assigned a layout value of MOBILE_FEED or OVERLAYS respectively in the message payload.\n// In the future, Pinpoint will be updating the layout values in the aforementioned scenario\n// to MODAL and FULL_SCREEN.\n//\n// This utility acts as a safeguard to ensure that:\n// - 1. the usage of MOBILE_FEED and OVERLAYS as values for message layouts are not leaked\n//      outside the Pinpoint provider\n// - 2. Amplify correctly handles the legacy layout values from Pinpoint after they are updated\nexport const interpretLayout = (\n\tlayout: PinpointInAppMessage['InAppMessage']['Layout']\n): InAppMessageLayout => {\n\tif (layout === PinpointInAppMessageLayout.MOBILE_FEED) {\n\t\treturn 'MODAL';\n\t}\n\n\tif (layout === PinpointInAppMessageLayout.OVERLAYS) {\n\t\treturn 'FULL_SCREEN';\n\t}\n\n\t// cast as PinpointInAppMessage['InAppMessage']['Layout'] allows `string` as a value\n\treturn layout as InAppMessageLayout;\n};\n\nexport const extractContent = ({\n\tInAppMessage: message,\n}: PinpointInAppMessage): InAppMessageContent[] => {\n\treturn (\n\t\tmessage?.Content?.map(content => {\n\t\t\tconst {\n\t\t\t\tBackgroundColor,\n\t\t\t\tBodyConfig,\n\t\t\t\tHeaderConfig,\n\t\t\t\tImageUrl,\n\t\t\t\tPrimaryBtn,\n\t\t\t\tSecondaryBtn,\n\t\t\t} = content;\n\t\t\tconst defaultPrimaryButton = PrimaryBtn?.DefaultConfig;\n\t\t\tconst defaultSecondaryButton = SecondaryBtn?.DefaultConfig;\n\t\t\tconst extractedContent: InAppMessageContent = {};\n\t\t\tif (BackgroundColor) {\n\t\t\t\textractedContent.container = {\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tbackgroundColor: BackgroundColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (HeaderConfig) {\n\t\t\t\textractedContent.header = {\n\t\t\t\t\tcontent: HeaderConfig.Header,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: HeaderConfig.TextColor,\n\t\t\t\t\t\ttextAlign:\n\t\t\t\t\t\t\tHeaderConfig.Alignment.toLowerCase() as InAppMessageTextAlign,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (BodyConfig) {\n\t\t\t\textractedContent.body = {\n\t\t\t\t\tcontent: BodyConfig.Body,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tcolor: BodyConfig.TextColor,\n\t\t\t\t\t\ttextAlign:\n\t\t\t\t\t\t\tBodyConfig.Alignment.toLowerCase() as InAppMessageTextAlign,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (ImageUrl) {\n\t\t\t\textractedContent.image = {\n\t\t\t\t\tsrc: ImageUrl,\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (defaultPrimaryButton) {\n\t\t\t\textractedContent.primaryButton = {\n\t\t\t\t\ttitle: defaultPrimaryButton.Text,\n\t\t\t\t\taction: defaultPrimaryButton.ButtonAction as InAppMessageAction,\n\t\t\t\t\turl: defaultPrimaryButton.Link,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tbackgroundColor: defaultPrimaryButton.BackgroundColor,\n\t\t\t\t\t\tborderRadius: defaultPrimaryButton.BorderRadius,\n\t\t\t\t\t\tcolor: defaultPrimaryButton.TextColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (defaultSecondaryButton) {\n\t\t\t\textractedContent.secondaryButton = {\n\t\t\t\t\ttitle: defaultSecondaryButton.Text,\n\t\t\t\t\taction: defaultSecondaryButton.ButtonAction as InAppMessageAction,\n\t\t\t\t\turl: defaultSecondaryButton.Link,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tbackgroundColor: defaultSecondaryButton.BackgroundColor,\n\t\t\t\t\t\tborderRadius: defaultSecondaryButton.BorderRadius,\n\t\t\t\t\t\tcolor: defaultSecondaryButton.TextColor,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn extractedContent;\n\t\t}) ?? []\n\t);\n};\n\nexport const extractMetadata = ({\n\tInAppMessage,\n\tPriority,\n\tSchedule,\n\tTreatmentId,\n}: PinpointInAppMessage): InAppMessage['metadata'] => ({\n\tcustomData: InAppMessage?.CustomConfig,\n\tendDate: Schedule?.EndDate,\n\tpriority: Priority,\n\ttreatmentId: TreatmentId,\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { createAuthenticatorMachine, listenToAuthHub } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.js';\n\nfunction AuthenticatorProvider(_ref) {\n  let {\n    children\n  } = _ref;\n\n  /**\n   * Based on use cases, developer might already have added another Provider\n   * outside Authenticator. In that case, we sync the two providers by just\n   * passing the parent value.\n   *\n   * TODO(BREAKING): enforce only one provider in App tree\n   */\n  const parentProviderVal = useContext(AuthenticatorContext);\n  const service = useInterpret(createAuthenticatorMachine);\n  const value = useMemo(() => !parentProviderVal ? {\n    service\n  } : parentProviderVal, [parentProviderVal, service]);\n  const {\n    service: activeService\n  } = value;\n  useEffect(() => {\n    const unsubscribe = listenToAuthHub(activeService);\n    return unsubscribe;\n  }, [activeService]);\n  return jsx(AuthenticatorContext.Provider, Object.assign({\n    value: value\n  }, {\n    children: children\n  }));\n}\n\nexport { AuthenticatorProvider as default };","map":{"version":3,"sources":["/home/dalienst/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorProvider.js"],"names":["jsx","useContext","useMemo","useEffect","useInterpret","createAuthenticatorMachine","listenToAuthHub","AuthenticatorContext","AuthenticatorProvider","children","parentProviderVal","service","value","activeService","unsubscribe","Provider","Object","assign","default"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,SAA9B,QAA+C,OAA/C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,0BAAT,EAAqCC,eAArC,QAA4D,iBAA5D;AACA,SAASC,oBAAT,QAAqC,2BAArC;;AAEA,SAASC,qBAAT,OAA8C;AAAA,MAAf;AAAEC,IAAAA;AAAF,GAAe;;AAC1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,QAAMC,iBAAiB,GAAGT,UAAU,CAACM,oBAAD,CAApC;AACA,QAAMI,OAAO,GAAGP,YAAY,CAACC,0BAAD,CAA5B;AACA,QAAMO,KAAK,GAAGV,OAAO,CAAC,MAAO,CAACQ,iBAAD,GAAqB;AAAEC,IAAAA;AAAF,GAArB,GAAmCD,iBAA3C,EAA+D,CAACA,iBAAD,EAAoBC,OAApB,CAA/D,CAArB;AACA,QAAM;AAAEA,IAAAA,OAAO,EAAEE;AAAX,MAA6BD,KAAnC;AACAT,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,WAAW,GAAGR,eAAe,CAACO,aAAD,CAAnC;AACA,WAAOC,WAAP;AACH,GAHQ,EAGN,CAACD,aAAD,CAHM,CAAT;AAIA,SAAQb,GAAG,CAACO,oBAAoB,CAACQ,QAAtB,EAAgCC,MAAM,CAACC,MAAP,CAAc;AAAEL,IAAAA,KAAK,EAAEA;AAAT,GAAd,EAAgC;AAAEH,IAAAA,QAAQ,EAAEA;AAAZ,GAAhC,CAAhC,CAAX;AACH;;AAED,SAASD,qBAAqB,IAAIU,OAAlC","sourcesContent":["import { jsx } from 'react/jsx-runtime';\nimport { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { createAuthenticatorMachine, listenToAuthHub } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.js';\n\nfunction AuthenticatorProvider({ children, }) {\n    /**\n     * Based on use cases, developer might already have added another Provider\n     * outside Authenticator. In that case, we sync the two providers by just\n     * passing the parent value.\n     *\n     * TODO(BREAKING): enforce only one provider in App tree\n     */\n    const parentProviderVal = useContext(AuthenticatorContext);\n    const service = useInterpret(createAuthenticatorMachine);\n    const value = useMemo(() => (!parentProviderVal ? { service } : parentProviderVal), [parentProviderVal, service]);\n    const { service: activeService } = value;\n    useEffect(() => {\n        const unsubscribe = listenToAuthHub(activeService);\n        return unsubscribe;\n    }, [activeService]);\n    return (jsx(AuthenticatorContext.Provider, Object.assign({ value: value }, { children: children })));\n}\n\nexport { AuthenticatorProvider as default };\n"]},"metadata":{},"sourceType":"module"}
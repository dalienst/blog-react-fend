{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __values } from \"tslib\";\nimport { API } from '@aws-amplify/api';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildGraphQLOperation, getModelAuthModes, getClientSideAuthError, getForbiddenError, predicateToGraphQLFilter, getTokenForCustomAuth } from '../utils';\nimport { USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { jitteredExponentialRetry, ConsoleLogger as Logger, Hub, NonRetryableError, BackgroundProcessManager } from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { getSyncErrorType } from './errorMaps';\nvar opResultDefaults = {\n  items: [],\n  nextToken: null,\n  startedAt: null\n};\nvar logger = new Logger('DataStore');\n\nvar SyncProcessor =\n/** @class */\nfunction () {\n  function SyncProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.runningProcesses = new BackgroundProcessManager();\n    amplifyContext.API = amplifyContext.API || API;\n    this.generateQueries();\n  }\n\n  SyncProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'LIST'), 1),\n            _b = __read(_a[0]),\n            opNameQuery = _b.slice(1);\n\n        _this.typeQuery.set(model, opNameQuery);\n      });\n    });\n  };\n\n  SyncProcessor.prototype.graphqlFilterFromPredicate = function (model) {\n    if (!this.syncPredicates) {\n      return null;\n    }\n\n    var predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n\n    if (!predicatesGroup) {\n      return null;\n    }\n\n    return predicateToGraphQLFilter(predicatesGroup);\n  };\n\n  SyncProcessor.prototype.retrievePage = function (modelDefinition, lastSync, nextToken, limit, filter, onTerminate) {\n    if (limit === void 0) {\n      limit = null;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, opName, query, variables, modelAuthModes, readAuthModes, authModeAttempts, authModeRetry, data, _b, _c, opResult, items, newNextToken, startedAt;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = __read(this.typeQuery.get(modelDefinition), 2), opName = _a[0], query = _a[1];\n            variables = {\n              limit: limit,\n              nextToken: nextToken,\n              lastSync: lastSync,\n              filter: filter\n            };\n            return [4\n            /*yield*/\n            , getModelAuthModes({\n              authModeStrategy: this.authModeStrategy,\n              defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n              modelName: modelDefinition.name,\n              schema: this.schema\n            })];\n\n          case 1:\n            modelAuthModes = _d.sent();\n            readAuthModes = modelAuthModes.READ;\n            authModeAttempts = 0;\n\n            authModeRetry = function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_1, authMode;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      if (!this.runningProcesses.isOpen) {\n                        throw new Error('sync.retreievePage termination was requested. Exiting.');\n                      }\n\n                      _b.label = 1;\n\n                    case 1:\n                      _b.trys.push([1, 3,, 5]);\n\n                      logger.debug(\"Attempting sync with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4\n                      /*yield*/\n                      , this.jitteredRetry({\n                        query: query,\n                        variables: variables,\n                        opName: opName,\n                        modelDefinition: modelDefinition,\n                        authMode: readAuthModes[authModeAttempts],\n                        onTerminate: onTerminate\n                      })];\n\n                    case 2:\n                      response = _b.sent();\n                      logger.debug(\"Sync successful with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [2\n                      /*return*/\n                      , response];\n\n                    case 3:\n                      error_1 = _b.sent();\n                      authModeAttempts++;\n\n                      if (authModeAttempts >= readAuthModes.length) {\n                        authMode = readAuthModes[authModeAttempts - 1];\n                        logger.debug(\"Sync failed with authMode: \" + authMode, error_1);\n\n                        if (getClientSideAuthError(error_1) || getForbiddenError(error_1)) {\n                          // return empty list of data so DataStore will continue to sync other models\n                          logger.warn(\"User is unauthorized to query \" + opName + \" with auth mode \" + authMode + \". No data could be returned.\");\n                          return [2\n                          /*return*/\n                          , {\n                            data: (_a = {}, _a[opName] = opResultDefaults, _a)\n                          }];\n                        }\n\n                        throw error_1;\n                      }\n\n                      logger.debug(\"Sync failed with authMode: \" + readAuthModes[authModeAttempts - 1] + \". Retrying with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4\n                      /*yield*/\n                      , authModeRetry()];\n\n                    case 4:\n                      return [2\n                      /*return*/\n                      , _b.sent()];\n\n                    case 5:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            };\n\n            return [4\n            /*yield*/\n            , authModeRetry()];\n\n          case 2:\n            data = _d.sent().data;\n            _b = data, _c = opName, opResult = _b[_c];\n            items = opResult.items, newNextToken = opResult.nextToken, startedAt = opResult.startedAt;\n            return [2\n            /*return*/\n            , {\n              nextToken: newNextToken,\n              startedAt: startedAt,\n              items: items\n            }];\n        }\n      });\n    });\n  };\n\n  SyncProcessor.prototype.jitteredRetry = function (_a) {\n    var query = _a.query,\n        variables = _a.variables,\n        opName = _a.opName,\n        modelDefinition = _a.modelDefinition,\n        authMode = _a.authMode,\n        onTerminate = _a.onTerminate;\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(function (query, variables) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var authToken, error_2, clientOrForbiddenErrorMessage, hasItems, unauthorized, otherErrors, result;\n\n                var _this = this;\n\n                var _a, _b, _c, _d;\n\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      _e.trys.push([0, 3,, 6]);\n\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 1:\n                      authToken = _e.sent();\n                      return [4\n                      /*yield*/\n                      , this.amplifyContext.API.graphql({\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken,\n                        userAgentSuffix: USER_AGENT_SUFFIX_DATASTORE\n                      })];\n\n                    case 2:\n                      return [2\n                      /*return*/\n                      , _e.sent()];\n\n                    case 3:\n                      error_2 = _e.sent();\n                      clientOrForbiddenErrorMessage = getClientSideAuthError(error_2) || getForbiddenError(error_2);\n\n                      if (clientOrForbiddenErrorMessage) {\n                        throw new NonRetryableError(clientOrForbiddenErrorMessage);\n                      }\n\n                      hasItems = Boolean((_b = (_a = error_2 === null || error_2 === void 0 ? void 0 : error_2.data) === null || _a === void 0 ? void 0 : _a[opName]) === null || _b === void 0 ? void 0 : _b.items);\n                      unauthorized = (error_2 === null || error_2 === void 0 ? void 0 : error_2.errors) && error_2.errors.some(function (err) {\n                        return err.errorType === 'Unauthorized';\n                      });\n                      otherErrors = (error_2 === null || error_2 === void 0 ? void 0 : error_2.errors) && error_2.errors.filter(function (err) {\n                        return err.errorType !== 'Unauthorized';\n                      });\n                      result = error_2;\n\n                      if (hasItems) {\n                        result.data[opName].items = result.data[opName].items.filter(function (item) {\n                          return item !== null;\n                        });\n                      }\n\n                      if (!(hasItems && (otherErrors === null || otherErrors === void 0 ? void 0 : otherErrors.length))) return [3\n                      /*break*/\n                      , 5];\n                      return [4\n                      /*yield*/\n                      , Promise.all(otherErrors.map(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var e_1;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                _a.trys.push([0, 2,, 3]);\n\n                                return [4\n                                /*yield*/\n                                , this.errorHandler({\n                                  recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                  localModel: null,\n                                  message: err.message,\n                                  model: modelDefinition.name,\n                                  operation: opName,\n                                  errorType: getSyncErrorType(err),\n                                  process: ProcessName.sync,\n                                  remoteModel: null,\n                                  cause: err\n                                })];\n\n                              case 1:\n                                _a.sent();\n\n                                return [3\n                                /*break*/\n                                , 3];\n\n                              case 2:\n                                e_1 = _a.sent();\n                                logger.error('Sync error handler failed with:', e_1);\n                                return [3\n                                /*break*/\n                                , 3];\n\n                              case 3:\n                                return [2\n                                /*return*/\n                                ];\n                            }\n                          });\n                        });\n                      }))];\n\n                    case 4:\n                      _e.sent();\n\n                      Hub.dispatch('datastore', {\n                        event: 'nonApplicableDataReceived',\n                        data: {\n                          errors: otherErrors,\n                          modelName: modelDefinition.name\n                        }\n                      });\n                      _e.label = 5;\n\n                    case 5:\n                      if (unauthorized) {\n                        logger.warn('queryError', \"User is unauthorized to query \" + opName + \", some items could not be returned.\");\n                        result.data = result.data || {};\n                        result.data[opName] = __assign(__assign({}, opResultDefaults), result.data[opName]);\n                        return [2\n                        /*return*/\n                        , result];\n                      }\n\n                      if ((_d = (_c = result.data) === null || _c === void 0 ? void 0 : _c[opName].items) === null || _d === void 0 ? void 0 : _d.length) {\n                        return [2\n                        /*return*/\n                        , result];\n                      }\n\n                      throw error_2;\n\n                    case 6:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, [query, variables], undefined, onTerminate)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  SyncProcessor.prototype.start = function (typesLastSync) {\n    var _this = this;\n\n    var _a = this.amplifyConfig,\n        maxRecordsToSync = _a.maxRecordsToSync,\n        syncPageSize = _a.syncPageSize;\n    var parentPromises = new Map();\n    var observable = new Observable(function (observer) {\n      var sortedTypesLastSyncs = Object.values(_this.schema.namespaces).reduce(function (map, namespace) {\n        var e_2, _a;\n\n        try {\n          for (var _b = __values(Array.from(namespace.modelTopologicalOrdering.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var modelName = _c.value;\n            var typeLastSync = typesLastSync.get(namespace.models[modelName]);\n            map.set(namespace.models[modelName], typeLastSync);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n\n        return map;\n      }, new Map());\n      var allModelsReady = Array.from(sortedTypesLastSyncs.entries()).filter(function (_a) {\n        var _b = __read(_a, 1),\n            syncable = _b[0].syncable;\n\n        return syncable;\n      }).map(function (_a) {\n        var _b = __read(_a, 2),\n            modelDefinition = _b[0],\n            _c = __read(_b[1], 2),\n            namespace = _c[0],\n            lastSync = _c[1];\n\n        return _this.runningProcesses.isOpen && _this.runningProcesses.add(function (onTerminate) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var done, nextToken, startedAt, items, recordsReceived, filter, parents, promises, promise;\n\n            var _this = this;\n\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  done = false;\n                  nextToken = null;\n                  startedAt = null;\n                  items = null;\n                  recordsReceived = 0;\n                  filter = this.graphqlFilterFromPredicate(modelDefinition);\n                  parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n                  promises = parents.map(function (parent) {\n                    return parentPromises.get(namespace + \"_\" + parent);\n                  });\n                  promise = new Promise(function (res) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var limit;\n\n                      var _a;\n\n                      return __generator(this, function (_b) {\n                        switch (_b.label) {\n                          case 0:\n                            return [4\n                            /*yield*/\n                            , Promise.all(promises)];\n\n                          case 1:\n                            _b.sent();\n\n                            _b.label = 2;\n\n                          case 2:\n                            if (!this.runningProcesses.isOpen) {\n                              return [2\n                              /*return*/\n                              ];\n                            }\n\n                            limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n                            return [4\n                            /*yield*/\n                            , this.retrievePage(modelDefinition, lastSync, nextToken, limit, filter, onTerminate)];\n\n                          case 3:\n                            _a = _b.sent(), items = _a.items, nextToken = _a.nextToken, startedAt = _a.startedAt;\n                            recordsReceived += items.length;\n                            done = nextToken === null || recordsReceived >= maxRecordsToSync;\n                            observer.next({\n                              namespace: namespace,\n                              modelDefinition: modelDefinition,\n                              items: items,\n                              done: done,\n                              startedAt: startedAt,\n                              isFullSync: !lastSync\n                            });\n                            _b.label = 4;\n\n                          case 4:\n                            if (!done) return [3\n                            /*break*/\n                            , 2];\n                            _b.label = 5;\n\n                          case 5:\n                            res();\n                            return [2\n                            /*return*/\n                            ];\n                        }\n                      });\n                    });\n                  });\n                  parentPromises.set(namespace + \"_\" + modelDefinition.name, promise);\n                  return [4\n                  /*yield*/\n                  , promise];\n\n                case 1:\n                  _a.sent();\n\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        }, \"adding model \" + modelDefinition.name);\n      });\n      Promise.all(allModelsReady).then(function () {\n        observer.complete();\n      });\n    });\n    return observable;\n  };\n\n  SyncProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('stopping sync processor');\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 2:\n            _a.sent();\n\n            logger.debug('sync processor stopped');\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return SyncProcessor;\n}();\n\nexport { SyncProcessor };","map":{"version":3,"mappings":"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","names":["API","Observable","ProcessName","buildGraphQLOperation","getModelAuthModes","getClientSideAuthError","getForbiddenError","predicateToGraphQLFilter","getTokenForCustomAuth","USER_AGENT_SUFFIX_DATASTORE","jitteredExponentialRetry","ConsoleLogger","Logger","Hub","NonRetryableError","BackgroundProcessManager","ModelPredicateCreator","getSyncErrorType","opResultDefaults","items","nextToken","startedAt","logger","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","WeakMap","generateQueries","SyncProcessor","Object","values","namespaces","forEach","namespace","models","filter","_a","syncable","_b","opNameQuery","_this","typeQuery","set","model","predicatesGroup","getPredicates","get","modelDefinition","lastSync","limit","onTerminate","opName","query","variables","defaultAuthMode","aws_appsync_authenticationType","modelName","name","modelAuthModes","_d","readAuthModes","READ","authModeAttempts","authModeRetry","runningProcesses","isOpen","Error","debug","jitteredRetry","authMode","response","length","error_1","warn","data","_c","opResult","newNextToken","authToken","_e","graphql","userAgentSuffix","clientOrForbiddenErrorMessage","error_2","hasItems","Boolean","unauthorized","errors","some","errorType","otherErrors","result","Promise","all","map","err","recoverySuggestion","localModel","message","operation","process","sync","remoteModel","cause","error","e_1","dispatch","event","__assign","undefined","typesLastSync","maxRecordsToSync","syncPageSize","parentPromises","Map","observable","sortedTypesLastSyncs","reduce","from","modelTopologicalOrdering","keys","typeLastSync","allModelsReady","Array","entries","add","done","recordsReceived","graphqlFilterFromPredicate","parents","promises","parent","promise","res","Math","min","retrievePage","observer","next","isFullSync","then","complete","close","open"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/sync/processors/sync.ts"],"sourcesContent":["import { API, GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport Observable from 'zen-observable-ts';\nimport {\n\tInternalSchema,\n\tModelInstanceMetadata,\n\tSchemaModel,\n\tModelPredicate,\n\tPredicatesGroup,\n\tGraphQLFilter,\n\tAuthModeStrategy,\n\tErrorHandler,\n\tProcessName,\n\tAmplifyContext,\n} from '../../types';\nimport {\n\tbuildGraphQLOperation,\n\tgetModelAuthModes,\n\tgetClientSideAuthError,\n\tgetForbiddenError,\n\tpredicateToGraphQLFilter,\n\tgetTokenForCustomAuth,\n} from '../utils';\nimport { USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport {\n\tjitteredExponentialRetry,\n\tConsoleLogger as Logger,\n\tHub,\n\tNonRetryableError,\n\tBackgroundProcessManager,\n} from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { getSyncErrorType } from './errorMaps';\nconst opResultDefaults = {\n\titems: [],\n\tnextToken: null,\n\tstartedAt: null,\n};\n\nconst logger = new Logger('DataStore');\n\nclass SyncProcessor {\n\tprivate readonly typeQuery = new WeakMap<SchemaModel, [string, string]>();\n\n\tprivate runningProcesses = new BackgroundProcessManager();\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly errorHandler: ErrorHandler,\n\t\tprivate readonly amplifyContext: AmplifyContext\n\t) {\n\t\tamplifyContext.API = amplifyContext.API || API;\n\t\tthis.generateQueries();\n\t}\n\n\tprivate generateQueries() {\n\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\tObject.values(namespace.models)\n\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t.forEach(model => {\n\t\t\t\t\tconst [[, ...opNameQuery]] = buildGraphQLOperation(\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t'LIST'\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.typeQuery.set(model, opNameQuery);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate graphqlFilterFromPredicate(model: SchemaModel): GraphQLFilter {\n\t\tif (!this.syncPredicates) {\n\t\t\treturn null!;\n\t\t}\n\t\tconst predicatesGroup: PredicatesGroup<any> =\n\t\t\tModelPredicateCreator.getPredicates(\n\t\t\t\tthis.syncPredicates.get(model)!,\n\t\t\t\tfalse\n\t\t\t)!;\n\n\t\tif (!predicatesGroup) {\n\t\t\treturn null!;\n\t\t}\n\n\t\treturn predicateToGraphQLFilter(predicatesGroup);\n\t}\n\n\tprivate async retrievePage<T extends ModelInstanceMetadata>(\n\t\tmodelDefinition: SchemaModel,\n\t\tlastSync: number,\n\t\tnextToken: string,\n\t\tlimit: number = null!,\n\t\tfilter: GraphQLFilter,\n\t\tonTerminate: Promise<void>\n\t): Promise<{ nextToken: string; startedAt: number; items: T[] }> {\n\t\tconst [opName, query] = this.typeQuery.get(modelDefinition)!;\n\n\t\tconst variables = {\n\t\t\tlimit,\n\t\t\tnextToken,\n\t\t\tlastSync,\n\t\t\tfilter,\n\t\t};\n\n\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\tdefaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n\t\t\tmodelName: modelDefinition.name,\n\t\t\tschema: this.schema,\n\t\t});\n\n\t\t// sync only needs the READ auth mode(s)\n\t\tconst readAuthModes = modelAuthModes.READ;\n\n\t\tlet authModeAttempts = 0;\n\t\tconst authModeRetry = async () => {\n\t\t\tif (!this.runningProcesses.isOpen) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'sync.retreievePage termination was requested. Exiting.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Attempting sync with authMode: ${readAuthModes[authModeAttempts]}`\n\t\t\t\t);\n\t\t\t\tconst response = await this.jitteredRetry<T>({\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\topName,\n\t\t\t\t\tmodelDefinition,\n\t\t\t\t\tauthMode: readAuthModes[authModeAttempts],\n\t\t\t\t\tonTerminate,\n\t\t\t\t});\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Sync successful with authMode: ${readAuthModes[authModeAttempts]}`\n\t\t\t\t);\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tauthModeAttempts++;\n\t\t\t\tif (authModeAttempts >= readAuthModes.length) {\n\t\t\t\t\tconst authMode = readAuthModes[authModeAttempts - 1];\n\t\t\t\t\tlogger.debug(`Sync failed with authMode: ${authMode}`, error);\n\t\t\t\t\tif (getClientSideAuthError(error) || getForbiddenError(error)) {\n\t\t\t\t\t\t// return empty list of data so DataStore will continue to sync other models\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t`User is unauthorized to query ${opName} with auth mode ${authMode}. No data could be returned.`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t[opName]: opResultDefaults,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Sync failed with authMode: ${\n\t\t\t\t\t\treadAuthModes[authModeAttempts - 1]\n\t\t\t\t\t}. Retrying with authMode: ${readAuthModes[authModeAttempts]}`\n\t\t\t\t);\n\t\t\t\treturn await authModeRetry();\n\t\t\t}\n\t\t};\n\n\t\tconst { data } = await authModeRetry();\n\n\t\tconst { [opName]: opResult } = data;\n\n\t\tconst { items, nextToken: newNextToken, startedAt } = opResult;\n\n\t\treturn {\n\t\t\tnextToken: newNextToken,\n\t\t\tstartedAt,\n\t\t\titems,\n\t\t};\n\t}\n\n\tprivate async jitteredRetry<T>({\n\t\tquery,\n\t\tvariables,\n\t\topName,\n\t\tmodelDefinition,\n\t\tauthMode,\n\t\tonTerminate,\n\t}: {\n\t\tquery: string;\n\t\tvariables: { limit: number; lastSync: number; nextToken: string };\n\t\topName: string;\n\t\tmodelDefinition: SchemaModel;\n\t\tauthMode: GRAPHQL_AUTH_MODE;\n\t\tonTerminate: Promise<void>;\n\t}): Promise<\n\t\tGraphQLResult<{\n\t\t\t[opName: string]: {\n\t\t\t\titems: T[];\n\t\t\t\tnextToken: string;\n\t\t\t\tstartedAt: number;\n\t\t\t};\n\t\t}>\n\t> {\n\t\treturn await jitteredExponentialRetry(\n\t\t\tasync (query, variables) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t);\n\n\t\t\t\t\treturn await this.amplifyContext.API.graphql({\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tvariables,\n\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\tuserAgentSuffix: USER_AGENT_SUFFIX_DATASTORE,\n\t\t\t\t\t});\n\n\t\t\t\t\t// TODO: onTerminate.then(() => API.cancel(...))\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Catch client-side (GraphQLAuthError) & 401/403 errors here so that we don't continue to retry\n\t\t\t\t\tconst clientOrForbiddenErrorMessage =\n\t\t\t\t\t\tgetClientSideAuthError(error) || getForbiddenError(error);\n\t\t\t\t\tif (clientOrForbiddenErrorMessage) {\n\t\t\t\t\t\tthrow new NonRetryableError(clientOrForbiddenErrorMessage);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst hasItems = Boolean(error?.data?.[opName]?.items);\n\n\t\t\t\t\tconst unauthorized =\n\t\t\t\t\t\terror?.errors &&\n\t\t\t\t\t\t(error.errors as [any]).some(\n\t\t\t\t\t\t\terr => err.errorType === 'Unauthorized'\n\t\t\t\t\t\t);\n\n\t\t\t\t\tconst otherErrors =\n\t\t\t\t\t\terror?.errors &&\n\t\t\t\t\t\t(error.errors as [any]).filter(\n\t\t\t\t\t\t\terr => err.errorType !== 'Unauthorized'\n\t\t\t\t\t\t);\n\n\t\t\t\t\tconst result = error;\n\n\t\t\t\t\tif (hasItems) {\n\t\t\t\t\t\tresult.data[opName].items = result.data[opName].items.filter(\n\t\t\t\t\t\t\titem => item !== null\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hasItems && otherErrors?.length) {\n\t\t\t\t\t\tawait Promise.all(\n\t\t\t\t\t\t\totherErrors.map(async err => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait this.errorHandler({\n\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\tlocalModel: null!,\n\t\t\t\t\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t\t\t\t\t\tmodel: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\toperation: opName,\n\t\t\t\t\t\t\t\t\t\terrorType: getSyncErrorType(err),\n\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.sync,\n\t\t\t\t\t\t\t\t\t\tremoteModel: null!,\n\t\t\t\t\t\t\t\t\t\tcause: err,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tlogger.error('Sync error handler failed with:', e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tHub.dispatch('datastore', {\n\t\t\t\t\t\t\tevent: 'nonApplicableDataReceived',\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\terrors: otherErrors,\n\t\t\t\t\t\t\t\tmodelName: modelDefinition.name,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (unauthorized) {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t'queryError',\n\t\t\t\t\t\t\t`User is unauthorized to query ${opName}, some items could not be returned.`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tresult.data = result.data || {};\n\n\t\t\t\t\t\tresult.data[opName] = {\n\t\t\t\t\t\t\t...opResultDefaults,\n\t\t\t\t\t\t\t...result.data[opName],\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (result.data?.[opName].items?.length) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t},\n\t\t\t[query, variables],\n\t\t\tundefined,\n\t\t\tonTerminate\n\t\t);\n\t}\n\n\tstart(\n\t\ttypesLastSync: Map<SchemaModel, [string, number]>\n\t): Observable<SyncModelPage> {\n\t\tconst { maxRecordsToSync, syncPageSize } = this.amplifyConfig;\n\t\tconst parentPromises = new Map<string, Promise<void>>();\n\t\tconst observable = new Observable<SyncModelPage>(observer => {\n\t\t\tconst sortedTypesLastSyncs = Object.values(this.schema.namespaces).reduce(\n\t\t\t\t(map, namespace) => {\n\t\t\t\t\tfor (const modelName of Array.from(\n\t\t\t\t\t\tnamespace.modelTopologicalOrdering!.keys()\n\t\t\t\t\t)) {\n\t\t\t\t\t\tconst typeLastSync = typesLastSync.get(namespace.models[modelName]);\n\t\t\t\t\t\tmap.set(namespace.models[modelName], typeLastSync!);\n\t\t\t\t\t}\n\t\t\t\t\treturn map;\n\t\t\t\t},\n\t\t\t\tnew Map<SchemaModel, [string, number]>()\n\t\t\t);\n\n\t\t\tconst allModelsReady = Array.from(sortedTypesLastSyncs.entries())\n\t\t\t\t.filter(([{ syncable }]) => syncable)\n\t\t\t\t.map(\n\t\t\t\t\t([modelDefinition, [namespace, lastSync]]) =>\n\t\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t\tthis.runningProcesses.add(async onTerminate => {\n\t\t\t\t\t\t\tlet done = false;\n\t\t\t\t\t\t\tlet nextToken: string = null!;\n\t\t\t\t\t\t\tlet startedAt: number = null!;\n\t\t\t\t\t\t\tlet items: ModelInstanceMetadata[] = null!;\n\n\t\t\t\t\t\t\tlet recordsReceived = 0;\n\t\t\t\t\t\t\tconst filter = this.graphqlFilterFromPredicate(modelDefinition);\n\n\t\t\t\t\t\t\tconst parents = this.schema.namespaces[\n\t\t\t\t\t\t\t\tnamespace\n\t\t\t\t\t\t\t].modelTopologicalOrdering!.get(modelDefinition.name);\n\t\t\t\t\t\t\tconst promises = parents!.map(parent =>\n\t\t\t\t\t\t\t\tparentPromises.get(`${namespace}_${parent}`)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tconst promise = new Promise<void>(async res => {\n\t\t\t\t\t\t\t\tawait Promise.all(promises);\n\n\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\tif (!this.runningProcesses.isOpen) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst limit = Math.min(\n\t\t\t\t\t\t\t\t\t\tmaxRecordsToSync - recordsReceived,\n\t\t\t\t\t\t\t\t\t\tsyncPageSize\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t({ items, nextToken, startedAt } = await this.retrievePage(\n\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\tlastSync,\n\t\t\t\t\t\t\t\t\t\tnextToken,\n\t\t\t\t\t\t\t\t\t\tlimit,\n\t\t\t\t\t\t\t\t\t\tfilter,\n\t\t\t\t\t\t\t\t\t\tonTerminate\n\t\t\t\t\t\t\t\t\t));\n\n\t\t\t\t\t\t\t\t\trecordsReceived += items.length;\n\n\t\t\t\t\t\t\t\t\tdone =\n\t\t\t\t\t\t\t\t\t\tnextToken === null || recordsReceived >= maxRecordsToSync;\n\n\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\t\t\tdone,\n\t\t\t\t\t\t\t\t\t\tstartedAt,\n\t\t\t\t\t\t\t\t\t\tisFullSync: !lastSync,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} while (!done);\n\n\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tparentPromises.set(\n\t\t\t\t\t\t\t\t`${namespace}_${modelDefinition.name}`,\n\t\t\t\t\t\t\t\tpromise\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tawait promise;\n\t\t\t\t\t\t}, `adding model ${modelDefinition.name}`)\n\t\t\t\t);\n\n\t\t\tPromise.all(allModelsReady as Promise<any>[]).then(() => {\n\t\t\t\tobserver.complete();\n\t\t\t});\n\t\t});\n\n\t\treturn observable;\n\t}\n\n\tasync stop() {\n\t\tlogger.debug('stopping sync processor');\n\t\tawait this.runningProcesses.close();\n\t\tawait this.runningProcesses.open();\n\t\tlogger.debug('sync processor stopped');\n\t}\n}\n\nexport type SyncModelPage = {\n\tnamespace: string;\n\tmodelDefinition: SchemaModel;\n\titems: ModelInstanceMetadata[];\n\tstartedAt: number;\n\tdone: boolean;\n\tisFullSync: boolean;\n};\n\nexport { SyncProcessor };\n"]},"metadata":{},"sourceType":"module"}
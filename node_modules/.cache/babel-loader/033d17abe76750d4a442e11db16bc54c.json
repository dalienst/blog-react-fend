{"ast":null,"code":"import { __read, __spread, __values } from \"tslib\";\n\nvar connectionTimeout = function (error) {\n  return /^Connection failed: Connection Timeout/.test(error.message);\n};\n\nvar serverError = function (error) {\n  return /^Error: Request failed with status code 5\\d\\d/.test(error.message);\n};\n\nexport var mutationErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function (error) {\n    var message = error.message;\n    return /^Cannot return \\w+ for [\\w-_]+ type/.test(message) || /^Variable '.+' has coerced Null value for NonNull type/.test(message); // newly required field, out of date client\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (error) {\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (error) {\n    return /^Request failed with status code 401/.test(error.message);\n  }\n};\nexport var subscriptionErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function () {\n    return false;\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (observableError) {\n    var error = unwrapObservableError(observableError);\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (observableError) {\n    var error = unwrapObservableError(observableError);\n    return /Connection failed.+Unauthorized/.test(error.message);\n  }\n};\nexport var syncErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function (error) {\n    return /^Cannot return \\w+ for [\\w-_]+ type/.test(error.message);\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (error) {\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function () {\n    return false;\n  }\n};\n/**\n * Get the first error reason of an observable.\n * Allows for error maps to be easily applied to observable errors\n *\n * @param observableError an error from ZenObservable subscribe error callback\n */\n\nfunction unwrapObservableError(observableError) {\n  var _a = observableError.error,\n      _b = __read((_a === void 0 ? {\n    errors: []\n  } : _a).errors, 1),\n      error = _b[0];\n\n  return error;\n}\n\nexport function getMutationErrorType(error) {\n  return mapErrorToType(mutationErrorMap, error);\n}\nexport function getSubscriptionErrorType(error) {\n  return mapErrorToType(subscriptionErrorMap, error);\n}\nexport function getSyncErrorType(error) {\n  return mapErrorToType(syncErrorMap, error);\n}\n/**\n * Categorizes an error with a broad error type, intended to make\n * customer error handling code simpler.\n * @param errorMap Error names and a list of patterns that indicate them (each pattern as a regex or function)\n * @param error The underying error to categorize.\n */\n\nexport function mapErrorToType(errorMap, error) {\n  var e_1, _a;\n\n  var errorTypes = __spread(Object.keys(errorMap));\n\n  try {\n    for (var errorTypes_1 = __values(errorTypes), errorTypes_1_1 = errorTypes_1.next(); !errorTypes_1_1.done; errorTypes_1_1 = errorTypes_1.next()) {\n      var errorType = errorTypes_1_1.value;\n      var matcher = errorMap[errorType];\n\n      if (matcher === null || matcher === void 0 ? void 0 : matcher(error)) {\n        return errorType;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (errorTypes_1_1 && !errorTypes_1_1.done && (_a = errorTypes_1.return)) _a.call(errorTypes_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return 'Unknown';\n}","map":{"version":3,"mappings":";;AAMA,IAAMA,iBAAiB,GAAG,iBAAK;AAC9B,kDAAyCC,IAAzC,CAA8CC,KAAK,CAACC,OAApD;AAA4D,CAD7D;;AAGA,IAAMC,WAAW,GAAG,iBAAK;AACxB,yDAAgDH,IAAhD,CAAqDC,KAAK,CAACC,OAA3D;AAAmE,CADpE;;AAGA,OAAO,IAAME,gBAAgB,GAAa;AACzCC,UAAQ,EAAE;AAAM;AAAK,GADoB;AAEzCC,WAAS,EAAE,iBAAK;AACP;AACR,WACC,sCAAsCN,IAAtC,CAA2CE,OAA3C,KACA,yDAAyDF,IAAzD,CAA8DE,OAA9D,CAFD,CAFe,CAKZ;AACH,GARwC;AASzCK,aAAW,EAAE;AAAM;AAAK,GATiB;AAUzCC,WAAS,EAAE,iBAAK;AAAI,4BAAiB,CAACP,KAAD,CAAjB,IAA4BE,WAAW,CAACF,KAAD,CAAvC;AAA8C,GAVzB;AAWzCQ,cAAY,EAAE,iBAAK;AAClB,kDAAuCT,IAAvC,CAA4CC,KAAK,CAACC,OAAlD;AAA0D;AAZlB,CAAnC;AAeP,OAAO,IAAMQ,oBAAoB,GAAa;AAC7CL,UAAQ,EAAE;AAAM;AAAK,GADwB;AAE7CC,WAAS,EAAE;AAAM;AAAK,GAFuB;AAG7CC,aAAW,EAAE;AAAM;AAAK,GAHqB;AAI7CC,WAAS,EAAE,2BAAe;AACzB,QAAMP,KAAK,GAAGU,qBAAqB,CAACC,eAAD,CAAnC;AACA,WAAOb,iBAAiB,CAACE,KAAD,CAAjB,IAA4BE,WAAW,CAACF,KAAD,CAA9C;AACA,GAP4C;AAQ7CQ,cAAY,EAAE,2BAAe;AAC5B,QAAMR,KAAK,GAAGU,qBAAqB,CAACC,eAAD,CAAnC;AACA,WAAO,kCAAkCZ,IAAlC,CAAuCC,KAAK,CAACC,OAA7C,CAAP;AACA;AAX4C,CAAvC;AAcP,OAAO,IAAMW,YAAY,GAAa;AACrCR,UAAQ,EAAE;AAAM;AAAK,GADgB;AAErCC,WAAS,EAAE,iBAAK;AAAI,iDAAsCN,IAAtC,CAA2CC,KAAK,CAACC,OAAjD;AAAyD,GAFxC;AAGrCK,aAAW,EAAE;AAAM;AAAK,GAHa;AAIrCC,WAAS,EAAE,iBAAK;AAAI,4BAAiB,CAACP,KAAD,CAAjB,IAA4BE,WAAW,CAACF,KAAD,CAAvC;AAA8C,GAJ7B;AAKrCQ,cAAY,EAAE;AAAM;AAAK;AALY,CAA/B;AAQP;;;;;;;AAMA,SAASE,qBAAT,CAA+BC,eAA/B,EAAmD;AAEjD;AAAA,MAASE;;AAAA,oBAAT;AAAA,MAAkBb,aAAlB;;AAKD,SAAOA,KAAP;AACA;;AAED,OAAM,SAAUc,oBAAV,CAA+Bd,KAA/B,EAA2C;AAChD,SAAOe,cAAc,CAACZ,gBAAD,EAAmBH,KAAnB,CAArB;AACA;AAED,OAAM,SAAUgB,wBAAV,CAAmChB,KAAnC,EAA+C;AACpD,SAAOe,cAAc,CAACN,oBAAD,EAAuBT,KAAvB,CAArB;AACA;AAED,OAAM,SAAUiB,gBAAV,CAA2BjB,KAA3B,EAAuC;AAC5C,SAAOe,cAAc,CAACH,YAAD,EAAeZ,KAAf,CAArB;AACA;AAED;;;;;;;AAMA,OAAM,SAAUe,cAAV,CAAyBG,QAAzB,EAA6ClB,KAA7C,EAAyD;;;AAC9D,MAAMmB,UAAU,GAAGC,SAAIC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAJ,CAAnB;;;AACA,SAAwB,yCAAUK,oCAAlC,EAAkC,oBAAlC,EAAkCA,oCAAlC,EAAoC;AAA/B,UAAMC,SAAS,uBAAf;AACJ,UAAMC,OAAO,GAAGP,QAAQ,CAACM,SAAD,CAAxB;;AACA,UAAIC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAGzB,KAAH,CAAX,EAAsB;AACrB,eAAOwB,SAAP;AACA;AACD;;;;;;;;;;;;;AACD,SAAO,SAAP;AACA","names":["connectionTimeout","test","error","message","serverError","mutationErrorMap","BadModel","BadRecord","ConfigError","Transient","Unauthorized","subscriptionErrorMap","unwrapObservableError","observableError","syncErrorMap","_b","getMutationErrorType","mapErrorToType","getSubscriptionErrorType","getSyncErrorType","errorMap","errorTypes","__spread","Object","keys","errorTypes_1_1","errorType","matcher"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/sync/processors/errorMaps.ts"],"sourcesContent":["import { ErrorType } from '../../types';\n\nexport type ErrorMap = Partial<{\n\t[key in ErrorType]: (error: Error) => boolean;\n}>;\n\nconst connectionTimeout = error =>\n\t/^Connection failed: Connection Timeout/.test(error.message);\n\nconst serverError = error =>\n\t/^Error: Request failed with status code 5\\d\\d/.test(error.message);\n\nexport const mutationErrorMap: ErrorMap = {\n\tBadModel: () => false,\n\tBadRecord: error => {\n\t\tconst { message } = error;\n\t\treturn (\n\t\t\t/^Cannot return \\w+ for [\\w-_]+ type/.test(message) ||\n\t\t\t/^Variable '.+' has coerced Null value for NonNull type/.test(message)\n\t\t); // newly required field, out of date client\n\t},\n\tConfigError: () => false,\n\tTransient: error => connectionTimeout(error) || serverError(error),\n\tUnauthorized: error =>\n\t\t/^Request failed with status code 401/.test(error.message),\n};\n\nexport const subscriptionErrorMap: ErrorMap = {\n\tBadModel: () => false,\n\tBadRecord: () => false,\n\tConfigError: () => false,\n\tTransient: observableError => {\n\t\tconst error = unwrapObservableError(observableError);\n\t\treturn connectionTimeout(error) || serverError(error);\n\t},\n\tUnauthorized: observableError => {\n\t\tconst error = unwrapObservableError(observableError);\n\t\treturn /Connection failed.+Unauthorized/.test(error.message);\n\t},\n};\n\nexport const syncErrorMap: ErrorMap = {\n\tBadModel: () => false,\n\tBadRecord: error => /^Cannot return \\w+ for [\\w-_]+ type/.test(error.message),\n\tConfigError: () => false,\n\tTransient: error => connectionTimeout(error) || serverError(error),\n\tUnauthorized: () => false,\n};\n\n/**\n * Get the first error reason of an observable.\n * Allows for error maps to be easily applied to observable errors\n *\n * @param observableError an error from ZenObservable subscribe error callback\n */\nfunction unwrapObservableError(observableError: any) {\n\tconst {\n\t\terror: { errors: [error] } = {\n\t\t\terrors: [],\n\t\t},\n\t} = observableError;\n\n\treturn error;\n}\n\nexport function getMutationErrorType(error: Error): ErrorType {\n\treturn mapErrorToType(mutationErrorMap, error);\n}\n\nexport function getSubscriptionErrorType(error: Error): ErrorType {\n\treturn mapErrorToType(subscriptionErrorMap, error);\n}\n\nexport function getSyncErrorType(error: Error): ErrorType {\n\treturn mapErrorToType(syncErrorMap, error);\n}\n\n/**\n * Categorizes an error with a broad error type, intended to make\n * customer error handling code simpler.\n * @param errorMap Error names and a list of patterns that indicate them (each pattern as a regex or function)\n * @param error The underying error to categorize.\n */\nexport function mapErrorToType(errorMap: ErrorMap, error: Error): ErrorType {\n\tconst errorTypes = [...Object.keys(errorMap)] as ErrorType[];\n\tfor (const errorType of errorTypes) {\n\t\tconst matcher = errorMap[errorType];\n\t\tif (matcher?.(error)) {\n\t\t\treturn errorType;\n\t\t}\n\t}\n\treturn 'Unknown';\n}\n"]},"metadata":{},"sourceType":"module"}
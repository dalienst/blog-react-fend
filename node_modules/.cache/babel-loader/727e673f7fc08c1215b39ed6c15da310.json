{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { NonRetryableError } from '../Util';\nvar logger = new Logger('CognitoCredentials');\nvar waitForInit = new Promise(function (res, rej) {\n  if (!browserOrNode().isBrowser) {\n    logger.debug('not in the browser, directly resolved');\n    return res();\n  }\n\n  var ga = window['gapi'] && window['gapi'].auth2 ? window['gapi'].auth2 : null;\n\n  if (ga) {\n    logger.debug('google api already loaded');\n    return res();\n  } else {\n    setTimeout(function () {\n      return res();\n    }, 2000);\n  }\n});\n\nvar GoogleOAuth =\n/** @class */\nfunction () {\n  function GoogleOAuth() {\n    this.initialized = false;\n    this.refreshGoogleToken = this.refreshGoogleToken.bind(this);\n    this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);\n  }\n\n  GoogleOAuth.prototype.refreshGoogleToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initialized) return [3\n            /*break*/\n            , 2];\n            logger.debug('need to wait for the Google SDK loaded');\n            return [4\n            /*yield*/\n            , waitForInit];\n\n          case 1:\n            _a.sent();\n\n            this.initialized = true;\n            logger.debug('finish waiting');\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , this._refreshGoogleTokenImpl()];\n        }\n      });\n    });\n  };\n\n  GoogleOAuth.prototype._refreshGoogleTokenImpl = function () {\n    var ga = null;\n    if (browserOrNode().isBrowser) ga = window['gapi'] && window['gapi'].auth2 ? window['gapi'].auth2 : null;\n\n    if (!ga) {\n      logger.debug('no gapi auth2 available');\n      return Promise.reject('no gapi auth2 available');\n    }\n\n    return new Promise(function (res, rej) {\n      ga.getAuthInstance().then(function (googleAuth) {\n        if (!googleAuth) {\n          logger.debug('google Auth undefined');\n          rej(new NonRetryableError('google Auth undefined'));\n        }\n\n        var googleUser = googleAuth.currentUser.get(); // refresh the token\n\n        if (googleUser.isSignedIn()) {\n          logger.debug('refreshing the google access token');\n          googleUser.reloadAuthResponse().then(function (authResponse) {\n            var id_token = authResponse.id_token,\n                expires_at = authResponse.expires_at;\n            res({\n              token: id_token,\n              expires_at: expires_at\n            });\n          }).catch(function (err) {\n            if (err && err.error === 'network_error') {\n              // Not using NonRetryableError so handler will be retried\n              rej('Network error reloading google auth response');\n            } else {\n              rej(new NonRetryableError('Failed to reload google auth response'));\n            }\n          });\n        } else {\n          rej(new NonRetryableError('User is not signed in with Google'));\n        }\n      }).catch(function (err) {\n        logger.debug('Failed to refresh google token', err);\n        rej(new NonRetryableError('Failed to refresh google token'));\n      });\n    });\n  };\n\n  return GoogleOAuth;\n}();\n\nexport { GoogleOAuth };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","browserOrNode","NonRetryableError","logger","waitForInit","Promise","res","rej","isBrowser","debug","ga","window","auth2","setTimeout","refreshGoogleToken","bind","_refreshGoogleTokenImpl","GoogleOAuth","initialized","_a","reject","getAuthInstance","then","googleAuth","googleUser","currentUser","get","isSignedIn","reloadAuthResponse","expires_at","token","id_token","catch","err","error"],"sources":["/home/dalienst/node_modules/@aws-amplify/core/src/OAuthHelper/GoogleOAuth.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { NonRetryableError } from '../Util';\n\nconst logger = new Logger('CognitoCredentials');\n\nconst waitForInit = new Promise((res, rej) => {\n\tif (!browserOrNode().isBrowser) {\n\t\tlogger.debug('not in the browser, directly resolved');\n\t\treturn res();\n\t}\n\tconst ga =\n\t\twindow['gapi'] && window['gapi'].auth2 ? window['gapi'].auth2 : null;\n\tif (ga) {\n\t\tlogger.debug('google api already loaded');\n\t\treturn res();\n\t} else {\n\t\tsetTimeout(() => {\n\t\t\treturn res();\n\t\t}, 2000);\n\t}\n});\n\nexport class GoogleOAuth {\n\tpublic initialized = false;\n\n\tconstructor() {\n\t\tthis.refreshGoogleToken = this.refreshGoogleToken.bind(this);\n\t\tthis._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);\n\t}\n\n\tpublic async refreshGoogleToken() {\n\t\tif (!this.initialized) {\n\t\t\tlogger.debug('need to wait for the Google SDK loaded');\n\t\t\tawait waitForInit;\n\t\t\tthis.initialized = true;\n\t\t\tlogger.debug('finish waiting');\n\t\t}\n\n\t\treturn this._refreshGoogleTokenImpl();\n\t}\n\n\tprivate _refreshGoogleTokenImpl() {\n\t\tlet ga = null;\n\t\tif (browserOrNode().isBrowser)\n\t\t\tga = window['gapi'] && window['gapi'].auth2 ? window['gapi'].auth2 : null;\n\t\tif (!ga) {\n\t\t\tlogger.debug('no gapi auth2 available');\n\t\t\treturn Promise.reject('no gapi auth2 available');\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tga.getAuthInstance()\n\t\t\t\t.then(googleAuth => {\n\t\t\t\t\tif (!googleAuth) {\n\t\t\t\t\t\tlogger.debug('google Auth undefined');\n\t\t\t\t\t\trej(new NonRetryableError('google Auth undefined'));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst googleUser = googleAuth.currentUser.get();\n\t\t\t\t\t// refresh the token\n\t\t\t\t\tif (googleUser.isSignedIn()) {\n\t\t\t\t\t\tlogger.debug('refreshing the google access token');\n\t\t\t\t\t\tgoogleUser\n\t\t\t\t\t\t\t.reloadAuthResponse()\n\t\t\t\t\t\t\t.then(authResponse => {\n\t\t\t\t\t\t\t\tconst { id_token, expires_at } = authResponse;\n\t\t\t\t\t\t\t\tres({ token: id_token, expires_at });\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\t\tif (err && err.error === 'network_error') {\n\t\t\t\t\t\t\t\t\t// Not using NonRetryableError so handler will be retried\n\t\t\t\t\t\t\t\t\trej('Network error reloading google auth response');\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\tnew NonRetryableError(\n\t\t\t\t\t\t\t\t\t\t\t'Failed to reload google auth response'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(new NonRetryableError('User is not signed in with Google'));\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tlogger.debug('Failed to refresh google token', err);\n\t\t\t\t\trej(new NonRetryableError('Failed to refresh google token'));\n\t\t\t\t});\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
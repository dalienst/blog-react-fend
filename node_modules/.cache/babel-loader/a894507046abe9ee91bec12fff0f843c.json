{"ast":null,"code":"import { __assign } from \"tslib\"; // Partition default templates\n\nvar AWS_TEMPLATE = \"polly.{region}.amazonaws.com\";\nvar AWS_CN_TEMPLATE = \"polly.{region}.amazonaws.com.cn\";\nvar AWS_ISO_TEMPLATE = \"polly.{region}.c2s.ic.gov\";\nvar AWS_ISO_B_TEMPLATE = \"polly.{region}.sc2s.sgov.gov\";\nvar AWS_US_GOV_TEMPLATE = \"polly.{region}.amazonaws.com\"; // Partition regions\n\nvar AWS_REGIONS = new Set([\"af-south-1\", \"ap-east-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-south-1\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"me-south-1\", \"sa-east-1\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\"]);\nvar AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nvar AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nvar AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nvar AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\nexport var defaultRegionInfoProvider = function (region, options) {\n  var regionInfo = undefined;\n\n  switch (region) {\n    // First, try to match exact region names.\n    case \"ap-east-1\":\n      regionInfo = {\n        hostname: \"polly.ap-east-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"ap-northeast-1\":\n      regionInfo = {\n        hostname: \"polly.ap-northeast-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"ap-northeast-2\":\n      regionInfo = {\n        hostname: \"polly.ap-northeast-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"ap-south-1\":\n      regionInfo = {\n        hostname: \"polly.ap-south-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"ap-southeast-1\":\n      regionInfo = {\n        hostname: \"polly.ap-southeast-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"polly.ap-southeast-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"ca-central-1\":\n      regionInfo = {\n        hostname: \"polly.ca-central-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"cn-northwest-1\":\n      regionInfo = {\n        hostname: \"polly.cn-northwest-1.amazonaws.com.cn\",\n        partition: \"aws-cn\"\n      };\n      break;\n\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"polly.eu-central-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"eu-north-1\":\n      regionInfo = {\n        hostname: \"polly.eu-north-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"polly.eu-west-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"eu-west-2\":\n      regionInfo = {\n        hostname: \"polly.eu-west-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"eu-west-3\":\n      regionInfo = {\n        hostname: \"polly.eu-west-3.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"fips-us-east-1\":\n      regionInfo = {\n        hostname: \"polly-fips.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-1\"\n      };\n      break;\n\n    case \"fips-us-east-2\":\n      regionInfo = {\n        hostname: \"polly-fips.us-east-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-2\"\n      };\n      break;\n\n    case \"fips-us-gov-west-1\":\n      regionInfo = {\n        hostname: \"polly-fips.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n        signingRegion: \"us-gov-west-1\"\n      };\n      break;\n\n    case \"fips-us-west-1\":\n      regionInfo = {\n        hostname: \"polly-fips.us-west-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-1\"\n      };\n      break;\n\n    case \"fips-us-west-2\":\n      regionInfo = {\n        hostname: \"polly-fips.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-2\"\n      };\n      break;\n\n    case \"me-south-1\":\n      regionInfo = {\n        hostname: \"polly.me-south-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"sa-east-1\":\n      regionInfo = {\n        hostname: \"polly.sa-east-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"polly.us-east-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"us-east-2\":\n      regionInfo = {\n        hostname: \"polly.us-east-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"us-gov-west-1\":\n      regionInfo = {\n        hostname: \"polly.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\"\n      };\n      break;\n\n    case \"us-west-1\":\n      regionInfo = {\n        hostname: \"polly.us-west-1.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"polly.us-west-2.amazonaws.com\",\n        partition: \"aws\"\n      };\n      break;\n    // Next, try to match partition endpoints.\n\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\"\n        };\n      }\n\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\"\n        };\n      }\n\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\"\n        };\n      }\n\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\"\n        };\n      }\n\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\"\n        };\n      } // Finally, assume it's an AWS partition endpoint.\n\n\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\"\n        };\n      }\n\n  }\n\n  return Promise.resolve(__assign({\n    signingService: \"polly\"\n  }, regionInfo));\n};","map":{"version":3,"mappings":"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","names":["AWS_TEMPLATE","AWS_CN_TEMPLATE","AWS_ISO_TEMPLATE","AWS_ISO_B_TEMPLATE","AWS_US_GOV_TEMPLATE","AWS_REGIONS","Set","AWS_CN_REGIONS","AWS_ISO_REGIONS","AWS_ISO_B_REGIONS","AWS_US_GOV_REGIONS","defaultRegionInfoProvider","region","options","regionInfo","undefined","hostname","partition","signingRegion","has","replace","Promise","resolve","__assign","signingService"],"sources":["/home/dalienst/node_modules/@aws-sdk/client-polly/endpoints.ts"],"sourcesContent":["import { RegionInfo, RegionInfoProvider } from \"@aws-sdk/types\";\n\n// Partition default templates\nconst AWS_TEMPLATE = \"polly.{region}.amazonaws.com\";\nconst AWS_CN_TEMPLATE = \"polly.{region}.amazonaws.com.cn\";\nconst AWS_ISO_TEMPLATE = \"polly.{region}.c2s.ic.gov\";\nconst AWS_ISO_B_TEMPLATE = \"polly.{region}.sc2s.sgov.gov\";\nconst AWS_US_GOV_TEMPLATE = \"polly.{region}.amazonaws.com\";\n\n// Partition regions\nconst AWS_REGIONS = new Set([\n  \"af-south-1\",\n  \"ap-east-1\",\n  \"ap-northeast-1\",\n  \"ap-northeast-2\",\n  \"ap-south-1\",\n  \"ap-southeast-1\",\n  \"ap-southeast-2\",\n  \"ca-central-1\",\n  \"eu-central-1\",\n  \"eu-north-1\",\n  \"eu-south-1\",\n  \"eu-west-1\",\n  \"eu-west-2\",\n  \"eu-west-3\",\n  \"me-south-1\",\n  \"sa-east-1\",\n  \"us-east-1\",\n  \"us-east-2\",\n  \"us-west-1\",\n  \"us-west-2\",\n]);\nconst AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nconst AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nconst AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nconst AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\n\nexport const defaultRegionInfoProvider: RegionInfoProvider = (region: string, options?: any) => {\n  let regionInfo: RegionInfo | undefined = undefined;\n  switch (region) {\n    // First, try to match exact region names.\n    case \"ap-east-1\":\n      regionInfo = {\n        hostname: \"polly.ap-east-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-northeast-1\":\n      regionInfo = {\n        hostname: \"polly.ap-northeast-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-northeast-2\":\n      regionInfo = {\n        hostname: \"polly.ap-northeast-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-south-1\":\n      regionInfo = {\n        hostname: \"polly.ap-south-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-southeast-1\":\n      regionInfo = {\n        hostname: \"polly.ap-southeast-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"polly.ap-southeast-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"ca-central-1\":\n      regionInfo = {\n        hostname: \"polly.ca-central-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"cn-northwest-1\":\n      regionInfo = {\n        hostname: \"polly.cn-northwest-1.amazonaws.com.cn\",\n        partition: \"aws-cn\",\n      };\n      break;\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"polly.eu-central-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"eu-north-1\":\n      regionInfo = {\n        hostname: \"polly.eu-north-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"polly.eu-west-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"eu-west-2\":\n      regionInfo = {\n        hostname: \"polly.eu-west-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"eu-west-3\":\n      regionInfo = {\n        hostname: \"polly.eu-west-3.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"fips-us-east-1\":\n      regionInfo = {\n        hostname: \"polly-fips.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-1\",\n      };\n      break;\n    case \"fips-us-east-2\":\n      regionInfo = {\n        hostname: \"polly-fips.us-east-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-2\",\n      };\n      break;\n    case \"fips-us-gov-west-1\":\n      regionInfo = {\n        hostname: \"polly-fips.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n        signingRegion: \"us-gov-west-1\",\n      };\n      break;\n    case \"fips-us-west-1\":\n      regionInfo = {\n        hostname: \"polly-fips.us-west-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-1\",\n      };\n      break;\n    case \"fips-us-west-2\":\n      regionInfo = {\n        hostname: \"polly-fips.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-2\",\n      };\n      break;\n    case \"me-south-1\":\n      regionInfo = {\n        hostname: \"polly.me-south-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"sa-east-1\":\n      regionInfo = {\n        hostname: \"polly.sa-east-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"polly.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"us-east-2\":\n      regionInfo = {\n        hostname: \"polly.us-east-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"us-gov-west-1\":\n      regionInfo = {\n        hostname: \"polly.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n      };\n      break;\n    case \"us-west-1\":\n      regionInfo = {\n        hostname: \"polly.us-west-1.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"polly.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n      };\n      break;\n    // Next, try to match partition endpoints.\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n        };\n      }\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\",\n        };\n      }\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\",\n        };\n      }\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\",\n        };\n      }\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\",\n        };\n      }\n      // Finally, assume it's an AWS partition endpoint.\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n        };\n      }\n  }\n  return Promise.resolve({ signingService: \"polly\", ...regionInfo });\n};\n"]},"metadata":{},"sourceType":"module"}
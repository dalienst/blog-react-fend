{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\nexport var constructStack = function () {\n  var absoluteEntries = [];\n  var relativeEntries = [];\n  var entriesNameSet = new Set();\n\n  var sort = function (entries) {\n    return entries.sort(function (a, b) {\n      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"];\n    });\n  };\n\n  var removeByName = function (toRemove) {\n    var isRemoved = false;\n\n    var filterCb = function (entry) {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n\n      return true;\n    };\n\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  var removeByReference = function (toRemove) {\n    var isRemoved = false;\n\n    var filterCb = function (entry) {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n\n      return true;\n    };\n\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  var cloneTo = function (toStack) {\n    absoluteEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.add(entry.middleware, __assign({}, entry));\n    });\n    relativeEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, __assign({}, entry));\n    });\n    return toStack;\n  };\n\n  var expandRelativeMiddlewareList = function (from) {\n    var expandedMiddlewareList = [];\n    from.before.forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n\n\n  var getMiddlewareList = function () {\n    var normalizedAbsoluteEntries = [];\n    var normalizedRelativeEntries = [];\n    var normalizedEntriesNameMap = {};\n    absoluteEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n    relativeEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n    normalizedRelativeEntries.forEach(function (entry) {\n      if (entry.toMiddleware) {\n        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n\n        if (toMiddleware === undefined) {\n          throw new Error(entry.toMiddleware + \" is not found when adding \" + (entry.name || \"anonymous\") + \" middleware \" + entry.relation + \" \" + entry.toMiddleware);\n        }\n\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function (wholeList, expendedMiddlewareList) {\n      // TODO: Replace it with Array.flat();\n      wholeList.push.apply(wholeList, __spread(expendedMiddlewareList));\n      return wholeList;\n    }, []);\n    return mainChain.map(function (entry) {\n      return entry.middleware;\n    });\n  };\n\n  var stack = {\n    add: function (middleware, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var name = options.name,\n          override = options.override;\n\n      var entry = __assign({\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware: middleware\n      }, options);\n\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = absoluteEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = absoluteEntries[toOverrideIndex];\n\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware with \" + toOverride.priority + \" priority in \" + toOverride.step + \" step cannot be \" + (\"overridden by same-name middleware with \" + entry.priority + \" priority in \" + entry.step + \" step.\"));\n          }\n\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n\n        entriesNameSet.add(name);\n      }\n\n      absoluteEntries.push(entry);\n    },\n    addRelativeTo: function (middleware, options) {\n      var name = options.name,\n          override = options.override;\n\n      var entry = __assign({\n        middleware: middleware\n      }, options);\n\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = relativeEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = relativeEntries[toOverrideIndex];\n\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware \" + toOverride.relation + \" \\\"\" + toOverride.toMiddleware + \"\\\" middleware cannot be overridden \" + (\"by same-name middleware \" + entry.relation + \" \\\"\" + entry.toMiddleware + \"\\\" middleware.\"));\n          }\n\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n\n        entriesNameSet.add(name);\n      }\n\n      relativeEntries.push(entry);\n    },\n    clone: function () {\n      return cloneTo(constructStack());\n    },\n    use: function (plugin) {\n      plugin.applyToStack(stack);\n    },\n    remove: function (toRemove) {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);else return removeByReference(toRemove);\n    },\n    removeByTag: function (toRemove) {\n      var isRemoved = false;\n\n      var filterCb = function (entry) {\n        var tags = entry.tags,\n            name = entry.name;\n\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n\n        return true;\n      };\n\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n    concat: function (from) {\n      var cloned = cloneTo(constructStack());\n      cloned.use(from);\n      return cloned;\n    },\n    applyToStack: cloneTo,\n    resolve: function (handler, context) {\n      var e_1, _a;\n\n      try {\n        for (var _b = __values(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var middleware = _c.value;\n          handler = middleware(handler, context);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return handler;\n    }\n  };\n  return stack;\n};\nvar stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nvar priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":{"version":3,"mappings":"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","names":["constructStack","absoluteEntries","relativeEntries","entriesNameSet","Set","sort","entries","a","b","step","stepWeights","priorityWeights","priority","removeByName","toRemove","isRemoved","filterCb","entry","name","delete","filter","removeByReference","middleware","cloneTo","toStack","forEach","add","__assign","addRelativeTo","expandRelativeMiddlewareList","from","expandedMiddlewareList","before","length","after","push","apply","__spread","reverse","getMiddlewareList","normalizedAbsoluteEntries","normalizedRelativeEntries","normalizedEntriesNameMap","normalizedEntry","toMiddleware","undefined","Error","relation","mainChain","map","reduce","wholeList","expendedMiddlewareList","stack","options","override","has","toOverrideIndex","findIndex","toOverride","splice","clone","use","plugin","applyToStack","remove","removeByTag","tags","includes","concat","cloned","resolve","handler","context","_c","initialize","serialize","build","finalizeRequest","deserialize","high","normal","low"],"sources":["/home/dalienst/node_modules/@aws-sdk/middleware-stack/src/MiddlewareStack.ts"],"sourcesContent":["import {\n  AbsoluteLocation,\n  DeserializeHandler,\n  Handler,\n  HandlerExecutionContext,\n  HandlerOptions,\n  MiddlewareStack,\n  MiddlewareType,\n  Pluggable,\n  Priority,\n  RelativeLocation,\n  Step,\n} from \"@aws-sdk/types\";\n\nimport { AbsoluteMiddlewareEntry, MiddlewareEntry, Normalized, RelativeMiddlewareEntry } from \"./types\";\n\nexport const constructStack = <Input extends object, Output extends object>(): MiddlewareStack<Input, Output> => {\n  let absoluteEntries: AbsoluteMiddlewareEntry<Input, Output>[] = [];\n  let relativeEntries: RelativeMiddlewareEntry<Input, Output>[] = [];\n  const entriesNameSet: Set<string> = new Set();\n\n  const sort = <T extends AbsoluteMiddlewareEntry<Input, Output>>(entries: T[]): T[] =>\n    entries.sort(\n      (a, b) =>\n        stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]\n    );\n\n  const removeByName = (toRemove: string): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const removeByReference = (toRemove: MiddlewareType<Input, Output>): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const cloneTo = <InputType extends Input, OutputType extends Output>(\n    toStack: MiddlewareStack<InputType, OutputType>\n  ): MiddlewareStack<InputType, OutputType> => {\n    absoluteEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.add(entry.middleware, { ...entry });\n    });\n    relativeEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, { ...entry });\n    });\n    return toStack;\n  };\n\n  const expandRelativeMiddlewareList = (\n    from: Normalized<MiddlewareEntry<Input, Output>, Input, Output>\n  ): MiddlewareEntry<Input, Output>[] => {\n    const expandedMiddlewareList: MiddlewareEntry<Input, Output>[] = [];\n    from.before.forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n  const getMiddlewareList = (): Array<MiddlewareType<Input, Output>> => {\n    const normalizedAbsoluteEntries: Normalized<AbsoluteMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedRelativeEntries: Normalized<RelativeMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedEntriesNameMap: {\n      [middlewareName: string]: Normalized<MiddlewareEntry<Input, Output>, Input, Output>;\n    } = {};\n\n    absoluteEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n\n    relativeEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n\n    normalizedRelativeEntries.forEach((entry) => {\n      if (entry.toMiddleware) {\n        const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          throw new Error(\n            `${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${\n              entry.toMiddleware\n            }`\n          );\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n\n    const mainChain = sort(normalizedAbsoluteEntries)\n      .map(expandRelativeMiddlewareList)\n      .reduce((wholeList, expendedMiddlewareList) => {\n        // TODO: Replace it with Array.flat();\n        wholeList.push(...expendedMiddlewareList);\n        return wholeList;\n      }, [] as MiddlewareEntry<Input, Output>[]);\n    return mainChain.map((entry) => entry.middleware);\n  };\n\n  const stack = {\n    add: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & AbsoluteLocation = {}) => {\n      const { name, override } = options;\n      const entry: AbsoluteMiddlewareEntry<Input, Output> = {\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n          const toOverride = absoluteEntries[toOverrideIndex];\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\n              `\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`\n            );\n          }\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      absoluteEntries.push(entry);\n    },\n\n    addRelativeTo: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & RelativeLocation) => {\n      const { name, override } = options;\n      const entry: RelativeMiddlewareEntry<Input, Output> = {\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n          const toOverride = relativeEntries[toOverrideIndex];\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\n              `\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`\n            );\n          }\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      relativeEntries.push(entry);\n    },\n\n    clone: () => cloneTo(constructStack<Input, Output>()),\n\n    use: (plugin: Pluggable<Input, Output>) => {\n      plugin.applyToStack(stack);\n    },\n\n    remove: (toRemove: MiddlewareType<Input, Output> | string): boolean => {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);\n      else return removeByReference(toRemove);\n    },\n\n    removeByTag: (toRemove: string): boolean => {\n      let isRemoved = false;\n      const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n        const { tags, name } = entry;\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n\n    concat: <InputType extends Input, OutputType extends Output>(\n      from: MiddlewareStack<InputType, OutputType>\n    ): MiddlewareStack<InputType, OutputType> => {\n      const cloned = cloneTo(constructStack<InputType, OutputType>());\n      cloned.use(from);\n      return cloned;\n    },\n\n    applyToStack: cloneTo,\n\n    resolve: <InputType extends Input, OutputType extends Output>(\n      handler: DeserializeHandler<InputType, OutputType>,\n      context: HandlerExecutionContext\n    ): Handler<InputType, OutputType> => {\n      for (const middleware of getMiddlewareList().reverse()) {\n        handler = middleware(handler as Handler<Input, OutputType>, context) as any;\n      }\n      return handler as Handler<InputType, OutputType>;\n    },\n  };\n  return stack;\n};\n\nconst stepWeights: { [key in Step]: number } = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1,\n};\n\nconst priorityWeights: { [key in Priority]: number } = {\n  high: 3,\n  normal: 2,\n  low: 1,\n};\n"]},"metadata":{},"sourceType":"module"}
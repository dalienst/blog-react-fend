{"ast":null,"code":"/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nconst ChangeCase = require('change-case');\n\nconst reduce = function (obj, f, accumulator_init) {\n  return Object.keys(obj || {}).reduce((accumulator, key) => {\n    let value = obj[key];\n    return f(accumulator, value, key, obj);\n  }, accumulator_init);\n};\n\nconst forEach = function (obj, f) {\n  Object.keys(obj || {}).forEach(key => {\n    let value = obj[key];\n    f(value, key);\n  });\n}; // Note: This is a crappy version to a certain extent... don't use with Strings, for example...\n\n\nconst clone = function (object) {\n  return Object.assign(new object.constructor(), object);\n};\n\nconst cloneDeep = function (obj) {\n  if (obj === null || obj === undefined || typeof obj !== 'object') {\n    return obj;\n  }\n\n  if (obj instanceof Array) {\n    return obj.reduce((arr, item, i) => {\n      arr[i] = cloneDeep(item);\n      return arr;\n    }, []);\n  }\n\n  if (obj instanceof Object) {\n    return Object.keys(obj || {}).reduce((cpObj, key) => {\n      cpObj[key] = cloneDeep(obj[key]);\n      return cpObj;\n    }, {});\n  }\n};\n\nconst isObject = function (value) {\n  const type = typeof value;\n  return value != null && (type === 'object' || type === 'function');\n};\n\nconst isString = function (obj) {\n  return typeof obj === 'string' || obj instanceof String;\n};\n\nconst isArray = function (obj) {\n  return Array.isArray(obj);\n};\n\nconst isEmpty = function (obj) {\n  return [Object, Array].includes((obj || {}).constructor) && !Object.entries(obj || {}).length;\n};\n\nfunction isPlainObject(value) {\n  if (typeof value !== 'object' || value === null || Object.prototype.toString.call(value) !== '[object Object]') {\n    return false;\n  }\n\n  if (Object.getPrototypeOf(value) === null) {\n    return true;\n  }\n\n  let proto = value;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(value) === proto;\n}\n\nconst filter = function (arr, filter) {\n  if (typeof filter !== 'function') {\n    throw \"filter is not a function\";\n  }\n\n  if (typeof arr === 'undefined') {\n    return [];\n  }\n\n  return arr.filter(filter);\n};\n\nconst assign = function () {\n  let args = Array.prototype.slice.call(arguments);\n  args.unshift({});\n  return Object.assign(...args);\n};\n/* global Set */\n\n\nconst pull = function (arr) {\n  for (var _len = arguments.length, removeList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    removeList[_key - 1] = arguments[_key];\n  }\n\n  var removeSet = new Set(removeList);\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (removeSet.has(arr[i])) {\n      arr.splice(i, 1);\n    }\n  }\n};\n\nconst unique = function (arr) {\n  return [...new Set(arr)];\n};\n\nconst upperFirst = function (str) {\n  return str ? str[0].toUpperCase() + str.substr(1) : '';\n};\n\nconst matchFn = function (inputObj, testObj) {\n  if (isObject(testObj)) {\n    return Object.keys(testObj).every(key => matchFn(inputObj[key], testObj[key]));\n  } else {\n    return inputObj == testObj;\n  }\n};\n\nconst matches = function (matchObj) {\n  let cloneObj = cloneDeep(matchObj);\n\n  let matchesFn = inputObj => matchFn(inputObj, cloneObj);\n\n  return matchesFn;\n};\n\nconst DEFAULT_OPTIONS = {\n  transform: ChangeCase.camelCaseTransformMerge\n};\n\nconst changeDefaultCaseTransform = function (caseFunction, default_options) {\n  return (caseToChange, options) => caseFunction(caseToChange, Object.assign({}, DEFAULT_OPTIONS, default_options, options));\n};\n\nmodule.exports = {\n  each: forEach,\n  forEach: forEach,\n  forIn: forEach,\n  keys: Object.keys,\n  clone: clone,\n  cloneDeep: cloneDeep,\n  extend: Object.assign,\n  isString: isString,\n  isArray: isArray,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isEmpty: isEmpty,\n  filter: filter,\n  reduce: reduce,\n  assign: assign,\n  upperFirst: upperFirst,\n  camelCase: changeDefaultCaseTransform(ChangeCase.camelCase),\n  snakeCase: ChangeCase.snakeCase,\n  kebabCase: ChangeCase.paramCase,\n  pull: pull,\n  matches: matches,\n  unique: unique\n};","map":{"version":3,"sources":["/home/dalienst/node_modules/style-dictionary/lib/utils/es6_.js"],"names":["ChangeCase","require","reduce","obj","f","accumulator_init","Object","keys","accumulator","key","value","forEach","clone","object","assign","constructor","cloneDeep","undefined","Array","arr","item","i","cpObj","isObject","type","isString","String","isArray","isEmpty","includes","entries","length","isPlainObject","prototype","toString","call","getPrototypeOf","proto","filter","args","slice","arguments","unshift","pull","removeList","removeSet","Set","has","splice","unique","upperFirst","str","toUpperCase","substr","matchFn","inputObj","testObj","every","matches","matchObj","cloneObj","matchesFn","DEFAULT_OPTIONS","transform","camelCaseTransformMerge","changeDefaultCaseTransform","caseFunction","default_options","caseToChange","options","module","exports","each","forIn","extend","camelCase","snakeCase","kebabCase","paramCase"],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nconst ChangeCase = require('change-case')\n\nconst reduce = function(obj, f, accumulator_init) {\n  return Object.keys(obj || {}).reduce((accumulator, key) => {\n    let value = obj[key]\n    return f(accumulator, value, key, obj)\n  }, accumulator_init)\n}\n\nconst forEach = function(obj, f) {\n  Object.keys(obj || {}).forEach((key) => {\n    let value = obj[key]\n    f(value, key)\n  });\n}\n\n// Note: This is a crappy version to a certain extent... don't use with Strings, for example...\nconst clone = function(object) {\n  return Object.assign(new object.constructor(), object)\n}\n\nconst cloneDeep = function(obj) {\n  if(obj === null || obj === undefined || typeof obj !== 'object') {\n    return obj\n  }\n\n  if(obj instanceof Array) {\n    return obj.reduce((arr, item, i) => {\n      arr[i] = cloneDeep(item)\n      return arr\n    }, [])\n  }\n\n  if(obj instanceof Object) {\n    return Object.keys(obj || {}).reduce((cpObj, key) => {\n      cpObj[key] = cloneDeep(obj[key])\n      return cpObj\n    }, {})\n  }\n}\n\nconst isObject = function(value) {\n  const type = typeof value\n  return value != null && (type === 'object' || type === 'function')\n}\n\nconst isString = function(obj) {\n  return typeof obj === 'string' || obj instanceof String\n}\n\nconst isArray = function(obj) {\n  return Array.isArray(obj)\n}\n\nconst isEmpty = function(obj) {\n  return [Object, Array].includes((obj || {}).constructor) && !Object.entries((obj || {})).length\n}\n\nfunction isPlainObject(value) {\n  if (typeof value !== 'object' || value === null || Object.prototype.toString.call(value) !== '[object Object]') {\n    return false\n  }\n  if (Object.getPrototypeOf(value) === null) {\n    return true\n  }\n  let proto = value\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n  return Object.getPrototypeOf(value) === proto\n}\n\nconst filter = function (arr, filter) {\n  if (typeof(filter) !== 'function') {\n    throw(\"filter is not a function\")\n  }\n  if (typeof arr === 'undefined') {\n    return []\n  }\n  return arr.filter(filter)\n}\n\nconst assign = function () {\n  let args = Array.prototype.slice.call(arguments)\n  args.unshift({})\n  return Object.assign(...args)\n}\n\n/* global Set */\nconst pull = function (arr, ...removeList){\n  var removeSet = new Set(removeList)\n  for (let i=arr.length-1;i>=0;i--) {\n      if (removeSet.has(arr[i])) {\n        arr.splice(i, 1)\n      }\n  }\n}\n\nconst unique = function (arr){\n  return [...new Set(arr)]\n}\n\nconst upperFirst = function (str) {\n  return str ? str[0].toUpperCase() + str.substr(1) : ''\n}\n\nconst matchFn = function(inputObj, testObj) {\n  if (isObject(testObj)) {\n    return Object.keys(testObj).every((key) => matchFn(inputObj[key], testObj[key]))\n  }\n  else {\n    return inputObj == testObj\n  }\n}\n\nconst matches = function (matchObj) {\n  let cloneObj = cloneDeep(matchObj)\n  let matchesFn = (inputObj) => matchFn(inputObj, cloneObj)\n  return matchesFn\n}\n\nconst DEFAULT_OPTIONS = {\n  transform: ChangeCase.camelCaseTransformMerge\n}\nconst changeDefaultCaseTransform = function (caseFunction, default_options) {\n  return (caseToChange, options) => caseFunction(caseToChange, Object.assign({}, DEFAULT_OPTIONS, default_options, options))\n}\n\nmodule.exports = {\n  each: forEach,\n  forEach: forEach,\n  forIn: forEach,\n  keys: Object.keys,\n  clone: clone,\n  cloneDeep: cloneDeep,\n  extend: Object.assign,\n  isString: isString,\n  isArray: isArray,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isEmpty: isEmpty,\n  filter: filter,\n  reduce: reduce,\n  assign: assign,\n  upperFirst: upperFirst,\n  camelCase: changeDefaultCaseTransform(ChangeCase.camelCase),\n  snakeCase: ChangeCase.snakeCase,\n  kebabCase: ChangeCase.paramCase,\n  pull: pull,\n  matches: matches,\n  unique: unique,\n}\n"]},"metadata":{},"sourceType":"script"}
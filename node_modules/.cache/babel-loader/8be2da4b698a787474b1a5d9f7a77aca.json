{"ast":null,"code":"import { __awaiter, __generator, __rest } from \"tslib\";\nexport var loggerMiddleware = function () {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              response = _b.sent();\n\n              if (!logger) {\n                return [2\n                /*return*/\n                , response];\n              }\n\n              if (typeof logger.info === \"function\") {\n                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, [\"$metadata\"]);\n                logger.info({\n                  clientName: clientName,\n                  commandName: commandName,\n                  input: inputFilterSensitiveLog(args.input),\n                  output: outputFilterSensitiveLog(outputWithoutMetadata),\n                  metadata: $metadata\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    };\n  };\n};\nexport var loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport var getLoggerPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAYA,OAAO,IAAMA,gBAAgB,GAAG;AAAM,mBACpCC,IADoC,EAEpCC,OAFoC,EAEJ;AACG,qBACnCC,IADmC,EACE;AAAA;;;;;;AAE7BC,wBAAU,GAA6EF,OAAO,WAA9F,EAAYG,WAAW,GAAgEH,OAAO,YAA9F,EAAyBI,uBAAuB,GAAuCJ,OAAO,wBAA9F,EAAkDK,MAAM,GAA+BL,OAAO,OAA9F,EAA0DM,wBAAwB,GAAKN,OAAO,yBAA9F;AAES;AAAA;AAAA,gBAAMD,IAAI,CAACE,IAAD,CAAV;;;AAAXM,sBAAQ,GAAGC,SAAX;;AAEN,kBAAI,CAACH,MAAL,EAAa;AACX;AAAA;AAAA,kBAAOE,QAAP;AACD;;AAED,kBAAI,OAAOF,MAAM,CAACI,IAAd,KAAuB,UAA3B,EAAuC;AAC/BC,qBAA0CH,QAAQ,CAACI,MAAnD,EAAEC,SAAS,eAAX,EAAgBC,qBAAqB,cAArC,aAAqC,CAArC;AACNR,sBAAM,CAACI,IAAP,CAAY;AACVP,4BAAU,YADA;AAEVC,6BAAW,aAFD;AAGVW,uBAAK,EAAEV,uBAAuB,CAACH,IAAI,CAACa,KAAN,CAHpB;AAIVH,wBAAM,EAAEL,wBAAwB,CAACO,qBAAD,CAJtB;AAKVE,0BAAQ,EAAEH;AALA,iBAAZ;AAOD;;AAED;AAAA;AAAA,gBAAOL,QAAP;;;OArBqC;AAsBtC,KAvBoC;AAuBpC,GA1BqC;AA0BrC,CA1BM;AA4BP,OAAO,IAAMS,uBAAuB,GAAgD;AAClFC,MAAI,EAAE,kBAD4E;AAElFC,MAAI,EAAE,CAAC,QAAD,CAF4E;AAGlFC,MAAI,EAAE,YAH4E;AAIlFC,UAAQ,EAAE;AAJwE,CAA7E,C,CAOP;;AACA,OAAO,IAAMC,eAAe,GAAG,UAACC,OAAD,EAAa;AAA0B,SAAC;AACrEC,gBAAY,EAAE,UAACC,WAAD,EAAY;AACxBA,iBAAW,CAACC,GAAZ,CAAgB3B,gBAAgB,EAAhC,EAAoCkB,uBAApC;AACD;AAHoE,GAAD;AAIpE,CAJK","names":["loggerMiddleware","next","context","args","clientName","commandName","inputFilterSensitiveLog","logger","outputFilterSensitiveLog","response","_b","info","_a","output","$metadata","outputWithoutMetadata","input","metadata","loggerMiddlewareOptions","name","tags","step","override","getLoggerPlugin","options","applyToStack","clientStack","add"],"sources":["/home/dalienst/node_modules/@aws-sdk/middleware-logger/src/loggerMiddleware.ts"],"sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  AbsoluteLocation,\n  HandlerExecutionContext,\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nexport const loggerMiddleware = () => <Output extends MetadataBearer = MetadataBearer>(\n  next: InitializeHandler<any, Output>,\n  context: HandlerExecutionContext\n): InitializeHandler<any, Output> => async (\n  args: InitializeHandlerArguments<any>\n): Promise<InitializeHandlerOutput<Output>> => {\n  const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;\n\n  const response = await next(args);\n\n  if (!logger) {\n    return response;\n  }\n\n  if (typeof logger.info === \"function\") {\n    const { $metadata, ...outputWithoutMetadata } = response.output;\n    logger.info({\n      clientName,\n      commandName,\n      input: inputFilterSensitiveLog(args.input),\n      output: outputFilterSensitiveLog(outputWithoutMetadata),\n      metadata: $metadata,\n    });\n  }\n\n  return response;\n};\n\nexport const loggerMiddlewareOptions: InitializeHandlerOptions & AbsoluteLocation = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getLoggerPlugin = (options: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { parse } from 'url'; // Used for OAuth parsing of Cognito Hosted UI\n\nimport { launchUri } from './urlOpener';\nimport * as oAuthStorage from './oauthStorage';\nimport { Buffer } from 'buffer';\nimport { isCognitoHostedOpts, CognitoHostedUIIdentityProvider } from '../types/Auth';\nimport { ConsoleLogger as Logger, Hub, urlSafeEncode } from '@aws-amplify/core';\nimport { Sha256 } from '@aws-crypto/sha256-js';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchAuthEvent = function (event, data, message) {\n  Hub.dispatch('auth', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Auth', AMPLIFY_SYMBOL);\n};\n\nvar logger = new Logger('OAuth');\n\nvar OAuth =\n/** @class */\nfunction () {\n  function OAuth(_a) {\n    var config = _a.config,\n        cognitoClientId = _a.cognitoClientId,\n        _b = _a.scopes,\n        scopes = _b === void 0 ? [] : _b;\n    this._urlOpener = config.urlOpener || launchUri;\n    this._config = config;\n    this._cognitoClientId = cognitoClientId;\n    if (!this.isValidScopes(scopes)) throw Error('scopes must be a String Array');\n    this._scopes = scopes;\n  }\n\n  OAuth.prototype.isValidScopes = function (scopes) {\n    return Array.isArray(scopes) && scopes.every(function (scope) {\n      return typeof scope === 'string';\n    });\n  };\n\n  OAuth.prototype.oauthSignIn = function (responseType, domain, redirectSignIn, clientId, provider, customState) {\n    if (responseType === void 0) {\n      responseType = 'code';\n    }\n\n    if (provider === void 0) {\n      provider = CognitoHostedUIIdentityProvider.Cognito;\n    }\n\n    var generatedState = this._generateState(32);\n    /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n    single-encodes/decodes url on first sign in and double-encodes/decodes url\n    when user already signed in. Using encodeURIComponent, Base32, Base64 add\n    characters % or = which on further encoding becomes unsafe. '=' create issue\n    for parsing query params.\n    Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n\n\n    var state = customState ? generatedState + \"-\" + urlSafeEncode(customState) : generatedState;\n    oAuthStorage.setState(state);\n\n    var pkce_key = this._generateRandom(128);\n\n    oAuthStorage.setPKCE(pkce_key);\n\n    var code_challenge = this._generateChallenge(pkce_key);\n\n    var code_challenge_method = 'S256';\n\n    var scopesString = this._scopes.join(' ');\n\n    var queryString = Object.entries(__assign(__assign({\n      redirect_uri: redirectSignIn,\n      response_type: responseType,\n      client_id: clientId,\n      identity_provider: provider,\n      scope: scopesString,\n      state: state\n    }, responseType === 'code' ? {\n      code_challenge: code_challenge\n    } : {}), responseType === 'code' ? {\n      code_challenge_method: code_challenge_method\n    } : {})).map(function (_a) {\n      var _b = __read(_a, 2),\n          k = _b[0],\n          v = _b[1];\n\n      return encodeURIComponent(k) + \"=\" + encodeURIComponent(v);\n    }).join('&');\n    var URL = \"https://\" + domain + \"/oauth2/authorize?\" + queryString;\n    logger.debug(\"Redirecting to \" + URL);\n\n    this._urlOpener(URL, redirectSignIn);\n  };\n\n  OAuth.prototype._handleCodeFlow = function (currentUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var code, currentUrlPathname, redirectSignInPathname, oAuthTokenEndpoint, client_id, redirect_uri, code_verifier, oAuthTokenBody, body, _a, access_token, refresh_token, id_token, error;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            code = (parse(currentUrl).query || '').split('&').map(function (pairings) {\n              return pairings.split('=');\n            }).reduce(function (accum, _a) {\n              var _b;\n\n              var _c = __read(_a, 2),\n                  k = _c[0],\n                  v = _c[1];\n\n              return __assign(__assign({}, accum), (_b = {}, _b[k] = v, _b));\n            }, {\n              code: undefined\n            }).code;\n            currentUrlPathname = parse(currentUrl).pathname || '/';\n            redirectSignInPathname = parse(this._config.redirectSignIn).pathname || '/';\n\n            if (!code || currentUrlPathname !== redirectSignInPathname) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            oAuthTokenEndpoint = 'https://' + this._config.domain + '/oauth2/token';\n            dispatchAuthEvent('codeFlow', {}, \"Retrieving tokens from \" + oAuthTokenEndpoint);\n            client_id = isCognitoHostedOpts(this._config) ? this._cognitoClientId : this._config.clientID;\n            redirect_uri = isCognitoHostedOpts(this._config) ? this._config.redirectSignIn : this._config.redirectUri;\n            code_verifier = oAuthStorage.getPKCE();\n            oAuthTokenBody = __assign({\n              grant_type: 'authorization_code',\n              code: code,\n              client_id: client_id,\n              redirect_uri: redirect_uri\n            }, code_verifier ? {\n              code_verifier: code_verifier\n            } : {});\n            logger.debug(\"Calling token endpoint: \" + oAuthTokenEndpoint + \" with\", oAuthTokenBody);\n            body = Object.entries(oAuthTokenBody).map(function (_a) {\n              var _b = __read(_a, 2),\n                  k = _b[0],\n                  v = _b[1];\n\n              return encodeURIComponent(k) + \"=\" + encodeURIComponent(v);\n            }).join('&');\n            return [4\n            /*yield*/\n            , fetch(oAuthTokenEndpoint, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: body\n            })];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.sent().json()];\n\n          case 2:\n            _a = _b.sent(), access_token = _a.access_token, refresh_token = _a.refresh_token, id_token = _a.id_token, error = _a.error;\n\n            if (error) {\n              throw new Error(error);\n            }\n\n            return [2\n            /*return*/\n            , {\n              accessToken: access_token,\n              refreshToken: refresh_token,\n              idToken: id_token\n            }];\n        }\n      });\n    });\n  };\n\n  OAuth.prototype._handleImplicitFlow = function (currentUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, id_token, access_token;\n\n      return __generator(this, function (_b) {\n        _a = (parse(currentUrl).hash || '#').substr(1) // Remove # from returned code\n        .split('&').map(function (pairings) {\n          return pairings.split('=');\n        }).reduce(function (accum, _a) {\n          var _b;\n\n          var _c = __read(_a, 2),\n              k = _c[0],\n              v = _c[1];\n\n          return __assign(__assign({}, accum), (_b = {}, _b[k] = v, _b));\n        }, {\n          id_token: undefined,\n          access_token: undefined\n        }), id_token = _a.id_token, access_token = _a.access_token;\n        dispatchAuthEvent('implicitFlow', {}, \"Got tokens from \" + currentUrl);\n        logger.debug(\"Retrieving implicit tokens from \" + currentUrl + \" with\");\n        return [2\n        /*return*/\n        , {\n          accessToken: access_token,\n          idToken: id_token,\n          refreshToken: null\n        }];\n      });\n    });\n  };\n\n  OAuth.prototype.handleAuthResponse = function (currentUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var urlParams, error, error_description, state, _a, _b, e_1;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 5,, 6]);\n\n            urlParams = currentUrl ? __assign(__assign({}, (parse(currentUrl).hash || '#').substr(1).split('&').map(function (entry) {\n              return entry.split('=');\n            }).reduce(function (acc, _a) {\n              var _b = __read(_a, 2),\n                  k = _b[0],\n                  v = _b[1];\n\n              return acc[k] = v, acc;\n            }, {})), (parse(currentUrl).query || '').split('&').map(function (entry) {\n              return entry.split('=');\n            }).reduce(function (acc, _a) {\n              var _b = __read(_a, 2),\n                  k = _b[0],\n                  v = _b[1];\n\n              return acc[k] = v, acc;\n            }, {})) : {};\n            error = urlParams.error, error_description = urlParams.error_description;\n\n            if (error) {\n              throw new Error(error_description);\n            }\n\n            state = this._validateState(urlParams);\n            logger.debug(\"Starting \" + this._config.responseType + \" flow with \" + currentUrl);\n            if (!(this._config.responseType === 'code')) return [3\n            /*break*/\n            , 2];\n            _a = [{}];\n            return [4\n            /*yield*/\n            , this._handleCodeFlow(currentUrl)];\n\n          case 1:\n            return [2\n            /*return*/\n            , __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_c.sent()])), {\n              state: state\n            }])];\n\n          case 2:\n            _b = [{}];\n            return [4\n            /*yield*/\n            , this._handleImplicitFlow(currentUrl)];\n\n          case 3:\n            return [2\n            /*return*/\n            , __assign.apply(void 0, [__assign.apply(void 0, _b.concat([_c.sent()])), {\n              state: state\n            }])];\n\n          case 4:\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            e_1 = _c.sent();\n            logger.error(\"Error handling auth response.\", e_1);\n            throw e_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  OAuth.prototype._validateState = function (urlParams) {\n    if (!urlParams) {\n      return;\n    }\n\n    var savedState = oAuthStorage.getState();\n    var returnedState = urlParams.state; // This is because savedState only exists if the flow was initiated by Amplify\n\n    if (savedState && savedState !== returnedState) {\n      throw new Error('Invalid state in OAuth flow');\n    }\n\n    return returnedState;\n  };\n\n  OAuth.prototype.signOut = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var oAuthLogoutEndpoint, client_id, signout_uri;\n      return __generator(this, function (_a) {\n        oAuthLogoutEndpoint = 'https://' + this._config.domain + '/logout?';\n        client_id = isCognitoHostedOpts(this._config) ? this._cognitoClientId : this._config.oauth.clientID;\n        signout_uri = isCognitoHostedOpts(this._config) ? this._config.redirectSignOut : this._config.returnTo;\n        oAuthLogoutEndpoint += Object.entries({\n          client_id: client_id,\n          logout_uri: encodeURIComponent(signout_uri)\n        }).map(function (_a) {\n          var _b = __read(_a, 2),\n              k = _b[0],\n              v = _b[1];\n\n          return k + \"=\" + v;\n        }).join('&');\n        dispatchAuthEvent('oAuthSignOut', {\n          oAuth: 'signOut'\n        }, \"Signing out from \" + oAuthLogoutEndpoint);\n        logger.debug(\"Signing out from \" + oAuthLogoutEndpoint);\n        return [2\n        /*return*/\n        , this._urlOpener(oAuthLogoutEndpoint, signout_uri)];\n      });\n    });\n  };\n\n  OAuth.prototype._generateState = function (length) {\n    var result = '';\n    var i = length;\n    var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    for (; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];\n\n    return result;\n  };\n\n  OAuth.prototype._generateChallenge = function (code) {\n    var awsCryptoHash = new Sha256();\n    awsCryptoHash.update(code);\n    var resultFromAWSCrypto = awsCryptoHash.digestSync();\n    var b64 = Buffer.from(resultFromAWSCrypto).toString('base64');\n\n    var base64URLFromAWSCrypto = this._base64URL(b64);\n\n    return base64URLFromAWSCrypto;\n  };\n\n  OAuth.prototype._base64URL = function (string) {\n    return string.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n\n  OAuth.prototype._generateRandom = function (size) {\n    var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\n    var buffer = new Uint8Array(size);\n\n    if (typeof window !== 'undefined' && !!window.crypto) {\n      window.crypto.getRandomValues(buffer);\n    } else {\n      for (var i = 0; i < size; i += 1) {\n        buffer[i] = Math.random() * CHARSET.length | 0;\n      }\n    }\n\n    return this._bufferToString(buffer);\n  };\n\n  OAuth.prototype._bufferToString = function (buffer) {\n    var CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var state = [];\n\n    for (var i = 0; i < buffer.byteLength; i += 1) {\n      var index = buffer[i] % CHARSET.length;\n      state.push(CHARSET[index]);\n    }\n\n    return state.join('');\n  };\n\n  return OAuth;\n}();\n\nexport default OAuth;","map":{"version":3,"mappings":"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","names":["parse","launchUri","oAuthStorage","Buffer","isCognitoHostedOpts","CognitoHostedUIIdentityProvider","ConsoleLogger","Logger","Hub","urlSafeEncode","Sha256","AMPLIFY_SYMBOL","Symbol","for","dispatchAuthEvent","event","data","message","dispatch","logger","_a","config","cognitoClientId","_b","scopes","_urlOpener","urlOpener","_config","_cognitoClientId","isValidScopes","Error","_scopes","OAuth","Array","isArray","every","scope","responseType","domain","redirectSignIn","clientId","provider","customState","Cognito","generatedState","_generateState","state","setState","pkce_key","_generateRandom","setPKCE","code_challenge","_generateChallenge","code_challenge_method","scopesString","join","queryString","Object","entries","__assign","redirect_uri","response_type","client_id","identity_provider","map","k","v","encodeURIComponent","URL","debug","currentUrl","code","query","split","reduce","accum","_c","undefined","currentUrlPathname","pathname","redirectSignInPathname","oAuthTokenEndpoint","clientID","redirectUri","code_verifier","getPKCE","oAuthTokenBody","grant_type","body","fetch","method","headers","json","access_token","refresh_token","id_token","error","accessToken","refreshToken","idToken","hash","substr","urlParams","acc","error_description","_validateState","_handleCodeFlow","_handleImplicitFlow","e_1","savedState","getState","returnedState","oAuthLogoutEndpoint","oauth","signout_uri","redirectSignOut","returnTo","logout_uri","oAuth","length","result","i","chars","Math","round","random","awsCryptoHash","update","resultFromAWSCrypto","digestSync","b64","from","toString","base64URLFromAWSCrypto","_base64URL","string","replace","size","CHARSET","buffer","Uint8Array","window","crypto","getRandomValues","_bufferToString","byteLength","index","push"],"sources":["/home/dalienst/node_modules/@aws-amplify/auth/src/OAuth/OAuth.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { parse } from 'url'; // Used for OAuth parsing of Cognito Hosted UI\nimport { launchUri } from './urlOpener';\nimport * as oAuthStorage from './oauthStorage';\nimport { Buffer } from 'buffer';\n\nimport {\n\tOAuthOpts,\n\tisCognitoHostedOpts,\n\tCognitoHostedUIIdentityProvider,\n} from '../types/Auth';\n\nimport { ConsoleLogger as Logger, Hub, urlSafeEncode } from '@aws-amplify/core';\n\nimport { Sha256 } from '@aws-crypto/sha256-js';\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\n\nconst dispatchAuthEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('auth', { event, data, message }, 'Auth', AMPLIFY_SYMBOL);\n};\n\nconst logger = new Logger('OAuth');\n\nexport default class OAuth {\n\tprivate _urlOpener;\n\tprivate _config;\n\tprivate _cognitoClientId;\n\tprivate _scopes;\n\n\tconstructor({\n\t\tconfig,\n\t\tcognitoClientId,\n\t\tscopes = [],\n\t}: {\n\t\tscopes: string[];\n\t\tconfig: OAuthOpts;\n\t\tcognitoClientId: string;\n\t}) {\n\t\tthis._urlOpener = config.urlOpener || launchUri;\n\t\tthis._config = config;\n\t\tthis._cognitoClientId = cognitoClientId;\n\n\t\tif (!this.isValidScopes(scopes))\n\t\t\tthrow Error('scopes must be a String Array');\n\t\tthis._scopes = scopes;\n\t}\n\n\tprivate isValidScopes(scopes: string[]) {\n\t\treturn (\n\t\t\tArray.isArray(scopes) && scopes.every(scope => typeof scope === 'string')\n\t\t);\n\t}\n\n\tpublic oauthSignIn(\n\t\tresponseType = 'code',\n\t\tdomain: string,\n\t\tredirectSignIn: string,\n\t\tclientId: string,\n\t\tprovider:\n\t\t\t| CognitoHostedUIIdentityProvider\n\t\t\t| string = CognitoHostedUIIdentityProvider.Cognito,\n\t\tcustomState?: string\n\t) {\n\t\tconst generatedState = this._generateState(32);\n\n\t\t/* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito \n\t\tsingle-encodes/decodes url on first sign in and double-encodes/decodes url\n\t\twhen user already signed in. Using encodeURIComponent, Base32, Base64 add \n\t\tcharacters % or = which on further encoding becomes unsafe. '=' create issue \n\t\tfor parsing query params. \n\t\tRefer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n\t\tconst state = customState\n\t\t\t? `${generatedState}-${urlSafeEncode(customState)}`\n\t\t\t: generatedState;\n\n\t\toAuthStorage.setState(state);\n\n\t\tconst pkce_key = this._generateRandom(128);\n\t\toAuthStorage.setPKCE(pkce_key);\n\n\t\tconst code_challenge = this._generateChallenge(pkce_key);\n\t\tconst code_challenge_method = 'S256';\n\n\t\tconst scopesString = this._scopes.join(' ');\n\n\t\tconst queryString = Object.entries({\n\t\t\tredirect_uri: redirectSignIn,\n\t\t\tresponse_type: responseType,\n\t\t\tclient_id: clientId,\n\t\t\tidentity_provider: provider,\n\t\t\tscope: scopesString,\n\t\t\tstate,\n\t\t\t...(responseType === 'code' ? { code_challenge } : {}),\n\t\t\t...(responseType === 'code' ? { code_challenge_method } : {}),\n\t\t})\n\t\t\t.map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n\t\t\t.join('&');\n\n\t\tconst URL = `https://${domain}/oauth2/authorize?${queryString}`;\n\t\tlogger.debug(`Redirecting to ${URL}`);\n\t\tthis._urlOpener(URL, redirectSignIn);\n\t}\n\n\tprivate async _handleCodeFlow(currentUrl: string) {\n\t\t/* Convert URL into an object with parameters as keys\n    { redirect_uri: 'http://localhost:3000/', response_type: 'code', ...} */\n\t\tconst { code } = (parse(currentUrl).query || '')\n\t\t\t.split('&')\n\t\t\t.map(pairings => pairings.split('='))\n\t\t\t.reduce((accum, [k, v]) => ({ ...accum, [k]: v }), { code: undefined });\n\n\t\tconst currentUrlPathname = parse(currentUrl).pathname || '/';\n\t\tconst redirectSignInPathname =\n\t\t\tparse(this._config.redirectSignIn).pathname || '/';\n\n\t\tif (!code || currentUrlPathname !== redirectSignInPathname) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oAuthTokenEndpoint =\n\t\t\t'https://' + this._config.domain + '/oauth2/token';\n\n\t\tdispatchAuthEvent(\n\t\t\t'codeFlow',\n\t\t\t{},\n\t\t\t`Retrieving tokens from ${oAuthTokenEndpoint}`\n\t\t);\n\n\t\tconst client_id = isCognitoHostedOpts(this._config)\n\t\t\t? this._cognitoClientId\n\t\t\t: this._config.clientID;\n\n\t\tconst redirect_uri = isCognitoHostedOpts(this._config)\n\t\t\t? this._config.redirectSignIn\n\t\t\t: this._config.redirectUri;\n\n\t\tconst code_verifier = oAuthStorage.getPKCE();\n\n\t\tconst oAuthTokenBody = {\n\t\t\tgrant_type: 'authorization_code',\n\t\t\tcode,\n\t\t\tclient_id,\n\t\t\tredirect_uri,\n\t\t\t...(code_verifier ? { code_verifier } : {}),\n\t\t};\n\n\t\tlogger.debug(\n\t\t\t`Calling token endpoint: ${oAuthTokenEndpoint} with`,\n\t\t\toAuthTokenBody\n\t\t);\n\n\t\tconst body = Object.entries(oAuthTokenBody)\n\t\t\t.map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n\t\t\t.join('&');\n\n\t\tconst { access_token, refresh_token, id_token, error } = await (\n\t\t\t(await fetch(oAuthTokenEndpoint, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t},\n\t\t\t\tbody,\n\t\t\t})) as any\n\t\t).json();\n\n\t\tif (error) {\n\t\t\tthrow new Error(error);\n\t\t}\n\n\t\treturn {\n\t\t\taccessToken: access_token,\n\t\t\trefreshToken: refresh_token,\n\t\t\tidToken: id_token,\n\t\t};\n\t}\n\n\tprivate async _handleImplicitFlow(currentUrl: string) {\n\t\t// hash is `null` if `#` doesn't exist on URL\n\t\tconst { id_token, access_token } = (parse(currentUrl).hash || '#')\n\t\t\t.substr(1) // Remove # from returned code\n\t\t\t.split('&')\n\t\t\t.map(pairings => pairings.split('='))\n\t\t\t.reduce((accum, [k, v]) => ({ ...accum, [k]: v }), {\n\t\t\t\tid_token: undefined,\n\t\t\t\taccess_token: undefined,\n\t\t\t});\n\n\t\tdispatchAuthEvent('implicitFlow', {}, `Got tokens from ${currentUrl}`);\n\t\tlogger.debug(`Retrieving implicit tokens from ${currentUrl} with`);\n\n\t\treturn {\n\t\t\taccessToken: access_token,\n\t\t\tidToken: id_token,\n\t\t\trefreshToken: null,\n\t\t};\n\t}\n\n\tpublic async handleAuthResponse(currentUrl?: string) {\n\t\ttry {\n\t\t\tconst urlParams = currentUrl\n\t\t\t\t? ({\n\t\t\t\t\t\t...(parse(currentUrl).hash || '#')\n\t\t\t\t\t\t\t.substr(1)\n\t\t\t\t\t\t\t.split('&')\n\t\t\t\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t\t\t\t.reduce((acc, [k, v]) => ((acc[k] = v), acc), {}),\n\t\t\t\t\t\t...(parse(currentUrl).query || '')\n\t\t\t\t\t\t\t.split('&')\n\t\t\t\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t\t\t\t.reduce((acc, [k, v]) => ((acc[k] = v), acc), {}),\n\t\t\t\t  } as any)\n\t\t\t\t: {};\n\t\t\tconst { error, error_description } = urlParams;\n\n\t\t\tif (error) {\n\t\t\t\tthrow new Error(error_description);\n\t\t\t}\n\n\t\t\tconst state: string = this._validateState(urlParams);\n\n\t\t\tlogger.debug(\n\t\t\t\t`Starting ${this._config.responseType} flow with ${currentUrl}`\n\t\t\t);\n\t\t\tif (this._config.responseType === 'code') {\n\t\t\t\treturn { ...(await this._handleCodeFlow(currentUrl)), state };\n\t\t\t} else {\n\t\t\t\treturn { ...(await this._handleImplicitFlow(currentUrl)), state };\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.error(`Error handling auth response.`, e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate _validateState(urlParams: any): string {\n\t\tif (!urlParams) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst savedState = oAuthStorage.getState();\n\t\tconst { state: returnedState } = urlParams;\n\n\t\t// This is because savedState only exists if the flow was initiated by Amplify\n\t\tif (savedState && savedState !== returnedState) {\n\t\t\tthrow new Error('Invalid state in OAuth flow');\n\t\t}\n\t\treturn returnedState;\n\t}\n\n\tpublic async signOut() {\n\t\tlet oAuthLogoutEndpoint = 'https://' + this._config.domain + '/logout?';\n\n\t\tconst client_id = isCognitoHostedOpts(this._config)\n\t\t\t? this._cognitoClientId\n\t\t\t: this._config.oauth.clientID;\n\n\t\tconst signout_uri = isCognitoHostedOpts(this._config)\n\t\t\t? this._config.redirectSignOut\n\t\t\t: this._config.returnTo;\n\n\t\toAuthLogoutEndpoint += Object.entries({\n\t\t\tclient_id,\n\t\t\tlogout_uri: encodeURIComponent(signout_uri),\n\t\t})\n\t\t\t.map(([k, v]) => `${k}=${v}`)\n\t\t\t.join('&');\n\n\t\tdispatchAuthEvent(\n\t\t\t'oAuthSignOut',\n\t\t\t{ oAuth: 'signOut' },\n\t\t\t`Signing out from ${oAuthLogoutEndpoint}`\n\t\t);\n\t\tlogger.debug(`Signing out from ${oAuthLogoutEndpoint}`);\n\n\t\treturn this._urlOpener(oAuthLogoutEndpoint, signout_uri);\n\t}\n\n\tprivate _generateState(length: number) {\n\t\tlet result = '';\n\t\tlet i = length;\n\t\tconst chars =\n\t\t\t'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\t\tfor (; i > 0; --i)\n\t\t\tresult += chars[Math.round(Math.random() * (chars.length - 1))];\n\t\treturn result;\n\t}\n\n\tprivate _generateChallenge(code: string) {\n\t\tconst awsCryptoHash = new Sha256();\n\t\tawsCryptoHash.update(code);\n\n\t\tconst resultFromAWSCrypto = awsCryptoHash.digestSync();\n\t\tconst b64 = Buffer.from(resultFromAWSCrypto).toString('base64');\n\t\tconst base64URLFromAWSCrypto = this._base64URL(b64);\n\n\t\treturn base64URLFromAWSCrypto;\n\t}\n\n\tprivate _base64URL(string) {\n\t\treturn string.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n\t}\n\n\tprivate _generateRandom(size: number) {\n\t\tconst CHARSET =\n\t\t\t'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\n\t\tconst buffer = new Uint8Array(size);\n\t\tif (typeof window !== 'undefined' && !!window.crypto) {\n\t\t\twindow.crypto.getRandomValues(buffer);\n\t\t} else {\n\t\t\tfor (let i = 0; i < size; i += 1) {\n\t\t\t\tbuffer[i] = (Math.random() * CHARSET.length) | 0;\n\t\t\t}\n\t\t}\n\t\treturn this._bufferToString(buffer);\n\t}\n\n\tprivate _bufferToString(buffer: Uint8Array) {\n\t\tconst CHARSET =\n\t\t\t'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\t\tconst state = [];\n\t\tfor (let i = 0; i < buffer.byteLength; i += 1) {\n\t\t\tconst index = buffer[i] % CHARSET.length;\n\t\t\tstate.push(CHARSET[index]);\n\t\t}\n\t\treturn state.join('');\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
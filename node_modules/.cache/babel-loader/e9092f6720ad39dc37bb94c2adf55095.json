{"ast":null,"code":"import { COLOR_BLACK } from \"./constants\";\nimport { getGeofenceFeatureArray } from \"./geofenceUtils\";\nimport { isGeofenceArray, isPolygonArray } from \"./utils\";\nconst FILL_OPACITY = 0.3;\nconst BORDER_OPACITY = 0.5;\nconst BORDER_WIDTH = 4;\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n */\n\nexport function drawGeofences(sourceName, data, map) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n\n  if (!map || typeof map.addSource !== \"function\" || typeof map.addLayer !== \"function\") {\n    throw new Error(\"Please use a maplibre map\");\n  }\n\n  if (data.length > 0 && !isGeofenceArray(data) && !isPolygonArray(data)) {\n    throw new Error(\"Please pass in an array of Geofences or an array of Polygons\");\n  }\n  /*\n   * Data source for features\n   * Convert data passed in as coordinates into feature data\n   */\n\n\n  const sourceId = `${sourceName}`;\n  map.addSource(sourceId, {\n    type: \"geojson\",\n    data: getGeofenceFeatureArray(data),\n    generateId: true\n  });\n  const initialVisiblity = ((_a = options.visible) !== null && _a !== void 0 ? _a : true) ? \"visible\" : \"none\";\n  /*\n   * Draw ui layers for source data\n   */\n\n  const fillLayerId = `${sourceName}-fill-layer`;\n  map.addLayer({\n    id: fillLayerId,\n    type: \"fill\",\n    source: sourceId,\n    layout: {\n      visibility: initialVisiblity\n    },\n    paint: {\n      \"fill-color\": (_b = options.fillColor) !== null && _b !== void 0 ? _b : COLOR_BLACK,\n      \"fill-opacity\": (_c = options.fillOpacity) !== null && _c !== void 0 ? _c : FILL_OPACITY\n    }\n  }); // Add a black outline around the polygon.\n\n  const outlineLayerId = `${sourceName}-outline-layer`;\n  map.addLayer({\n    id: outlineLayerId,\n    type: \"line\",\n    source: sourceId,\n    layout: {\n      visibility: initialVisiblity\n    },\n    paint: {\n      \"line-color\": (_d = options.borderColor) !== null && _d !== void 0 ? _d : COLOR_BLACK,\n      \"line-opacity\": (_e = options.borderOpacity) !== null && _e !== void 0 ? _e : BORDER_OPACITY,\n      \"line-width\": (_f = options.borderWidth) !== null && _f !== void 0 ? _f : BORDER_WIDTH,\n      \"line-offset\": (_g = options.borderOffset) !== null && _g !== void 0 ? _g : ((_h = options.borderWidth) !== null && _h !== void 0 ? _h : BORDER_WIDTH) / 2 * -1\n    }\n  }); // utility function for setting layer visibility to none\n\n  const hide = () => {\n    map.setLayoutProperty(fillLayerId, \"visibility\", \"none\");\n    map.setLayoutProperty(outlineLayerId, \"visibility\", \"none\");\n  }; // utility function for setting layer visibility to visible\n\n\n  const show = () => {\n    map.setLayoutProperty(fillLayerId, \"visibility\", \"visible\");\n    map.setLayoutProperty(outlineLayerId, \"visibility\", \"visible\");\n  }; // utility function for checking layer visibility\n\n\n  const isVisible = () => {\n    const visibility = map.getLayoutProperty(fillLayerId, \"visibility\");\n    return visibility === \"visible\";\n  }; // utility function for setting layer visibility to visible\n\n\n  const setData = data => {\n    map.getSource(sourceId).setData(data);\n  };\n\n  return {\n    sourceId,\n    outlineLayerId,\n    fillLayerId,\n    show,\n    hide,\n    isVisible,\n    setData\n  };\n}","map":{"version":3,"sources":["/home/dalienst/node_modules/maplibre-gl-js-amplify/lib/esm/drawGeofences.js"],"names":["COLOR_BLACK","getGeofenceFeatureArray","isGeofenceArray","isPolygonArray","FILL_OPACITY","BORDER_OPACITY","BORDER_WIDTH","drawGeofences","sourceName","data","map","options","_a","_b","_c","_d","_e","_f","_g","_h","addSource","addLayer","Error","length","sourceId","type","generateId","initialVisiblity","visible","fillLayerId","id","source","layout","visibility","paint","fillColor","fillOpacity","outlineLayerId","borderColor","borderOpacity","borderWidth","borderOffset","hide","setLayoutProperty","show","isVisible","getLayoutProperty","setData","getSource"],"mappings":"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","sourcesContent":["import { COLOR_BLACK } from \"./constants\";\nimport { getGeofenceFeatureArray } from \"./geofenceUtils\";\nimport { isGeofenceArray, isPolygonArray } from \"./utils\";\nconst FILL_OPACITY = 0.3;\nconst BORDER_OPACITY = 0.5;\nconst BORDER_WIDTH = 4;\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n */\nexport function drawGeofences(sourceName, data, map, options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (!map ||\n        typeof map.addSource !== \"function\" ||\n        typeof map.addLayer !== \"function\") {\n        throw new Error(\"Please use a maplibre map\");\n    }\n    if (data.length > 0 && !isGeofenceArray(data) && !isPolygonArray(data)) {\n        throw new Error(\"Please pass in an array of Geofences or an array of Polygons\");\n    }\n    /*\n     * Data source for features\n     * Convert data passed in as coordinates into feature data\n     */\n    const sourceId = `${sourceName}`;\n    map.addSource(sourceId, {\n        type: \"geojson\",\n        data: getGeofenceFeatureArray(data),\n        generateId: true,\n    });\n    const initialVisiblity = ((_a = options.visible) !== null && _a !== void 0 ? _a : true) ? \"visible\" : \"none\";\n    /*\n     * Draw ui layers for source data\n     */\n    const fillLayerId = `${sourceName}-fill-layer`;\n    map.addLayer({\n        id: fillLayerId,\n        type: \"fill\",\n        source: sourceId,\n        layout: {\n            visibility: initialVisiblity,\n        },\n        paint: {\n            \"fill-color\": (_b = options.fillColor) !== null && _b !== void 0 ? _b : COLOR_BLACK,\n            \"fill-opacity\": (_c = options.fillOpacity) !== null && _c !== void 0 ? _c : FILL_OPACITY,\n        },\n    });\n    // Add a black outline around the polygon.\n    const outlineLayerId = `${sourceName}-outline-layer`;\n    map.addLayer({\n        id: outlineLayerId,\n        type: \"line\",\n        source: sourceId,\n        layout: {\n            visibility: initialVisiblity,\n        },\n        paint: {\n            \"line-color\": (_d = options.borderColor) !== null && _d !== void 0 ? _d : COLOR_BLACK,\n            \"line-opacity\": (_e = options.borderOpacity) !== null && _e !== void 0 ? _e : BORDER_OPACITY,\n            \"line-width\": (_f = options.borderWidth) !== null && _f !== void 0 ? _f : BORDER_WIDTH,\n            \"line-offset\": (_g = options.borderOffset) !== null && _g !== void 0 ? _g : (((_h = options.borderWidth) !== null && _h !== void 0 ? _h : BORDER_WIDTH) / 2) * -1,\n        },\n    });\n    // utility function for setting layer visibility to none\n    const hide = () => {\n        map.setLayoutProperty(fillLayerId, \"visibility\", \"none\");\n        map.setLayoutProperty(outlineLayerId, \"visibility\", \"none\");\n    };\n    // utility function for setting layer visibility to visible\n    const show = () => {\n        map.setLayoutProperty(fillLayerId, \"visibility\", \"visible\");\n        map.setLayoutProperty(outlineLayerId, \"visibility\", \"visible\");\n    };\n    // utility function for checking layer visibility\n    const isVisible = () => {\n        const visibility = map.getLayoutProperty(fillLayerId, \"visibility\");\n        return visibility === \"visible\";\n    };\n    // utility function for setting layer visibility to visible\n    const setData = (data) => {\n        map.getSource(sourceId).setData(data);\n    };\n    return {\n        sourceId,\n        outlineLayerId,\n        fillLayerId,\n        show,\n        hide,\n        isVisible,\n        setData,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}
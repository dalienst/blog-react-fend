{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\n/**\n * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,\n * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.\n * @internal\n */\n\nexport var throw200ExceptionsMiddleware = function (config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var result, response, statusCode, body, bodyBytes, bodyString, err;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              result = _a.sent();\n              response = result.response;\n              if (!HttpResponse.isInstance(response)) return [2\n              /*return*/\n              , result];\n              statusCode = response.statusCode, body = response.body;\n              if (statusCode < 200 && statusCode >= 300) return [2\n              /*return*/\n              , result];\n              return [4\n              /*yield*/\n              , collectBody(body, config)];\n\n            case 2:\n              bodyBytes = _a.sent();\n              return [4\n              /*yield*/\n              , collectBodyString(bodyBytes, config)];\n\n            case 3:\n              bodyString = _a.sent();\n\n              if (bodyBytes.length === 0) {\n                err = new Error(\"S3 aborted request\");\n                err.name = \"InternalError\";\n                throw err;\n              }\n\n              if (bodyString && bodyString.match(\"<Error>\")) {\n                // Set the error code to 4XX so that error deserializer can parse them\n                response.statusCode = 400;\n              } // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.\n              // So that the deserializer can consume the body as normal.\n\n\n              response.body = bodyBytes;\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    };\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n/**\n * @internal\n */\n\n\nexport var throw200ExceptionsMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true\n};\n/**\n *\n * @internal\n */\n\nexport var getThrow200ExceptionsPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,YAAT,QAA6B,wBAA7B;AAQA;;;;;;AAKA,OAAO,IAAMC,4BAA4B,GAAG,UAACC,MAAD,EAA2B;AAAsC,mBAC3GC,IAD2G,EACvG;AACD,qBAAOC,IAAP,EAAW;AAAA;;;;;AACC;AAAA;AAAA,gBAAMD,IAAI,CAACC,IAAD,CAAV;;;AAATC,oBAAM,GAAGC,SAAT;AACEC,sBAAQ,GAAKF,MAAM,SAAnB;AACR,kBAAI,CAACL,YAAY,CAACQ,UAAb,CAAwBD,QAAxB,CAAL,EAAwC;AAAA;AAAA,gBAAOF,MAAP;AAChCI,wBAAU,GAAWF,QAAQ,WAA7B,EAAYG,IAAI,GAAKH,QAAQ,KAA7B;AACR,kBAAIE,UAAU,GAAG,GAAb,IAAoBA,UAAU,IAAI,GAAtC,EAA2C;AAAA;AAAA,gBAAOJ,MAAP;AAGzB;AAAA;AAAA,gBAAMM,WAAW,CAACD,IAAD,EAAOR,MAAP,CAAjB;;;AAAZU,uBAAS,GAAGN,SAAZ;AACa;AAAA;AAAA,gBAAMO,iBAAiB,CAACD,SAAD,EAAYV,MAAZ,CAAvB;;;AAAbY,wBAAU,GAAGR,SAAb;;AACN,kBAAIM,SAAS,CAACG,MAAV,KAAqB,CAAzB,EAA4B;AACpBC,mBAAG,GAAG,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACND,mBAAG,CAACE,IAAJ,GAAW,eAAX;AACA,sBAAMF,GAAN;AACD;;AACD,kBAAIF,UAAU,IAAIA,UAAU,CAACK,KAAX,CAAiB,SAAjB,CAAlB,EAA+C;AAC7C;AACAZ,wBAAQ,CAACE,UAAT,GAAsB,GAAtB;AACD,gBAED;AACA;;;AACAF,sBAAQ,CAACG,IAAT,GAAgBE,SAAhB;AACA;AAAA;AAAA,gBAAOP,MAAP;;;OAvBc;AAwBf,KAxBI;AAwBJ,GA1B4G;AA0B5G,CA1BM,C,CA4BP;;AACA,IAAMM,WAAW,GAAG,UAACS,UAAD,EAAqCC,OAArC,EAAgE;AAA/D;AAAAD,qBAAsBE,UAAtB;AAAkC;;AACrD,MAAIF,UAAU,YAAYE,UAA1B,EAAsC;AACpC,WAAOC,OAAO,CAACC,OAAR,CAAgBJ,UAAhB,CAAP;AACD;;AACD,SAAOC,OAAO,CAACI,eAAR,CAAwBL,UAAxB,KAAuCG,OAAO,CAACC,OAAR,CAAgB,IAAIF,UAAJ,EAAhB,CAA9C;AACD,CALD,C,CAOA;;;AACA,IAAMT,iBAAiB,GAAG,UAACO,UAAD,EAAkBC,OAAlB,EAA6C;AACrE,oBAAW,CAACD,UAAD,EAAaC,OAAb,CAAX,CAAiCK,IAAjC,CAAsC,UAAChB,IAAD,EAAK;AAAK,kBAAO,CAACiB,WAAR,CAAoBjB,IAApB;AAAyB,GAAzE;AAA0E,CAD5E;AAGA;;;;;AAGA,OAAO,IAAMkB,mCAAmC,GAA8B;AAC5EC,UAAQ,EAAE,OADkE;AAE5EC,cAAY,EAAE,wBAF8D;AAG5EC,MAAI,EAAE,CAAC,sBAAD,EAAyB,IAAzB,CAHsE;AAI5Eb,MAAI,EAAE,8BAJsE;AAK5Ec,UAAQ,EAAE;AALkE,CAAvE;AAQP;;;;;AAIA,OAAO,IAAMC,2BAA2B,GAAG,UAAC/B,MAAD,EAA2B;AAA0B,SAAC;AAC/FgC,gBAAY,EAAE,UAACC,WAAD,EAAY;AACxBA,iBAAW,CAACC,aAAZ,CAA0BnC,4BAA4B,CAACC,MAAD,CAAtD,EAAgE0B,mCAAhE;AACD;AAH8F,GAAD;AAI9F,CAJK","names":["HttpResponse","throw200ExceptionsMiddleware","config","next","args","result","_a","response","isInstance","statusCode","body","collectBody","bodyBytes","collectBodyString","bodyString","length","err","Error","name","match","streamBody","context","Uint8Array","Promise","resolve","streamCollector","then","utf8Encoder","throw200ExceptionsMiddlewareOptions","relation","toMiddleware","tags","override","getThrow200ExceptionsPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["/home/dalienst/node_modules/@aws-sdk/middleware-sdk-s3/src/throw-200-exceptions.ts"],"sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { DeserializeMiddleware, Encoder, Pluggable, RelativeMiddlewareOptions, StreamCollector } from \"@aws-sdk/types\";\n\ntype PreviouslyResolved = {\n  streamCollector: StreamCollector;\n  utf8Encoder: Encoder;\n};\n\n/**\n * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,\n * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.\n * @internal\n */\nexport const throw200ExceptionsMiddleware = (config: PreviouslyResolved): DeserializeMiddleware<any, any> => (\n  next\n) => async (args) => {\n  const result = await next(args);\n  const { response } = result;\n  if (!HttpResponse.isInstance(response)) return result;\n  const { statusCode, body } = response;\n  if (statusCode < 200 && statusCode >= 300) return result;\n\n  // Throw 2XX response that's either an error or has empty body.\n  const bodyBytes = await collectBody(body, config);\n  const bodyString = await collectBodyString(bodyBytes, config);\n  if (bodyBytes.length === 0) {\n    const err = new Error(\"S3 aborted request\");\n    err.name = \"InternalError\";\n    throw err;\n  }\n  if (bodyString && bodyString.match(\"<Error>\")) {\n    // Set the error code to 4XX so that error deserializer can parse them\n    response.statusCode = 400;\n  }\n\n  // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.\n  // So that the deserializer can consume the body as normal.\n  response.body = bodyBytes;\n  return result;\n};\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: PreviouslyResolved): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: PreviouslyResolved): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\n/**\n * @internal\n */\nexport const throw200ExceptionsMiddlewareOptions: RelativeMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true,\n};\n\n/**\n *\n * @internal\n */\nexport const getThrow200ExceptionsPlugin = (config: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
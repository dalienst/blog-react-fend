{"ast":null,"code":"function e(t) {\n  switch (t && t.type || null) {\n    case \"FeatureCollection\":\n      return t.features = t.features.reduce(function (t, r) {\n        return t.concat(e(r));\n      }, []), t;\n\n    case \"Feature\":\n      return t.geometry ? e(t.geometry).map(function (e) {\n        var r = {\n          type: \"Feature\",\n          properties: JSON.parse(JSON.stringify(t.properties)),\n          geometry: e\n        };\n        return void 0 !== t.id && (r.id = t.id), r;\n      }) : [t];\n\n    case \"MultiPoint\":\n      return t.coordinates.map(function (e) {\n        return {\n          type: \"Point\",\n          coordinates: e\n        };\n      });\n\n    case \"MultiPolygon\":\n      return t.coordinates.map(function (e) {\n        return {\n          type: \"Polygon\",\n          coordinates: e\n        };\n      });\n\n    case \"MultiLineString\":\n      return t.coordinates.map(function (e) {\n        return {\n          type: \"LineString\",\n          coordinates: e\n        };\n      });\n\n    case \"GeometryCollection\":\n      return t.geometries.map(e).reduce(function (e, t) {\n        return e.concat(t);\n      }, []);\n\n    case \"Point\":\n    case \"Polygon\":\n    case \"LineString\":\n      return [t];\n  }\n}\n\nexport { e as default };","map":{"version":3,"mappings":"AAAwBA,WAAQC,CAARD,EAAQC;AAC9B,UAASA,KAAMA,EAAGC,IAATD,IAAkB,IAA3B;AACE,SAAK,mBAAL;AAIE,aAHAA,EAAGE,QAAHF,GAAcA,EAAGE,QAAHF,CAAYG,MAAZH,CAAmB,UAASI,CAAT,EAAcC,CAAd,EAAcA;AAC7C,eAAOD,EAAIE,MAAJF,CAAWL,EAAQM,CAARN,CAAXK,CAAP;AACF,OAFcJ,EAEX,EAFWA,CAAdA,EAGSA,CAAT;;AACF,SAAK,SAAL;AACE,aAAKA,EAAGO,QAAHP,GACSD,EAACC,EAAGO,QAAJR,EAAcS,GAAdT,CAAkB,UAASU,CAAT,EAASA;AACvC,YAAQC,IAAG;AACTT,gBAAM,SADG;AAETU,sBAAYC,KAAKC,KAALD,CAAWA,KAAKE,SAALF,CAAeZ,EAAGW,UAAlBC,CAAXA,CAFH;AAGTL,oBAAUE;AAHD,SAAX;AAQA,oBAHcM,CAGd,KAHIf,EAAGgB,EAGP,KAFEN,EAAKM,EAALN,GAAUV,EAAGgB,EAEf,GAFeA,CAEf;AACF,OAVcjB,CADTC,GAAoB,CAACA,CAAD,CAAzB;;AAYF,SAAK,YAAL;AACE,aAAOA,EAAGiB,WAAHjB,CAAeQ,GAAfR,CAAmB,UAASkB,CAAT,EAASA;AACjC,eAAO;AAAEjB,gBAAM,OAAR;AAAiBgB,uBAAaC;AAA9B,SAAP;AACF,OAFOlB,CAAP;;AAGF,SAAK,cAAL;AACE,aAASA,EAACiB,WAADjB,CAAaQ,GAAbR,CAAiB,UAASkB,CAAT,EAASA;AACjC,eAAO;AAAEjB,gBAAM,SAAR;AAAmBgB,uBAAaC;AAAhC,SAAP;AACF,OAFSlB,CAAT;;AAGF,SAAK,iBAAL;AACE,aAAOA,EAAGiB,WAAHjB,CAAeQ,GAAfR,CAAmB,UAASkB,CAAT,EAASA;AACjC,eAAO;AAAEjB,gBAAM,YAAR;AAAsBgB,uBAAaC;AAAnC,SAAP;AACF,OAFOlB,CAAP;;AAGF,SAAK,oBAAL;AACE,aAAOA,EAAGmB,UAAHnB,CAAcQ,GAAdR,CAAkBD,CAAlBC,EAA2BG,MAA3BH,CAAkC,UAASoB,CAAT,EAAeC,CAAf,EAAeA;AACtD,eAAWD,EAACd,MAADc,CAAQC,CAARD,CAAX;AACF,OAFOpB,EAEJ,EAFIA,CAAP;;AAGF,SAAK,OAAL;AACA,SAAK,SAAL;AACA,SAAK,YAAL;AACE,aAAO,CAACA,CAAD,CAAP;AAtCJ;AAwCF;;AAAA","names":["flatten","gj","type","features","reduce","mem","feature","concat","geometry","map","geom","data","properties","JSON","parse","stringify","undefined","id","coordinates","_","geometries","memo","geoms"],"sources":["/home/dalienst/node_modules/geojson-flatten/index.js"],"sourcesContent":["export default function flatten(gj) {\n  switch ((gj && gj.type) || null) {\n    case \"FeatureCollection\":\n      gj.features = gj.features.reduce(function(mem, feature) {\n        return mem.concat(flatten(feature));\n      }, []);\n      return gj;\n    case \"Feature\":\n      if (!gj.geometry) return [gj];\n      return flatten(gj.geometry).map(function(geom) {\n        var data = {\n          type: \"Feature\",\n          properties: JSON.parse(JSON.stringify(gj.properties)),\n          geometry: geom\n        };\n        if (gj.id !== undefined) {\n          data.id = gj.id;\n        }\n        return data;\n      });\n    case \"MultiPoint\":\n      return gj.coordinates.map(function(_) {\n        return { type: \"Point\", coordinates: _ };\n      });\n    case \"MultiPolygon\":\n      return gj.coordinates.map(function(_) {\n        return { type: \"Polygon\", coordinates: _ };\n      });\n    case \"MultiLineString\":\n      return gj.coordinates.map(function(_) {\n        return { type: \"LineString\", coordinates: _ };\n      });\n    case \"GeometryCollection\":\n      return gj.geometries.map(flatten).reduce(function(memo, geoms) {\n        return memo.concat(geoms);\n      }, []);\n    case \"Point\":\n    case \"Polygon\":\n    case \"LineString\":\n      return [gj];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
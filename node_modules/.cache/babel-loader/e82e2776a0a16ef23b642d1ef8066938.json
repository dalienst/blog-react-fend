{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { Credentials, Logger, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { S3Client } from '@aws-sdk/client-s3';\nimport { AxiosHttpHandler } from '../providers/axios-http-handler';\nimport { localTestingStorageEndpoint, SET_CONTENT_LENGTH_HEADER } from './StorageConstants';\nvar logger = new Logger('S3ClientUtils'); // placeholder credentials in order to satisfy type requirement, always results in 403 when used\n\nvar INVALID_CRED = {\n  accessKeyId: '',\n  secretAccessKey: ''\n};\nexport var getPrefix = function (config) {\n  var credentials = config.credentials,\n      level = config.level,\n      customPrefix = config.customPrefix,\n      identityId = config.identityId;\n  var resolvedCustomPrefix = customPrefix || {};\n  var resolvedIdentityId = identityId || credentials.identityId;\n  var privatePath = (resolvedCustomPrefix.private !== undefined ? resolvedCustomPrefix.private : 'private/') + resolvedIdentityId + '/';\n  var protectedPath = (resolvedCustomPrefix.protected !== undefined ? resolvedCustomPrefix.protected : 'protected/') + resolvedIdentityId + '/';\n  var publicPath = resolvedCustomPrefix.public !== undefined ? resolvedCustomPrefix.public : 'public/';\n\n  switch (level) {\n    case 'private':\n      return privatePath;\n\n    case 'protected':\n      return protectedPath;\n\n    default:\n      return publicPath;\n  }\n};\nexport var createPrefixMiddleware = function (opt, key) {\n  return function (next, _context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var credentials, cred, prefix, clonedInput, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _a.sent();\n              cred = Credentials.shear(credentials);\n              prefix = getPrefix(__assign(__assign({}, opt), {\n                credentials: cred\n              }));\n              clonedInput = Object.assign({}, args.input);\n\n              if (Object.prototype.hasOwnProperty.call(args.input, 'Key')) {\n                clonedInput.Key = prefix + key;\n                args.input = clonedInput;\n              } else if (Object.prototype.hasOwnProperty.call(args.input, 'Prefix')) {\n                clonedInput.Prefix = prefix + key;\n                args.input = clonedInput;\n              }\n\n              result = next(args);\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    };\n  };\n};\n\nvar isTimeSkewedError = function (err) {\n  return err.ServerTime && typeof err.Code === 'string' && err.Code === 'RequestTimeTooSkewed';\n}; // we want to take the S3Client config in parameter so we can modify it's systemClockOffset\n\n\nexport var autoAdjustClockskewMiddleware = function (config) {\n  return function (next, _context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var err_1, serverDate;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              return [2\n              /*return*/\n              , _a.sent()];\n\n            case 2:\n              err_1 = _a.sent();\n\n              if (isTimeSkewedError(err_1)) {\n                serverDate = new Date(err_1.ServerTime);\n                config.systemClockOffset = serverDate.getTime() - Date.now();\n              }\n\n              throw err_1;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n  };\n};\nexport var autoAdjustClockskewMiddlewareOptions = {\n  step: 'finalizeRequest',\n  name: 'autoAdjustClockskewMiddleware'\n};\nexport var prefixMiddlewareOptions = {\n  step: 'initialize',\n  name: 'addPrefixMiddleware'\n};\nexport var credentialsProvider = function () {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credentials, cred, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , Credentials.get()];\n\n        case 1:\n          credentials = _a.sent();\n          if (!credentials) return [2\n          /*return*/\n          , INVALID_CRED];\n          cred = Credentials.shear(credentials);\n          logger.debug('credentials provider get credentials', cred);\n          return [2\n          /*return*/\n          , cred];\n\n        case 2:\n          error_1 = _a.sent();\n          logger.warn('credentials provider error', error_1);\n          return [2\n          /*return*/\n          , INVALID_CRED];\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n};\nexport var createS3Client = function (config, emitter) {\n  var region = config.region,\n      cancelTokenSource = config.cancelTokenSource,\n      dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting,\n      useAccelerateEndpoint = config.useAccelerateEndpoint;\n  var localTestingConfig = {};\n\n  if (dangerouslyConnectToHttpEndpointForTesting) {\n    localTestingConfig = {\n      endpoint: localTestingStorageEndpoint,\n      tls: false,\n      bucketEndpoint: false,\n      forcePathStyle: true\n    };\n  }\n\n  var s3client = new S3Client(__assign(__assign({\n    region: region,\n    // Using provider instead of a static credentials, so that if an upload task was in progress, but credentials gets\n    // changed or invalidated (e.g user signed out), the subsequent requests will fail.\n    credentials: credentialsProvider,\n    customUserAgent: getAmplifyUserAgent()\n  }, localTestingConfig), {\n    requestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n    useAccelerateEndpoint: useAccelerateEndpoint\n  }));\n  s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n  return s3client;\n};","map":{"version":3,"mappings":"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","names":["Credentials","Logger","getAmplifyUserAgent","S3Client","AxiosHttpHandler","localTestingStorageEndpoint","SET_CONTENT_LENGTH_HEADER","logger","INVALID_CRED","accessKeyId","secretAccessKey","getPrefix","config","level","customPrefix","identityId","resolvedCustomPrefix","resolvedIdentityId","credentials","privatePath","private","undefined","protectedPath","protected","publicPath","public","createPrefixMiddleware","opt","key","next","_context","args","get","_a","cred","shear","prefix","clonedInput","Object","assign","input","prototype","hasOwnProperty","call","Key","Prefix","result","isTimeSkewedError","err","ServerTime","Code","autoAdjustClockskewMiddleware","err_1","serverDate","Date","systemClockOffset","getTime","now","autoAdjustClockskewMiddlewareOptions","step","name","prefixMiddlewareOptions","credentialsProvider","debug","warn","error_1","createS3Client","emitter","cancelTokenSource","dangerouslyConnectToHttpEndpointForTesting","useAccelerateEndpoint","localTestingConfig","endpoint","tls","bucketEndpoint","forcePathStyle","s3client","__assign","region","customUserAgent","requestHandler","middlewareStack","remove"],"sources":["/home/dalienst/node_modules/@aws-amplify/storage/src/common/S3ClientUtils.ts"],"sourcesContent":["import {\n\tCredentials,\n\tICredentials,\n\tLogger,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { StorageAccessLevel, CustomPrefix } from '../types';\nimport {\n\tInitializeMiddleware,\n\tInitializeHandlerOptions,\n\tFinalizeRequestHandlerOptions,\n\tFinalizeRequestMiddleware,\n\tHandlerExecutionContext,\n} from '@aws-sdk/types';\nimport { S3ClientConfig, S3Client } from '@aws-sdk/client-s3';\nimport { CancelTokenSource } from 'axios';\nimport * as events from 'events';\nimport { AxiosHttpHandler } from '../providers/axios-http-handler';\nimport {\n\tlocalTestingStorageEndpoint,\n\tSET_CONTENT_LENGTH_HEADER,\n} from './StorageConstants';\n\nconst logger = new Logger('S3ClientUtils');\n// placeholder credentials in order to satisfy type requirement, always results in 403 when used\nconst INVALID_CRED = { accessKeyId: '', secretAccessKey: '' };\n\nexport const getPrefix = (config: {\n\tcredentials: ICredentials;\n\tlevel?: StorageAccessLevel;\n\tcustomPrefix?: CustomPrefix;\n\tidentityId?: string;\n}): string => {\n\tconst { credentials, level, customPrefix, identityId } = config;\n\n\tconst resolvedCustomPrefix = customPrefix || {};\n\tconst resolvedIdentityId = identityId || credentials.identityId;\n\tconst privatePath =\n\t\t(resolvedCustomPrefix.private !== undefined\n\t\t\t? resolvedCustomPrefix.private\n\t\t\t: 'private/') +\n\t\tresolvedIdentityId +\n\t\t'/';\n\tconst protectedPath =\n\t\t(resolvedCustomPrefix.protected !== undefined\n\t\t\t? resolvedCustomPrefix.protected\n\t\t\t: 'protected/') +\n\t\tresolvedIdentityId +\n\t\t'/';\n\tconst publicPath =\n\t\tresolvedCustomPrefix.public !== undefined\n\t\t\t? resolvedCustomPrefix.public\n\t\t\t: 'public/';\n\n\tswitch (level) {\n\t\tcase 'private':\n\t\t\treturn privatePath;\n\t\tcase 'protected':\n\t\t\treturn protectedPath;\n\t\tdefault:\n\t\t\treturn publicPath;\n\t}\n};\n\nexport const createPrefixMiddleware = (\n\topt: Record<string, any>,\n\tkey: string\n): InitializeMiddleware<any, any> => (next, _context) => async args => {\n\tconst credentials = await Credentials.get();\n\tconst cred = Credentials.shear(credentials);\n\tconst prefix = getPrefix({ ...opt, credentials: cred });\n\tconst clonedInput = Object.assign({}, args.input);\n\tif (Object.prototype.hasOwnProperty.call(args.input, 'Key')) {\n\t\tclonedInput.Key = prefix + key;\n\t\targs.input = clonedInput;\n\t} else if (Object.prototype.hasOwnProperty.call(args.input, 'Prefix')) {\n\t\tclonedInput.Prefix = prefix + key;\n\t\targs.input = clonedInput;\n\t}\n\tconst result = next(args);\n\treturn result;\n};\n\nconst isTimeSkewedError = (err: any): boolean =>\n\terr.ServerTime &&\n\ttypeof err.Code === 'string' &&\n\terr.Code === 'RequestTimeTooSkewed';\n\n// we want to take the S3Client config in parameter so we can modify it's systemClockOffset\nexport const autoAdjustClockskewMiddleware = (\n\tconfig: S3ClientConfig\n): FinalizeRequestMiddleware<any, any> => (\n\tnext,\n\t_context: HandlerExecutionContext\n) => async args => {\n\ttry {\n\t\treturn await next(args);\n\t} catch (err) {\n\t\tif (isTimeSkewedError(err)) {\n\t\t\tconst serverDate = new Date(err.ServerTime);\n\t\t\tconfig.systemClockOffset = serverDate.getTime() - Date.now();\n\t\t}\n\t\tthrow err;\n\t}\n};\n\nexport const autoAdjustClockskewMiddlewareOptions: FinalizeRequestHandlerOptions = {\n\tstep: 'finalizeRequest',\n\tname: 'autoAdjustClockskewMiddleware',\n};\n\nexport const prefixMiddlewareOptions: InitializeHandlerOptions = {\n\tstep: 'initialize',\n\tname: 'addPrefixMiddleware',\n};\n\nexport const credentialsProvider = async () => {\n\ttry {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) return INVALID_CRED;\n\t\tconst cred = Credentials.shear(credentials);\n\t\tlogger.debug('credentials provider get credentials', cred);\n\t\treturn cred;\n\t} catch (error) {\n\t\tlogger.warn('credentials provider error', error);\n\t\treturn INVALID_CRED;\n\t}\n};\n\nexport const createS3Client = (\n\tconfig: {\n\t\tregion?: string;\n\t\tcancelTokenSource?: CancelTokenSource;\n\t\tdangerouslyConnectToHttpEndpointForTesting?: boolean;\n\t\tuseAccelerateEndpoint?: boolean;\n\t},\n\temitter?: events.EventEmitter\n): S3Client => {\n\tconst {\n\t\tregion,\n\t\tcancelTokenSource,\n\t\tdangerouslyConnectToHttpEndpointForTesting,\n\t\tuseAccelerateEndpoint,\n\t} = config;\n\tlet localTestingConfig = {};\n\n\tif (dangerouslyConnectToHttpEndpointForTesting) {\n\t\tlocalTestingConfig = {\n\t\t\tendpoint: localTestingStorageEndpoint,\n\t\t\ttls: false,\n\t\t\tbucketEndpoint: false,\n\t\t\tforcePathStyle: true,\n\t\t};\n\t}\n\n\tconst s3client = new S3Client({\n\t\tregion,\n\t\t// Using provider instead of a static credentials, so that if an upload task was in progress, but credentials gets\n\t\t// changed or invalidated (e.g user signed out), the subsequent requests will fail.\n\t\tcredentials: credentialsProvider,\n\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t...localTestingConfig,\n\t\trequestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n\t\tuseAccelerateEndpoint,\n\t});\n\ts3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n\treturn s3client;\n};\n"]},"metadata":{},"sourceType":"module"}
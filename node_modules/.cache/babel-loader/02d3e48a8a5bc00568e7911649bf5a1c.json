{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\nexport var parseAWSExports = function (config) {\n  var amplifyConfig = {}; // Analytics\n\n  if (config['aws_mobile_analytics_app_id']) {\n    var Analytics = {\n      AWSPinpoint: {\n        appId: config['aws_mobile_analytics_app_id'],\n        region: config['aws_mobile_analytics_app_region']\n      }\n    };\n    amplifyConfig.Analytics = Analytics;\n  } // Auth\n\n\n  if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n    amplifyConfig.Auth = {\n      userPoolId: config['aws_user_pools_id'],\n      userPoolWebClientId: config['aws_user_pools_web_client_id'],\n      region: config['aws_cognito_region'],\n      identityPoolId: config['aws_cognito_identity_pool_id'],\n      identityPoolRegion: config['aws_cognito_region'],\n      mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\n      signUpVerificationMethod: config['aws_cognito_sign_up_verification_method'] || 'code'\n    };\n  } // Storage\n\n\n  var storageConfig;\n\n  if (config['aws_user_files_s3_bucket']) {\n    storageConfig = {\n      AWSS3: {\n        bucket: config['aws_user_files_s3_bucket'],\n        region: config['aws_user_files_s3_bucket_region'],\n        dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing']\n      }\n    };\n  } else {\n    storageConfig = config ? config.Storage || config : {};\n  } // Logging\n\n\n  if (config['Logging']) {\n    amplifyConfig.Logging = __assign(__assign({}, config['Logging']), {\n      region: config['aws_project_region']\n    });\n  } // Geo\n\n\n  if (config['geo']) {\n    amplifyConfig.Geo = Object.assign({}, config.geo);\n\n    if (config.geo['amazon_location_service']) {\n      amplifyConfig.Geo = {\n        AmazonLocationService: config.geo['amazon_location_service']\n      };\n    }\n  }\n\n  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n  amplifyConfig.Storage = Object.assign({}, storageConfig);\n  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);\n  logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n  return amplifyConfig;\n};","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","logger","parseAWSExports","config","amplifyConfig","Analytics","AWSPinpoint","appId","region","Auth","userPoolId","userPoolWebClientId","identityPoolId","identityPoolRegion","mandatorySignIn","signUpVerificationMethod","storageConfig","AWSS3","bucket","dangerouslyConnectToHttpEndpointForTesting","Storage","Logging","__assign","Geo","Object","assign","geo","AmazonLocationService","debug"],"sources":["/home/dalienst/node_modules/@aws-amplify/core/src/parseAWSExports.ts"],"sourcesContent":["import { AmplifyConfig } from './types';\nimport { ConsoleLogger as Logger } from './Logger';\n\nconst logger = new Logger('Parser');\n\nexport const parseAWSExports = (config): AmplifyConfig => {\n\tconst amplifyConfig: AmplifyConfig = {};\n\t// Analytics\n\tif (config['aws_mobile_analytics_app_id']) {\n\t\tconst Analytics = {\n\t\t\tAWSPinpoint: {\n\t\t\t\tappId: config['aws_mobile_analytics_app_id'],\n\t\t\t\tregion: config['aws_mobile_analytics_app_region'],\n\t\t\t},\n\t\t};\n\t\tamplifyConfig.Analytics = Analytics;\n\t}\n\n\t// Auth\n\tif (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n\t\tamplifyConfig.Auth = {\n\t\t\tuserPoolId: config['aws_user_pools_id'],\n\t\t\tuserPoolWebClientId: config['aws_user_pools_web_client_id'],\n\t\t\tregion: config['aws_cognito_region'],\n\t\t\tidentityPoolId: config['aws_cognito_identity_pool_id'],\n\t\t\tidentityPoolRegion: config['aws_cognito_region'],\n\t\t\tmandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\n\t\t\tsignUpVerificationMethod:\n\t\t\t\tconfig['aws_cognito_sign_up_verification_method'] || 'code',\n\t\t};\n\t}\n\n\t// Storage\n\tlet storageConfig;\n\tif (config['aws_user_files_s3_bucket']) {\n\t\tstorageConfig = {\n\t\t\tAWSS3: {\n\t\t\t\tbucket: config['aws_user_files_s3_bucket'],\n\t\t\t\tregion: config['aws_user_files_s3_bucket_region'],\n\t\t\t\tdangerouslyConnectToHttpEndpointForTesting:\n\t\t\t\t\tconfig[\n\t\t\t\t\t\t'aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'\n\t\t\t\t\t],\n\t\t\t},\n\t\t};\n\t} else {\n\t\tstorageConfig = config ? config.Storage || config : {};\n\t}\n\n\t// Logging\n\tif (config['Logging']) {\n\t\tamplifyConfig.Logging = {\n\t\t\t...config['Logging'],\n\t\t\tregion: config['aws_project_region'],\n\t\t};\n\t}\n\n\t// Geo\n\tif (config['geo']) {\n\t\tamplifyConfig.Geo = Object.assign({}, config.geo);\n\t\tif (config.geo['amazon_location_service']) {\n\t\t\tamplifyConfig.Geo = {\n\t\t\t\tAmazonLocationService: config.geo['amazon_location_service'],\n\t\t\t};\n\t\t}\n\t}\n\n\tamplifyConfig.Analytics = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Analytics,\n\t\tconfig.Analytics\n\t);\n\tamplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n\tamplifyConfig.Storage = Object.assign({}, storageConfig);\n\tamplifyConfig.Logging = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Logging,\n\t\tconfig.Logging\n\t);\n\tlogger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n\treturn amplifyConfig;\n};\n"]},"metadata":{},"sourceType":"module"}
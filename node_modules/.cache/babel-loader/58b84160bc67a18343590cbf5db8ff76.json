{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport { fromCognitoIdentity, fromCognitoIdentityPool } from '@aws-sdk/credential-provider-cognito-identity';\nimport { CognitoIdentityClient, GetIdCommand, GetCredentialsForIdentityCommand } from '@aws-sdk/client-cognito-identity';\nimport { parseAWSExports } from './parseAWSExports';\nimport { Hub } from './Hub';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nvar COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchCredentialsEvent = function (event, data, message) {\n  Hub.dispatch('core', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Credentials', AMPLIFY_SYMBOL);\n};\n\nvar CredentialsClass =\n/** @class */\nfunction () {\n  function CredentialsClass(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {}; // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\n    this.Auth = undefined;\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n\n  CredentialsClass.prototype.getModuleName = function () {\n    return 'Credentials';\n  };\n\n  CredentialsClass.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n\n  CredentialsClass.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers; // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n\n    this._storage = this._config.storage;\n\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n\n    this._storageSync = Promise.resolve();\n\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n\n    dispatchCredentialsEvent('credentials_configured', null, \"Credentials has been configured successfully\");\n    return this._config;\n  };\n\n  CredentialsClass.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  }; // currently we only store the guest identity in local storage\n\n\n  CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {\n    return \"\" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;\n  };\n\n  CredentialsClass.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n    } else {\n      logger.debug('getting old cred promise');\n    }\n\n    return this._gettingCredPromise;\n  };\n\n  CredentialsClass.prototype._keepAlive = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('checking if credentials exists and not expired');\n            cred = this._credentials;\n\n            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n              logger.debug('credentials not changed and not expired, directly return');\n              return [2\n              /*return*/\n              , Promise.resolve(cred)];\n            }\n\n            logger.debug('need to get a new credential or refresh the existing one');\n            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;\n\n            if (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n              // If Auth module is not imported, do a best effort to get guest credentials\n              return [2\n              /*return*/\n              , this._setCredentialsForGuest()];\n            }\n\n            if (!(!this._isExpired(cred) && this._isPastTTL())) return [3\n            /*break*/\n            , 6];\n            logger.debug('ttl has passed but token is not yet expired');\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , Auth.currentUserPoolUser()];\n\n          case 2:\n            user_1 = _b.sent();\n            return [4\n            /*yield*/\n            , Auth.currentSession()];\n\n          case 3:\n            session = _b.sent();\n            refreshToken_1 = session.refreshToken;\n            refreshRequest = new Promise(function (res, rej) {\n              user_1.refreshSession(refreshToken_1, function (err, data) {\n                return err ? rej(err) : res(data);\n              });\n            });\n            return [4\n            /*yield*/\n            , refreshRequest];\n\n          case 4:\n            _b.sent(); // note that rejections will be caught and handled in the catch block.\n\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_1 = _b.sent(); // should not throw because user might just be on guest access or is authenticated through federation\n\n            logger.debug('Error attempting to refreshing the session', err_1);\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [2\n            /*return*/\n            , Auth.currentUserCredentials()];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n        user = federatedInfo.user,\n        token = federatedInfo.token,\n        identity_id = federatedInfo.identity_id;\n    var expires_at = federatedInfo.expires_at; // Make sure expires_at is in millis\n\n    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return this._providerRefreshWithRetry({\n          refreshHandler: that._refreshHandlers[provider],\n          provider: provider,\n          user: user\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n\n  CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n    var _this = this;\n\n    var refreshHandler = _a.refreshHandler,\n        provider = _a.provider,\n        user = _a.user;\n    var MAX_DELAY_MS = 10 * 1000; // refreshHandler will retry network errors, otherwise it will\n    // return NonRetryableError to break out of jitteredExponentialRetry\n\n    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS).then(function (data) {\n      logger.debug('refresh federated token sucessfully', data);\n      return _this._setCredentialsFromFederation({\n        provider: provider,\n        token: data.token,\n        user: user,\n        identity_id: data.identity_id,\n        expires_at: data.expires_at\n      });\n    }).catch(function (e) {\n      var isNetworkError = typeof e === 'string' && e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n      if (!isNetworkError) {\n        _this.clear();\n      }\n\n      logger.debug('refresh federated token failed', e);\n      return Promise.reject('refreshing federation token failed: ' + e);\n    });\n  };\n\n  CredentialsClass.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n\n    logger.debug('are these credentials expired?', credentials);\n    var ts = Date.now();\n    /* returns date object.\n        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n    */\n\n    var expiration = credentials.expiration;\n    return expiration.getTime() <= ts;\n  };\n\n  CredentialsClass.prototype._isPastTTL = function () {\n    return this._nextCredentialsRefresh <= Date.now();\n  };\n\n  CredentialsClass.prototype._setCredentialsForGuest = function () {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, identityPoolId, region, mandatorySignIn, identityId, _c, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            logger.debug('setting credentials for guest');\n\n            if (!((_a = this._config) === null || _a === void 0 ? void 0 : _a.identityPoolId)) {\n              // If Credentials are not configured thru Auth module,\n              // doing best effort to check if the library was configured\n              this._config = Object.assign({}, this._config, parseAWSExports(this._config || {}).Auth);\n            }\n\n            _b = this._config, identityPoolId = _b.identityPoolId, region = _b.region, mandatorySignIn = _b.mandatorySignIn;\n\n            if (mandatorySignIn) {\n              return [2\n              /*return*/\n              , Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n\n            if (!identityPoolId) {\n              logger.debug('No Cognito Identity pool provided for unauthenticated access');\n              return [2\n              /*return*/\n              , Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n            }\n\n            if (!region) {\n              logger.debug('region is not configured for getting the credentials');\n              return [2\n              /*return*/\n              , Promise.reject('region is not configured for getting the credentials')];\n            }\n\n            _c = this;\n            return [4\n            /*yield*/\n            , this._getGuestIdentityId()];\n\n          case 1:\n            identityId = _c._identityId = _d.sent();\n            cognitoClient = new CognitoIdentityClient({\n              region: region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            credentials = undefined;\n\n            if (identityId) {\n              cognitoIdentityParams = {\n                identityId: identityId,\n                client: cognitoClient\n              };\n              credentials = fromCognitoIdentity(cognitoIdentityParams)();\n            } else {\n              credentialsProvider = function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4\n                        /*yield*/\n                        , cognitoClient.send(new GetIdCommand({\n                          IdentityPoolId: identityPoolId\n                        }))];\n\n                      case 1:\n                        IdentityId = _a.sent().IdentityId;\n                        this._identityId = IdentityId;\n                        cognitoIdentityParams = {\n                          client: cognitoClient,\n                          identityId: IdentityId\n                        };\n                        credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                        return [2\n                        /*return*/\n                        , credentialsFromCognitoIdentity()];\n                    }\n                  });\n                });\n              };\n\n              credentials = credentialsProvider().catch(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    throw err;\n                  });\n                });\n              });\n            }\n\n            return [2\n            /*return*/\n            , this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var credentialsProvider;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!(e.name === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\")) return [3\n                      /*break*/\n                      , 2];\n                      logger.debug('Failed to load guest credentials');\n                      return [4\n                      /*yield*/\n                      , this._removeGuestIdentityId()];\n\n                    case 1:\n                      _a.sent();\n\n                      credentialsProvider = function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                return [4\n                                /*yield*/\n                                , cognitoClient.send(new GetIdCommand({\n                                  IdentityPoolId: identityPoolId\n                                }))];\n\n                              case 1:\n                                IdentityId = _a.sent().IdentityId;\n                                this._identityId = IdentityId;\n                                cognitoIdentityParams = {\n                                  client: cognitoClient,\n                                  identityId: IdentityId\n                                };\n                                credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                                return [2\n                                /*return*/\n                                , credentialsFromCognitoIdentity()];\n                            }\n                          });\n                        });\n                      };\n\n                      credentials = credentialsProvider().catch(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          return __generator(this, function (_a) {\n                            throw err;\n                          });\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      , this._loadCredentials(credentials, 'guest', false, null)];\n\n                    case 2:\n                      return [2\n                      /*return*/\n                      , e];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n        token = params.token,\n        identity_id = params.identity_id;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    }; // Use custom provider url instead of the predefined ones\n\n    var domain = domains[provider] || provider;\n\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n        identityPoolId = _a.identityPoolId,\n        region = _a.region;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    var credentials = undefined;\n\n    if (identity_id) {\n      var cognitoIdentityParams = {\n        identityId: identity_id,\n        logins: logins,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentity(cognitoIdentityParams)();\n    } else {\n      var cognitoIdentityParams = {\n        logins: logins,\n        identityPoolId: identityPoolId,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n    }\n\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n\n  CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n    var _this = this;\n\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n        region = _a.region,\n        userPoolId = _a.userPoolId,\n        identityPoolId = _a.identityPoolId;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    /*\n        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n        https://git.io/JeDxU\n         Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n    */\n\n    var credentialsProvider = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this._getGuestIdentityId()];\n\n            case 1:\n              guestIdentityId = _c.sent();\n              if (!!guestIdentityId) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , cognitoClient.send(new GetIdCommand({\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              }))];\n\n            case 2:\n              IdentityId = _c.sent().IdentityId;\n              generatedOrRetrievedIdentityId = IdentityId;\n              _c.label = 3;\n\n            case 3:\n              return [4\n              /*yield*/\n              , cognitoClient.send(new GetCredentialsForIdentityCommand({\n                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n                Logins: logins\n              }))];\n\n            case 4:\n              _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;\n              this._identityId = primaryIdentityId;\n              if (!guestIdentityId) return [3\n              /*break*/\n              , 6]; // if guestIdentity is found and used by GetCredentialsForIdentity\n              // it will be linked to the logins provided, and disqualified as an unauth identity\n\n              logger.debug(\"The guest identity \" + guestIdentityId + \" has been successfully linked to the logins\");\n\n              if (guestIdentityId === primaryIdentityId) {\n                logger.debug(\"The guest identity \" + guestIdentityId + \" has become the primary identity\");\n              } // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n\n\n              return [4\n              /*yield*/\n              , this._removeGuestIdentityId()];\n\n            case 5:\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              _c.sent();\n\n              _c.label = 6;\n\n            case 6:\n              // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n              return [2\n              /*return*/\n              , {\n                accessKeyId: AccessKeyId,\n                secretAccessKey: SecretKey,\n                sessionToken: SessionToken,\n                expiration: Expiration,\n                identityId: primaryIdentityId\n              }];\n          }\n        });\n      });\n    };\n\n    var credentials = credentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n\n  CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n\n    var that = this;\n    return new Promise(function (res, rej) {\n      credentials.then(function (credentials) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug('Load credentials successfully', credentials);\n\n                if (this._identityId && !credentials.identityId) {\n                  credentials['identityId'] = this._identityId;\n                }\n\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\n                if (source === 'federated') {\n                  user = Object.assign({\n                    id: this._credentials.identityId\n                  }, info.user);\n                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n\n                  try {\n                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                      provider: provider,\n                      token: token,\n                      user: user,\n                      expires_at: expires_at,\n                      identity_id: identity_id\n                    }));\n                  } catch (e) {\n                    logger.debug('Failed to put federated info into auth storage', e);\n                  }\n                }\n\n                if (!(source === 'guest')) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this._setGuestIdentityId(credentials.identityId)];\n\n              case 1:\n                _a.sent();\n\n                _a.label = 2;\n\n              case 2:\n                res(that._credentials);\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }).catch(function (err) {\n        if (err) {\n          logger.debug('Failed to load credentials', credentials);\n          logger.debug('Error loading credentials', err);\n          rej(err);\n          return;\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n\n  CredentialsClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this._credentials = null;\n        this._credentials_source = null;\n        logger.debug('removing aws-amplify-federatedInfo from storage');\n\n        this._storage.removeItem('aws-amplify-federatedInfo');\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /* operations on local stored guest identity */\n\n\n  CredentialsClass.prototype._getGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];\n\n          case 3:\n            e_1 = _a.sent();\n            logger.debug('Failed to get the cached guest identityId', e_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setGuestIdentityId = function (identityId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_2 = _a.sent();\n            logger.debug('Failed to cache guest identityId', e_2);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._removeGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId;\n      return __generator(this, function (_a) {\n        identityPoolId = this._config.identityPoolId;\n        logger.debug(\"removing \" + this._getCognitoIdentityIdStorageKey(identityPoolId) + \" from storage\");\n\n        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n\n\n  CredentialsClass.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n\n  return CredentialsClass;\n}();\n\nexport { CredentialsClass };\nexport var Credentials = new CredentialsClass(null);\nAmplify.register(Credentials);","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","StorageHelper","makeQuerablePromise","FacebookOAuth","GoogleOAuth","jitteredExponentialRetry","getAmplifyUserAgent","Amplify","fromCognitoIdentity","fromCognitoIdentityPool","CognitoIdentityClient","GetIdCommand","GetCredentialsForIdentityCommand","parseAWSExports","Hub","logger","CREDENTIALS_TTL","COGNITO_IDENTITY_KEY_PREFIX","AMPLIFY_SYMBOL","Symbol","for","dispatchCredentialsEvent","event","data","message","dispatch","config","undefined","configure","_refreshHandlers","refreshGoogleToken","refreshFacebookToken","CredentialsClass","_credentials_source","_config","Object","assign","refreshHandlers","__assign","_storage","storage","getStorage","_storageSync","Promise","resolve","debug","_pickupCredentials","identityPoolId","_gettingCredPromise","isPending","_keepAlive","cred","_credentials","_isExpired","_isPastTTL","_a","Auth","currentUserCredentials","_setCredentialsForGuest","currentUserPoolUser","user_1","_b","currentSession","session","refreshToken_1","refreshToken","refreshRequest","res","rej","refreshSession","err","err_1","federatedInfo","user","token","identity_id","expires_at","Date","getFullYear","that","getTime","_setCredentialsFromFederation","provider","_providerRefreshWithRetry","refreshHandler","clear","reject","MAX_DELAY_MS","then","_this","catch","isNetworkError","e","toLowerCase","lastIndexOf","length","credentials","ts","now","expiration","_nextCredentialsRefresh","region","mandatorySignIn","_c","_getGuestIdentityId","identityId","_identityId","_d","cognitoClient","customUserAgent","cognitoIdentityParams","client","credentialsProvider","send","IdentityPoolId","IdentityId","credentialsFromCognitoIdentity","_loadCredentials","name","_removeGuestIdentityId","params","domains","google","facebook","amazon","developer","domain","logins","idToken","getIdToken","getJwtToken","userPoolId","key","guestIdentityId","Logins","generatedOrRetrievedIdentityId","AccessKeyId","Expiration","SecretKey","SessionToken","primaryIdentityId","accessKeyId","secretAccessKey","sessionToken","source","authenticated","info","id","setItem","JSON","stringify","_setGuestIdentityId","_setCredentialsFromSession","removeItem","getItem","_getCognitoIdentityIdStorageKey","e_1","e_2","Credentials","register"],"sources":["/home/dalienst/node_modules/@aws-amplify/core/src/Credentials.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { ICredentials } from './types';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport {\n\tfromCognitoIdentity,\n\tFromCognitoIdentityParameters,\n\tfromCognitoIdentityPool,\n\tFromCognitoIdentityPoolParameters,\n} from '@aws-sdk/credential-provider-cognito-identity';\nimport {\n\tCognitoIdentityClient,\n\tGetIdCommand,\n\tGetCredentialsForIdentityCommand,\n} from '@aws-sdk/client-cognito-identity';\nimport { CredentialProvider } from '@aws-sdk/types';\nimport { parseAWSExports } from './parseAWSExports';\nimport { Hub } from './Hub';\n\nconst logger = new Logger('Credentials');\n\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nconst COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\n\nconst dispatchCredentialsEvent = (\n\tevent: string,\n\tdata: any,\n\tmessage: string\n) => {\n\tHub.dispatch('core', { event, data, message }, 'Credentials', AMPLIFY_SYMBOL);\n};\n\nexport class CredentialsClass {\n\tprivate _config;\n\tprivate _credentials;\n\tprivate _credentials_source;\n\tprivate _gettingCredPromise = null;\n\tprivate _refreshHandlers = {};\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate _identityId;\n\tprivate _nextCredentialsRefresh: Number;\n\n\t// Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\tAuth = undefined;\n\n\tconstructor(config) {\n\t\tthis.configure(config);\n\t\tthis._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n\t\tthis._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Credentials';\n\t}\n\n\tpublic getCredSource() {\n\t\treturn this._credentials_source;\n\t}\n\n\tpublic configure(config) {\n\t\tif (!config) return this._config || {};\n\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\tconst { refreshHandlers } = this._config;\n\t\t// If the developer has provided an object of refresh handlers,\n\t\t// then we can merge the provided handlers with the current handlers.\n\t\tif (refreshHandlers) {\n\t\t\tthis._refreshHandlers = {\n\t\t\t\t...this._refreshHandlers,\n\t\t\t\t...refreshHandlers,\n\t\t\t};\n\t\t}\n\n\t\tthis._storage = this._config.storage;\n\n\t\tif (!this._storage) {\n\t\t\tthis._storage = new StorageHelper().getStorage();\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\tdispatchCredentialsEvent(\n\t\t\t'credentials_configured',\n\t\t\tnull,\n\t\t\t`Credentials has been configured successfully`\n\t\t);\n\n\t\treturn this._config;\n\t}\n\n\tpublic get() {\n\t\tlogger.debug('getting credentials');\n\t\treturn this._pickupCredentials();\n\t}\n\n\t// currently we only store the guest identity in local storage\n\tprivate _getCognitoIdentityIdStorageKey(identityPoolId: string) {\n\t\treturn `${COGNITO_IDENTITY_KEY_PREFIX}${identityPoolId}`;\n\t}\n\n\tprivate _pickupCredentials() {\n\t\tlogger.debug('picking up credentials');\n\t\tif (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n\t\t\tlogger.debug('getting new cred promise');\n\t\t\tthis._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n\t\t} else {\n\t\t\tlogger.debug('getting old cred promise');\n\t\t}\n\t\treturn this._gettingCredPromise;\n\t}\n\n\tprivate async _keepAlive() {\n\t\tlogger.debug('checking if credentials exists and not expired');\n\t\tconst cred = this._credentials;\n\t\tif (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n\t\t\tlogger.debug('credentials not changed and not expired, directly return');\n\t\t\treturn Promise.resolve(cred);\n\t\t}\n\n\t\tlogger.debug('need to get a new credential or refresh the existing one');\n\n\t\t// Some use-cases don't require Auth for signing in, but use Credentials for guest users (e.g. Analytics)\n\t\t// Prefer locally scoped `Auth`, but fallback to registered `Amplify.Auth` global otherwise.\n\t\tconst { Auth = Amplify.Auth } = this;\n\n\t\tif (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n\t\t\t// If Auth module is not imported, do a best effort to get guest credentials\n\t\t\treturn this._setCredentialsForGuest();\n\t\t}\n\n\t\tif (!this._isExpired(cred) && this._isPastTTL()) {\n\t\t\tlogger.debug('ttl has passed but token is not yet expired');\n\t\t\ttry {\n\t\t\t\tconst user = await Auth.currentUserPoolUser();\n\t\t\t\tconst session = await Auth.currentSession();\n\t\t\t\tconst refreshToken = session.refreshToken;\n\t\t\t\tconst refreshRequest = new Promise((res, rej) => {\n\t\t\t\t\tuser.refreshSession(refreshToken, (err, data) => {\n\t\t\t\t\t\treturn err ? rej(err) : res(data);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tawait refreshRequest; // note that rejections will be caught and handled in the catch block.\n\t\t\t} catch (err) {\n\t\t\t\t// should not throw because user might just be on guest access or is authenticated through federation\n\t\t\t\tlogger.debug('Error attempting to refreshing the session', err);\n\t\t\t}\n\t\t}\n\t\treturn Auth.currentUserCredentials();\n\t}\n\n\tpublic refreshFederatedToken(federatedInfo) {\n\t\tlogger.debug('Getting federated credentials');\n\t\tconst { provider, user, token, identity_id } = federatedInfo;\n\t\tlet { expires_at } = federatedInfo;\n\n\t\t// Make sure expires_at is in millis\n\t\texpires_at =\n\t\t\tnew Date(expires_at).getFullYear() === 1970\n\t\t\t\t? expires_at * 1000\n\t\t\t\t: expires_at;\n\n\t\tconst that = this;\n\t\tlogger.debug('checking if federated jwt token expired');\n\t\tif (expires_at > new Date().getTime()) {\n\t\t\t// if not expired\n\t\t\tlogger.debug('token not expired');\n\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\tprovider,\n\t\t\t\ttoken,\n\t\t\t\tuser,\n\t\t\t\tidentity_id,\n\t\t\t\texpires_at,\n\t\t\t});\n\t\t} else {\n\t\t\t// if refresh handler exists\n\t\t\tif (\n\t\t\t\tthat._refreshHandlers[provider] &&\n\t\t\t\ttypeof that._refreshHandlers[provider] === 'function'\n\t\t\t) {\n\t\t\t\tlogger.debug('getting refreshed jwt token from federation provider');\n\t\t\t\treturn this._providerRefreshWithRetry({\n\t\t\t\t\trefreshHandler: that._refreshHandlers[provider],\n\t\t\t\t\tprovider,\n\t\t\t\t\tuser,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.debug('no refresh handler for provider:', provider);\n\t\t\t\tthis.clear();\n\t\t\t\treturn Promise.reject('no refresh handler for provider');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _providerRefreshWithRetry({ refreshHandler, provider, user }) {\n\t\tconst MAX_DELAY_MS = 10 * 1000;\n\t\t// refreshHandler will retry network errors, otherwise it will\n\t\t// return NonRetryableError to break out of jitteredExponentialRetry\n\t\treturn jitteredExponentialRetry<any>(refreshHandler, [], MAX_DELAY_MS)\n\t\t\t.then(data => {\n\t\t\t\tlogger.debug('refresh federated token sucessfully', data);\n\t\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\t\tprovider,\n\t\t\t\t\ttoken: data.token,\n\t\t\t\t\tuser,\n\t\t\t\t\tidentity_id: data.identity_id,\n\t\t\t\t\texpires_at: data.expires_at,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconst isNetworkError =\n\t\t\t\t\ttypeof e === 'string' &&\n\t\t\t\t\te.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n\t\t\t\tif (!isNetworkError) {\n\t\t\t\t\tthis.clear();\n\t\t\t\t}\n\n\t\t\t\tlogger.debug('refresh federated token failed', e);\n\t\t\t\treturn Promise.reject('refreshing federation token failed: ' + e);\n\t\t\t});\n\t}\n\n\tprivate _isExpired(credentials): boolean {\n\t\tif (!credentials) {\n\t\t\tlogger.debug('no credentials for expiration check');\n\t\t\treturn true;\n\t\t}\n\t\tlogger.debug('are these credentials expired?', credentials);\n\t\tconst ts = Date.now();\n\n\t\t/* returns date object.\n\t\t\thttps://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n\t\t*/\n\t\tconst { expiration } = credentials;\n\t\treturn expiration.getTime() <= ts;\n\t}\n\n\tprivate _isPastTTL(): boolean {\n\t\treturn this._nextCredentialsRefresh <= Date.now();\n\t}\n\n\tprivate async _setCredentialsForGuest() {\n\t\tlogger.debug('setting credentials for guest');\n\t\tif (!this._config?.identityPoolId) {\n\t\t\t// If Credentials are not configured thru Auth module,\n\t\t\t// doing best effort to check if the library was configured\n\t\t\tthis._config = Object.assign(\n\t\t\t\t{},\n\t\t\t\tthis._config,\n\t\t\t\tparseAWSExports(this._config || {}).Auth\n\t\t\t);\n\t\t}\n\t\tconst { identityPoolId, region, mandatorySignIn } = this._config;\n\n\t\tif (mandatorySignIn) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'cannot get guest credentials when mandatory signin enabled'\n\t\t\t);\n\t\t}\n\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t}\n\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst identityId = (this._identityId = await this._getGuestIdentityId());\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identityId) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\t/*\n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t\t*/\n\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t};\n\n\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t);\n\n\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t};\n\n\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t}\n\n\t\treturn this._loadCredentials(credentials, 'guest', false, null)\n\t\t\t.then(res => {\n\t\t\t\treturn res;\n\t\t\t})\n\t\t\t.catch(async e => {\n\t\t\t\t// If identity id is deleted in the console, we make one attempt to recreate it\n\t\t\t\t// and remove existing id from cache.\n\t\t\t\tif (\n\t\t\t\t\te.name === 'ResourceNotFoundException' &&\n\t\t\t\t\te.message === `Identity '${identityId}' not found.`\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('Failed to load guest credentials');\n\t\t\t\t\tawait this._removeGuestIdentityId();\n\n\t\t\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t\t\t};\n\n\t\t\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this._loadCredentials(credentials, 'guest', false, null);\n\t\t\t\t} else {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate _setCredentialsFromFederation(params) {\n\t\tconst { provider, token, identity_id } = params;\n\t\tconst domains = {\n\t\t\tgoogle: 'accounts.google.com',\n\t\t\tfacebook: 'graph.facebook.com',\n\t\t\tamazon: 'www.amazon.com',\n\t\t\tdeveloper: 'cognito-identity.amazonaws.com',\n\t\t};\n\n\t\t// Use custom provider url instead of the predefined ones\n\t\tconst domain = domains[provider] || provider;\n\t\tif (!domain) {\n\t\t\treturn Promise.reject('You must specify a federated provider');\n\t\t}\n\n\t\tconst logins = {};\n\t\tlogins[domain] = token;\n\n\t\tconst { identityPoolId, region } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identity_id) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId: identity_id,\n\t\t\t\tlogins,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityPoolParameters = {\n\t\t\t\tlogins,\n\t\t\t\tidentityPoolId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n\t\t}\n\t\treturn this._loadCredentials(credentials, 'federated', true, params);\n\t}\n\n\tprivate _setCredentialsFromSession(session): Promise<ICredentials> {\n\t\tlogger.debug('set credentials from session');\n\t\tconst idToken = session.getIdToken().getJwtToken();\n\t\tconst { region, userPoolId, identityPoolId } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\t\tconst key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n\t\tconst logins = {};\n\t\tlogins[key] = idToken;\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t/* \n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t*/\n\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t// try to fetch the local stored guest identity, if found, we will associate it with the logins\n\t\t\tconst guestIdentityId = await this._getGuestIdentityId();\n\n\t\t\tlet generatedOrRetrievedIdentityId;\n\t\t\tif (!guestIdentityId) {\n\t\t\t\t// for a first-time user, this will return a brand new identity\n\t\t\t\t// for a returning user, this will retrieve the previous identity assocaited with the logins\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\tLogins: logins,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tgeneratedOrRetrievedIdentityId = IdentityId;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tCredentials: { AccessKeyId, Expiration, SecretKey, SessionToken },\n\t\t\t\t// single source of truth for the primary identity associated with the logins\n\t\t\t\t// only if a guest identity is used for a first-time user, that guest identity will become its primary identity\n\t\t\t\tIdentityId: primaryIdentityId,\n\t\t\t} = await cognitoClient.send(\n\t\t\t\tnew GetCredentialsForIdentityCommand({\n\t\t\t\t\tIdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n\t\t\t\t\tLogins: logins,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tthis._identityId = primaryIdentityId;\n\t\t\tif (guestIdentityId) {\n\t\t\t\t// if guestIdentity is found and used by GetCredentialsForIdentity\n\t\t\t\t// it will be linked to the logins provided, and disqualified as an unauth identity\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`The guest identity ${guestIdentityId} has been successfully linked to the logins`\n\t\t\t\t);\n\t\t\t\tif (guestIdentityId === primaryIdentityId) {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t`The guest identity ${guestIdentityId} has become the primary identity`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n\t\t\t\tawait this._removeGuestIdentityId();\n\t\t\t}\n\n\t\t\t// https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n\t\t\treturn {\n\t\t\t\taccessKeyId: AccessKeyId,\n\t\t\t\tsecretAccessKey: SecretKey,\n\t\t\t\tsessionToken: SessionToken,\n\t\t\t\texpiration: Expiration,\n\t\t\t\tidentityId: primaryIdentityId,\n\t\t\t};\n\t\t};\n\n\t\tconst credentials = credentialsProvider().catch(async err => {\n\t\t\tthrow err;\n\t\t});\n\n\t\treturn this._loadCredentials(credentials, 'userPool', true, null);\n\t}\n\n\tprivate _loadCredentials(\n\t\tcredentials,\n\t\tsource,\n\t\tauthenticated,\n\t\tinfo\n\t): Promise<ICredentials> {\n\t\tconst that = this;\n\t\treturn new Promise((res, rej) => {\n\t\t\tcredentials\n\t\t\t\t.then(async credentials => {\n\t\t\t\t\tlogger.debug('Load credentials successfully', credentials);\n\t\t\t\t\tif (this._identityId && !credentials.identityId) {\n\t\t\t\t\t\tcredentials['identityId'] = this._identityId;\n\t\t\t\t\t}\n\n\t\t\t\t\tthat._credentials = credentials;\n\t\t\t\t\tthat._credentials.authenticated = authenticated;\n\t\t\t\t\tthat._credentials_source = source;\n\t\t\t\t\tthat._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\t\t\t\t\tif (source === 'federated') {\n\t\t\t\t\t\tconst user = Object.assign(\n\t\t\t\t\t\t\t{ id: this._credentials.identityId },\n\t\t\t\t\t\t\tinfo.user\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst { provider, token, expires_at, identity_id } = info;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._storage.setItem(\n\t\t\t\t\t\t\t\t'aws-amplify-federatedInfo',\n\t\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t\t\t\tidentity_id,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('Failed to put federated info into auth storage', e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (source === 'guest') {\n\t\t\t\t\t\tawait this._setGuestIdentityId(credentials.identityId);\n\t\t\t\t\t}\n\t\t\t\t\tres(that._credentials);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Failed to load credentials', credentials);\n\t\t\t\t\t\tlogger.debug('Error loading credentials', err);\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\tpublic set(params, source): Promise<ICredentials> {\n\t\tif (source === 'session') {\n\t\t\treturn this._setCredentialsFromSession(params);\n\t\t} else if (source === 'federation') {\n\t\t\treturn this._setCredentialsFromFederation(params);\n\t\t} else if (source === 'guest') {\n\t\t\treturn this._setCredentialsForGuest();\n\t\t} else {\n\t\t\tlogger.debug('no source specified for setting credentials');\n\t\t\treturn Promise.reject('invalid source');\n\t\t}\n\t}\n\n\tpublic async clear() {\n\t\tthis._credentials = null;\n\t\tthis._credentials_source = null;\n\t\tlogger.debug('removing aws-amplify-federatedInfo from storage');\n\t\tthis._storage.removeItem('aws-amplify-federatedInfo');\n\t}\n\n\t/* operations on local stored guest identity */\n\tprivate async _getGuestIdentityId(): Promise<string> {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\treturn this._storage.getItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to get the cached guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _setGuestIdentityId(identityId: string) {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\tthis._storage.setItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId),\n\t\t\t\tidentityId\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to cache guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _removeGuestIdentityId() {\n\t\tconst { identityPoolId } = this._config;\n\t\tlogger.debug(\n\t\t\t`removing ${this._getCognitoIdentityIdStorageKey(\n\t\t\t\tidentityPoolId\n\t\t\t)} from storage`\n\t\t);\n\t\tthis._storage.removeItem(\n\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t);\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic shear(credentials) {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n}\n\nexport const Credentials = new CredentialsClass(null);\n\nAmplify.register(Credentials);\n"]},"metadata":{},"sourceType":"module"}
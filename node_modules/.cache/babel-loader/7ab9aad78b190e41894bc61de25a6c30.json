{"ast":null,"code":"import { __awaiter, __extends, __generator, __read, __rest, __spread } from \"tslib\";\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\nvar logger = new Logger('AWSAppSyncProvider');\n/**\n * @deprecated Unused, all usecases have migrated to AWSAppSyncRealtimeProvider\n */\n\nvar AWSAppSyncProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSAppSyncProvider, _super);\n\n  function AWSAppSyncProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._topicClient = new Map();\n    _this._topicAlias = new Map();\n    return _this;\n  }\n\n  Object.defineProperty(AWSAppSyncProvider.prototype, \"endpoint\", {\n    get: function () {\n      throw new Error('Not supported');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSAppSyncProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncProvider';\n  };\n\n  AWSAppSyncProvider.prototype.publish = function (topics, msg, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n\n  AWSAppSyncProvider.prototype._cleanUp = function (clientId) {\n    var _this = this;\n\n    var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n      var _b = __read(_a, 2),\n          c = _b[1];\n\n      return c.clientId === clientId;\n    }).map(function (_a) {\n      var _b = __read(_a, 1),\n          t = _b[0];\n\n      return t;\n    });\n    topicsForClient.forEach(function (t) {\n      return _this._cleanUpForTopic(t);\n    });\n  };\n\n  AWSAppSyncProvider.prototype._cleanUpForTopic = function (topic) {\n    this._topicClient.delete(topic);\n\n    this._topicAlias.delete(topic);\n  };\n\n  AWSAppSyncProvider.prototype.onDisconnect = function (_a) {\n    var _this = this;\n\n    var clientId = _a.clientId,\n        errorCode = _a.errorCode,\n        args = __rest(_a, [\"clientId\", \"errorCode\"]);\n\n    if (errorCode !== 0) {\n      var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n        var _b = __read(_a, 2),\n            c = _b[1];\n\n        return c.clientId === clientId;\n      }).map(function (_a) {\n        var _b = __read(_a, 1),\n            t = _b[0];\n\n        return t;\n      });\n      topicsForClient.forEach(function (topic) {\n        if (_this._topicObservers.has(topic)) {\n          _this._topicObservers.get(topic).forEach(function (obs) {\n            if (!obs.closed) {\n              obs.error(args);\n            }\n          });\n\n          _this._topicObservers.delete(topic);\n        }\n      });\n\n      this._cleanUp(clientId);\n    }\n  };\n\n  AWSAppSyncProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId, function () {\n              return null;\n            })];\n\n          case 1:\n            client = _a.sent();\n            return [4\n            /*yield*/\n            , _super.prototype.disconnect.call(this, clientId)];\n\n          case 2:\n            _a.sent();\n\n            this._cleanUp(clientId);\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var result = new Observable(function (observer) {\n      var targetTopics = [].concat(topics);\n      logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, mqttConnections, newSubscriptions, newAliases, map;\n\n          var _this = this;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                // Add these topics to map\n                targetTopics.forEach(function (t) {\n                  if (!_this._topicObservers.has(t)) {\n                    _this._topicObservers.set(t, new Set());\n                  }\n\n                  _this._topicObservers.get(t).add(observer);\n                });\n                _a = options.mqttConnections, mqttConnections = _a === void 0 ? [] : _a, newSubscriptions = options.newSubscriptions;\n                newAliases = Object.entries(newSubscriptions).map(function (_a) {\n                  var _b = __read(_a, 2),\n                      alias = _b[0],\n                      v = _b[1];\n\n                  return [v.topic, alias];\n                }); // Merge new aliases with old ones\n\n                this._topicAlias = new Map(__spread(Array.from(this._topicAlias.entries()), newAliases));\n                map = Object.entries(targetTopics.reduce(function (acc, elem) {\n                  var connectionInfoForTopic = mqttConnections.find(function (c) {\n                    return c.topics.indexOf(elem) > -1;\n                  });\n\n                  if (connectionInfoForTopic) {\n                    var clientId = connectionInfoForTopic.client,\n                        url = connectionInfoForTopic.url;\n\n                    if (!acc[clientId]) {\n                      acc[clientId] = {\n                        url: url,\n                        topics: new Set()\n                      };\n                    }\n\n                    acc[clientId].topics.add(elem);\n                  }\n\n                  return acc;\n                }, {})); // reconnect everything we have in the map\n\n                return [4\n                /*yield*/\n                , Promise.all(map.map(function (_a) {\n                  var _b = __read(_a, 2),\n                      clientId = _b[0],\n                      _c = _b[1],\n                      url = _c.url,\n                      topics = _c.topics;\n\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var client, err_1;\n\n                    var _this = this;\n\n                    return __generator(this, function (_d) {\n                      switch (_d.label) {\n                        case 0:\n                          client = null;\n                          _d.label = 1;\n\n                        case 1:\n                          _d.trys.push([1, 3,, 4]);\n\n                          return [4\n                          /*yield*/\n                          , this.connect(clientId, {\n                            clientId: clientId,\n                            url: url\n                          })];\n\n                        case 2:\n                          client = _d.sent();\n                          return [3\n                          /*break*/\n                          , 4];\n\n                        case 3:\n                          err_1 = _d.sent();\n                          observer.error({\n                            message: 'Failed to connect',\n                            error: err_1\n                          });\n                          observer.complete();\n                          return [2\n                          /*return*/\n                          , undefined];\n\n                        case 4:\n                          // subscribe to all topics for this client\n                          // store topic-client mapping\n                          topics.forEach(function (topic) {\n                            if (client.isConnected()) {\n                              client.subscribe(topic);\n\n                              _this._topicClient.set(topic, client);\n                            }\n                          });\n                          return [2\n                          /*return*/\n                          , client];\n                      }\n                    });\n                  });\n                }))];\n\n              case 1:\n                // reconnect everything we have in the map\n                _b.sent();\n\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n        targetTopics.forEach(function (t) {\n          var client = _this._topicClient.get(t);\n\n          if (client && client.isConnected()) {\n            client.unsubscribe(t);\n\n            _this._topicClient.delete(t);\n\n            if (!Array.from(_this._topicClient.values()).some(function (c) {\n              return c === client;\n            })) {\n              _this.disconnect(client.clientId);\n            }\n          }\n\n          _this._topicObservers.delete(t);\n        });\n      };\n    });\n    return Observable.from(result).map(function (value) {\n      var topic = _this.getTopicForValue(value);\n\n      var alias = _this._topicAlias.get(topic);\n\n      value.data = Object.entries(value.data).reduce(function (obj, _a) {\n        var _b = __read(_a, 2),\n            origKey = _b[0],\n            val = _b[1];\n\n        return obj[alias || origKey] = val, obj;\n      }, {});\n      return value;\n    });\n  };\n\n  return AWSAppSyncProvider;\n}(MqttOverWSProvider);\n\nexport { AWSAppSyncProvider };","map":{"version":3,"mappings":"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","names":["Observable","ConsoleLogger","Logger","MqttOverWSProvider","logger","__extends","_this","Map","Object","AWSAppSyncProvider","Error","topics","msg","options","clientId","topicsForClient","Array","from","_topicClient","entries","filter","_a","_b","c","map","t","forEach","_cleanUpForTopic","topic","delete","_topicAlias","errorCode","args","_topicObservers","has","get","obs","closed","error","_cleanUp","clientsQueue","client","_super","disconnect","call","result","targetTopics","concat","debug","join","set","Set","add","observer","newSubscriptions","newAliases","alias","v","__spread","reduce","acc","elem","connectionInfoForTopic","mqttConnections","find","indexOf","url","Promise","all","_c","connect","_d","message","err_1","complete","undefined","isConnected","subscribe","unsubscribe","values","some","getTopicForValue","value","data","obj","origKey","val"],"sources":["/home/dalienst/node_modules/@aws-amplify/pubsub/src/Providers/AWSAppSyncProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Client } from 'paho-mqtt';\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\n\nconst logger = new Logger('AWSAppSyncProvider');\n\n/**\n * @deprecated Unused, all usecases have migrated to AWSAppSyncRealtimeProvider\n */\nexport class AWSAppSyncProvider extends MqttOverWSProvider {\n\tprotected get endpoint() {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSAppSyncProvider';\n\t}\n\n\tpublic async publish(topics: string[] | string, msg: any, options?: any) {\n\t\tthrow new Error('Operation not supported');\n\t}\n\n\tprivate _cleanUp(clientId: string) {\n\t\tconst topicsForClient = Array.from(this._topicClient.entries())\n\t\t\t.filter(([, c]) => c.clientId === clientId)\n\t\t\t.map(([t]) => t);\n\n\t\ttopicsForClient.forEach(t => this._cleanUpForTopic(t));\n\t}\n\n\tprivate _cleanUpForTopic(topic) {\n\t\tthis._topicClient.delete(topic);\n\t\tthis._topicAlias.delete(topic);\n\t}\n\n\tpublic onDisconnect({ clientId, errorCode, ...args }) {\n\t\tif (errorCode !== 0) {\n\t\t\tconst topicsForClient = Array.from(this._topicClient.entries())\n\t\t\t\t.filter(([, c]) => c.clientId === clientId)\n\t\t\t\t.map(([t]) => t);\n\n\t\t\ttopicsForClient.forEach(topic => {\n\t\t\t\tif (this._topicObservers.has(topic)) {\n\t\t\t\t\tthis._topicObservers.get(topic).forEach(obs => {\n\t\t\t\t\t\tif (!obs.closed) {\n\t\t\t\t\t\t\tobs.error(args);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._cleanUp(clientId);\n\t\t}\n\t}\n\n\tprivate _topicClient: Map<string, Client> = new Map();\n\n\tprivate _topicAlias: Map<string, string> = new Map();\n\n\tprotected async disconnect(clientId: string): Promise<void> {\n\t\tconst client = await this.clientsQueue.get(clientId, () => null);\n\n\t\tawait super.disconnect(clientId);\n\n\t\tthis._cleanUp(clientId);\n\t}\n\n\tsubscribe(topics: string[] | string, options: any = {}): Observable<any> {\n\t\tconst result = new Observable<any>(observer => {\n\t\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\t\tlogger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\n\t\t\t(async () => {\n\t\t\t\t// Add these topics to map\n\t\t\t\ttargetTopics.forEach(t => {\n\t\t\t\t\tif (!this._topicObservers.has(t)) {\n\t\t\t\t\t\tthis._topicObservers.set(t, new Set());\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._topicObservers.get(t).add(observer);\n\t\t\t\t});\n\n\t\t\t\tconst { mqttConnections = [], newSubscriptions } = options;\n\n\t\t\t\t// creates a map of {\"topic\": \"alias\"}\n\t\t\t\tconst newAliases = Object.entries(newSubscriptions).map(\n\t\t\t\t\t([alias, v]: [string, { topic: string }]) => [v.topic, alias]\n\t\t\t\t);\n\n\t\t\t\t// Merge new aliases with old ones\n\t\t\t\tthis._topicAlias = new Map([\n\t\t\t\t\t...Array.from(this._topicAlias.entries()),\n\t\t\t\t\t...(newAliases as [string, string][]),\n\t\t\t\t]);\n\n\t\t\t\t// group by urls\n\t\t\t\tconst map: [string, { url: string; topics: Set<string> }][] =\n\t\t\t\t\tObject.entries(\n\t\t\t\t\t\ttargetTopics.reduce((acc, elem) => {\n\t\t\t\t\t\t\tconst connectionInfoForTopic = mqttConnections.find(\n\t\t\t\t\t\t\t\tc => c.topics.indexOf(elem) > -1\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (connectionInfoForTopic) {\n\t\t\t\t\t\t\t\tconst { client: clientId, url } = connectionInfoForTopic;\n\n\t\t\t\t\t\t\t\tif (!acc[clientId]) {\n\t\t\t\t\t\t\t\t\tacc[clientId] = {\n\t\t\t\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\t\t\t\ttopics: new Set(),\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tacc[clientId].topics.add(elem);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t}, {})\n\t\t\t\t\t);\n\n\t\t\t\t// reconnect everything we have in the map\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tmap.map(async ([clientId, { url, topics }]) => {\n\t\t\t\t\t\t// connect to new client\n\t\t\t\t\t\tlet client = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tclient = await this.connect(clientId, {\n\t\t\t\t\t\t\t\tclientId,\n\t\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tobserver.error({ message: 'Failed to connect', error: err });\n\t\t\t\t\t\t\tobserver.complete();\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// subscribe to all topics for this client\n\t\t\t\t\t\t// store topic-client mapping\n\t\t\t\t\t\ttopics.forEach(topic => {\n\t\t\t\t\t\t\tif (client.isConnected()) {\n\t\t\t\t\t\t\t\tclient.subscribe(topic);\n\n\t\t\t\t\t\t\t\tthis._topicClient.set(topic, client);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn client;\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tlogger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n\n\t\t\t\ttargetTopics.forEach(t => {\n\t\t\t\t\tconst client = this._topicClient.get(t);\n\n\t\t\t\t\tif (client && client.isConnected()) {\n\t\t\t\t\t\tclient.unsubscribe(t);\n\t\t\t\t\t\tthis._topicClient.delete(t);\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!Array.from(this._topicClient.values()).some(c => c === client)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.disconnect(client.clientId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._topicObservers.delete(t);\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\n\t\treturn Observable.from(result).map(value => {\n\t\t\tconst topic = this.getTopicForValue(value);\n\t\t\tconst alias = this._topicAlias.get(topic);\n\n\t\t\tvalue.data = Object.entries(value.data).reduce(\n\t\t\t\t(obj, [origKey, val]) => (\n\t\t\t\t\t(obj[(alias || origKey) as string] = val), obj\n\t\t\t\t),\n\t\t\t\t{}\n\t\t\t);\n\n\t\t\treturn value;\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
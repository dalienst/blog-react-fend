{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nimport { browserOrNode } from '@aws-amplify/core';\nvar HTTP_PORT = '80';\nvar HTTPS_PORT = '443';\nvar DEFAULT_PORT = RegExp(':(' + HTTP_PORT + '|' + HTTPS_PORT + ')$');\nvar a = browserOrNode().isBrowser ? document.createElement('a') : null;\nvar cache = {};\n/**\n * Parses the given url and returns an object mimicing a `Location` object.\n * @param {string} url The url to parse.\n * @return {!Object} An object with the same properties as a `Location`.\n */\n\nexport function parseUrl(u) {\n  var url = u; // All falsy values (as well as \".\") should map to the current URL.\n\n  url = !url || url === '.' ? location.href : url;\n  if (cache[url]) return cache[url];\n  a.href = url; // When parsing file relative paths (e.g. `../index.html`), IE will correctly\n  // resolve the `href` property but will keep the `..` in the `path` property.\n  // It will also not include the `host` or `hostname` properties. Furthermore,\n  // IE will sometimes return no protocol or just a colon, especially for things\n  // like relative protocol URLs (e.g. \"//google.com\").\n  // To workaround all of these issues, we reparse with the full URL from the\n  // `href` property.\n\n  if (url.charAt(0) === '.' || url.charAt(0) === '/') return parseUrl(a.href); // Don't include default ports.\n\n  var port = a.port === HTTP_PORT || a.port === HTTPS_PORT ? '' : a.port; // PhantomJS sets the port to \"0\" when using the file: protocol.\n\n  port = port === '0' ? '' : port; // Sometimes IE incorrectly includes a port for default ports\n  // (e.g. `:80` or `:443`) even when no port is specified in the URL.\n  // http://bit.ly/1rQNoMg\n\n  var host = a.host.replace(DEFAULT_PORT, ''); // Not all browser support `origin` so we have to build it.\n\n  var origin = a['origin'] ? a['origin'] : a.protocol + '//' + host; // Sometimes IE doesn't include the leading slash for pathname.\n  // http://bit.ly/1rQNoMg\n\n  var pathname = a.pathname.charAt(0) === '/' ? a.pathname : '/' + a.pathname;\n  return cache[url] = {\n    hash: a.hash,\n    host: host,\n    hostname: a.hostname,\n    href: a.href,\n    origin: origin,\n    pathname: pathname,\n    port: port,\n    protocol: a.protocol,\n    search: a.search\n  };\n}","map":{"version":3,"mappings":"AAAA;;;AAIA,SAASA,aAAT,QAA8B,mBAA9B;AAEA,IAAMC,SAAS,GAAG,IAAlB;AACA,IAAMC,UAAU,GAAG,KAAnB;AACA,IAAMC,YAAY,GAAGC,MAAM,CAAC,OAAOH,SAAP,GAAmB,GAAnB,GAAyBC,UAAzB,GAAsC,IAAvC,CAA3B;AAEA,IAAMG,CAAC,GAAGL,aAAa,GAAGM,SAAhB,GAA4BC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAA5B,GAA0D,IAApE;AACA,IAAMC,KAAK,GAAG,EAAd;AAEA;;;;;;AAKA,OAAM,SAAUC,QAAV,CAAmBC,CAAnB,EAAoB;AACzB,MAAIC,GAAG,GAAGD,CAAV,CADyB,CAEzB;;AACAC,KAAG,GAAG,CAACA,GAAD,IAAQA,GAAG,KAAK,GAAhB,GAAsBC,QAAQ,CAACC,IAA/B,GAAsCF,GAA5C;AAEA,MAAIH,KAAK,CAACG,GAAD,CAAT,EAAgB,OAAOH,KAAK,CAACG,GAAD,CAAZ;AAEhBP,GAAC,CAACS,IAAF,GAASF,GAAT,CAPyB,CASzB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIA,GAAG,CAACG,MAAJ,CAAW,CAAX,MAAkB,GAAlB,IAAyBH,GAAG,CAACG,MAAJ,CAAW,CAAX,MAAkB,GAA/C,EAAoD,OAAOL,QAAQ,CAACL,CAAC,CAACS,IAAH,CAAf,CAhB3B,CAkBzB;;AACA,MAAIE,IAAI,GAAGX,CAAC,CAACW,IAAF,KAAWf,SAAX,IAAwBI,CAAC,CAACW,IAAF,KAAWd,UAAnC,GAAgD,EAAhD,GAAqDG,CAAC,CAACW,IAAlE,CAnByB,CAqBzB;;AACAA,MAAI,GAAGA,IAAI,KAAK,GAAT,GAAe,EAAf,GAAoBA,IAA3B,CAtByB,CAwBzB;AACA;AACA;;AACA,MAAMC,IAAI,GAAGZ,CAAC,CAACY,IAAF,CAAOC,OAAP,CAAef,YAAf,EAA6B,EAA7B,CAAb,CA3ByB,CA6BzB;;AACA,MAAMgB,MAAM,GAAGd,CAAC,CAAC,QAAD,CAAD,GAAcA,CAAC,CAAC,QAAD,CAAf,GAA4BA,CAAC,CAACe,QAAF,GAAa,IAAb,GAAoBH,IAA/D,CA9ByB,CAgCzB;AACA;;AACA,MAAMI,QAAQ,GAAGhB,CAAC,CAACgB,QAAF,CAAWN,MAAX,CAAkB,CAAlB,MAAyB,GAAzB,GAA+BV,CAAC,CAACgB,QAAjC,GAA4C,MAAMhB,CAAC,CAACgB,QAArE;AAEA,SAAQZ,KAAK,CAACG,GAAD,CAAL,GAAa;AACpBU,QAAI,EAAEjB,CAAC,CAACiB,IADY;AAEpBL,QAAI,MAFgB;AAGpBM,YAAQ,EAAElB,CAAC,CAACkB,QAHQ;AAIpBT,QAAI,EAAET,CAAC,CAACS,IAJY;AAKpBK,UAAM,QALc;AAMpBE,YAAQ,UANY;AAOpBL,QAAI,MAPgB;AAQpBI,YAAQ,EAAEf,CAAC,CAACe,QARQ;AASpBI,UAAM,EAAEnB,CAAC,CAACmB;AATU,GAArB;AAWA","names":["browserOrNode","HTTP_PORT","HTTPS_PORT","DEFAULT_PORT","RegExp","a","isBrowser","document","createElement","cache","parseUrl","u","url","location","href","charAt","port","host","replace","origin","protocol","pathname","hash","hostname","search"],"sources":["/home/dalienst/node_modules/@aws-amplify/analytics/src/vendor/dom-utils/parse-url.ts"],"sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n\nimport { browserOrNode } from '@aws-amplify/core';\n\nconst HTTP_PORT = '80';\nconst HTTPS_PORT = '443';\nconst DEFAULT_PORT = RegExp(':(' + HTTP_PORT + '|' + HTTPS_PORT + ')$');\n\nconst a = browserOrNode().isBrowser ? document.createElement('a') : null;\nconst cache = {};\n\n/**\n * Parses the given url and returns an object mimicing a `Location` object.\n * @param {string} url The url to parse.\n * @return {!Object} An object with the same properties as a `Location`.\n */\nexport function parseUrl(u) {\n\tlet url = u;\n\t// All falsy values (as well as \".\") should map to the current URL.\n\turl = !url || url === '.' ? location.href : url;\n\n\tif (cache[url]) return cache[url];\n\n\ta.href = url;\n\n\t// When parsing file relative paths (e.g. `../index.html`), IE will correctly\n\t// resolve the `href` property but will keep the `..` in the `path` property.\n\t// It will also not include the `host` or `hostname` properties. Furthermore,\n\t// IE will sometimes return no protocol or just a colon, especially for things\n\t// like relative protocol URLs (e.g. \"//google.com\").\n\t// To workaround all of these issues, we reparse with the full URL from the\n\t// `href` property.\n\tif (url.charAt(0) === '.' || url.charAt(0) === '/') return parseUrl(a.href);\n\n\t// Don't include default ports.\n\tlet port = a.port === HTTP_PORT || a.port === HTTPS_PORT ? '' : a.port;\n\n\t// PhantomJS sets the port to \"0\" when using the file: protocol.\n\tport = port === '0' ? '' : port;\n\n\t// Sometimes IE incorrectly includes a port for default ports\n\t// (e.g. `:80` or `:443`) even when no port is specified in the URL.\n\t// http://bit.ly/1rQNoMg\n\tconst host = a.host.replace(DEFAULT_PORT, '');\n\n\t// Not all browser support `origin` so we have to build it.\n\tconst origin = a['origin'] ? a['origin'] : a.protocol + '//' + host;\n\n\t// Sometimes IE doesn't include the leading slash for pathname.\n\t// http://bit.ly/1rQNoMg\n\tconst pathname = a.pathname.charAt(0) === '/' ? a.pathname : '/' + a.pathname;\n\n\treturn (cache[url] = {\n\t\thash: a.hash,\n\t\thost,\n\t\thostname: a.hostname,\n\t\thref: a.href,\n\t\torigin,\n\t\tpathname,\n\t\tport,\n\t\tprotocol: a.protocol,\n\t\tsearch: a.search,\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}
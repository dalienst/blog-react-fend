{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { CloudWatchLogsClient, CreateLogGroupCommand, CreateLogStreamCommand, DescribeLogGroupsCommand, DescribeLogStreamsCommand, GetLogEventsCommand, PutLogEventsCommand } from '@aws-sdk/client-cloudwatch-logs';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseAWSExports } from '../parseAWSExports';\nimport { AWS_CLOUDWATCH_BASE_BUFFER_SIZE, AWS_CLOUDWATCH_CATEGORY, AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE, AWS_CLOUDWATCH_MAX_EVENT_SIZE, AWS_CLOUDWATCH_PROVIDER_NAME, NO_CREDS_ERROR_STRING, RETRY_ERROR_CODES } from '../Util/Constants';\nvar logger = new Logger('AWSCloudWatch');\n\nvar AWSCloudWatchProvider =\n/** @class */\nfunction () {\n  function AWSCloudWatchProvider(config) {\n    this.configure(config);\n    this._dataTracker = {\n      eventUploadInProgress: false,\n      logEvents: []\n    };\n    this._currentLogBatch = [];\n\n    this._initiateLogPushInterval();\n  }\n\n  AWSCloudWatchProvider.prototype.getProviderName = function () {\n    return AWSCloudWatchProvider.PROVIDER_NAME;\n  };\n\n  AWSCloudWatchProvider.prototype.getCategoryName = function () {\n    return AWSCloudWatchProvider.CATEGORY;\n  };\n\n  AWSCloudWatchProvider.prototype.getLogQueue = function () {\n    return this._dataTracker.logEvents;\n  };\n\n  AWSCloudWatchProvider.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    var conf = Object.assign({}, this._config, parseAWSExports(config).Logging, config);\n    this._config = conf;\n    return this._config;\n  };\n\n  AWSCloudWatchProvider.prototype.createLogGroup = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log group in CloudWatch - ', params.logGroupName);\n            cmd = new CreateLogGroupCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.error(\"error creating log group - \" + error_1);\n            throw error_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogGroups = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log groups');\n            cmd = new DescribeLogGroupsCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.error(\"error getting log group - \" + error_2);\n            throw error_2;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.createLogStream = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log stream in CloudWatch - ', params.logStreamName);\n            cmd = new CreateLogStreamCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_3 = _a.sent();\n            logger.error(\"error creating log stream - \" + error_3);\n            throw error_3;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogStreams = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log streams');\n            cmd = new DescribeLogStreamsCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_4 = _a.sent();\n            logger.error(\"error getting log stream - \" + error_4);\n            throw error_4;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting log events from stream - ', params.logStreamName);\n            cmd = new GetLogEventsCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_5 = _a.sent();\n            logger.error(\"error getting log events - \" + error_5);\n            throw error_5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.pushLogs = function (logs) {\n    logger.debug('pushing log events to Cloudwatch...');\n    this._dataTracker.logEvents = __spread(this._dataTracker.logEvents, logs);\n  };\n\n  AWSCloudWatchProvider.prototype._validateLogGroupExistsAndCreate = function (logGroupName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currGroups, foundGroups, err_1, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._dataTracker.verifiedLogGroup) {\n              return [2\n              /*return*/\n              , this._dataTracker.verifiedLogGroup];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            return [4\n            /*yield*/\n            , this.getLogGroups({\n              logGroupNamePrefix: logGroupName\n            })];\n\n          case 3:\n            currGroups = _a.sent();\n\n            if (!(typeof currGroups === 'string') && currGroups.logGroups) {\n              foundGroups = currGroups.logGroups.filter(function (group) {\n                return group.logGroupName === logGroupName;\n              });\n\n              if (foundGroups.length > 0) {\n                this._dataTracker.verifiedLogGroup = foundGroups[0];\n                return [2\n                /*return*/\n                , foundGroups[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n\n\n            return [4\n            /*yield*/\n            , this.createLogGroup({\n              logGroupName: logGroupName\n            })];\n\n          case 4:\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 5:\n            err_1 = _a.sent();\n            errString = \"failure during log group search: \" + err_1;\n            logger.error(errString);\n            throw err_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._validateLogStreamExists = function (logGroupName, logStreamName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currStreams, foundStreams, err_2, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            return [4\n            /*yield*/\n            , this.getLogStreams({\n              logGroupName: logGroupName,\n              logStreamNamePrefix: logStreamName\n            })];\n\n          case 2:\n            currStreams = _a.sent();\n\n            if (currStreams.logStreams) {\n              foundStreams = currStreams.logStreams.filter(function (stream) {\n                return stream.logStreamName === logStreamName;\n              });\n\n              if (foundStreams.length > 0) {\n                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n                return [2\n                /*return*/\n                , foundStreams[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n\n\n            return [4\n            /*yield*/\n            , this.createLogStream({\n              logGroupName: logGroupName,\n              logStreamName: logStreamName\n            })];\n\n          case 3:\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            err_2 = _a.sent();\n            errString = \"failure during log stream search: \" + err_2;\n            logger.error(errString);\n            throw err_2;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._sendLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, cmd, client, output, err_3, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            logger.debug('sending log events to stream - ', params.logStreamName);\n            cmd = new PutLogEventsCommand(params);\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 2:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 3:\n            err_3 = _a.sent();\n            errString = \"failure during log push: \" + err_3;\n            logger.error(errString);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initCloudWatchLogs = function () {\n    return new CloudWatchLogsClient({\n      region: this._config.region,\n      credentials: this._config.credentials,\n      customUserAgent: getAmplifyUserAgent(),\n      endpoint: this._config.endpoint\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get().then(function (credentials) {\n              if (!credentials) return false;\n              var cred = Credentials.shear(credentials);\n              logger.debug('set credentials for logging', cred);\n              _this._config.credentials = cred;\n              return true;\n            }).catch(function (error) {\n              logger.warn('ensure credentials error', error);\n              return false;\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._getNextSequenceToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var logStream, err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n              return [2\n              /*return*/\n              , this._nextSequenceToken];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._validateLogGroupExistsAndCreate(this._config.logGroupName)];\n\n          case 2:\n            _a.sent();\n\n            this._nextSequenceToken = undefined;\n            return [4\n            /*yield*/\n            , this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];\n\n          case 3:\n            logStream = _a.sent();\n\n            if (logStream) {\n              this._nextSequenceToken = logStream.uploadSequenceToken;\n            }\n\n            return [2\n            /*return*/\n            , this._nextSequenceToken];\n\n          case 4:\n            err_4 = _a.sent();\n            logger.error(\"failure while getting next sequence token: \" + err_4);\n            throw err_4;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._safeUploadLogEvents = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._getNextSequenceToken()];\n\n          case 1:\n            seqToken = _a.sent();\n            logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;\n            putLogsPayload = {\n              logGroupName: this._config.logGroupName,\n              logStreamName: this._config.logStreamName,\n              logEvents: logBatch,\n              sequenceToken: seqToken\n            };\n            this._dataTracker.eventUploadInProgress = true;\n            return [4\n            /*yield*/\n            , this._sendLogEvents(putLogsPayload)];\n\n          case 2:\n            sendLogEventsResponse = _a.sent();\n            this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2\n            /*return*/\n            , sendLogEventsResponse];\n\n          case 3:\n            err_5 = _a.sent();\n            logger.error(\"error during _safeUploadLogEvents: \" + err_5);\n\n            if (RETRY_ERROR_CODES.includes(err_5.name)) {\n              this._getNewSequenceTokenAndSubmit({\n                logEvents: this._currentLogBatch,\n                logGroupName: this._config.logGroupName,\n                logStreamName: this._config.logStreamName\n              });\n            } else {\n              this._dataTracker.eventUploadInProgress = false;\n              throw err_5;\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._getBufferedBatchOfLogs = function () {\n    /**\n     * CloudWatch has restrictions on the size of the log events that get sent up.\n     * We need to track both the size of each event and the total size of the batch\n     * of logs.\n     *\n     * We also need to ensure that the logs in the batch are sorted in chronological order.\n     * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n     */\n    var currentEventIdx = 0;\n    var totalByteSize = 0;\n\n    while (currentEventIdx < this._dataTracker.logEvents.length) {\n      var currentEvent = this._dataTracker.logEvents[currentEventIdx];\n      var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;\n\n      if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n        var errString = \"Log entry exceeds maximum size for CloudWatch logs. Log size: \" + eventSize + \". Truncating log message.\";\n        logger.warn(errString);\n        currentEvent.message = currentEvent.message.substring(0, eventSize);\n      }\n\n      if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE) break;\n      totalByteSize += eventSize;\n      currentEventIdx++;\n    }\n\n    this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);\n    return this._currentLogBatch;\n  };\n\n  AWSCloudWatchProvider.prototype._getNewSequenceTokenAndSubmit = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, sendLogEventsRepsonse, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            this._nextSequenceToken = undefined;\n            this._dataTracker.eventUploadInProgress = true;\n            return [4\n            /*yield*/\n            , this._getNextSequenceToken()];\n\n          case 1:\n            seqToken = _a.sent();\n            payload.sequenceToken = seqToken;\n            return [4\n            /*yield*/\n            , this._sendLogEvents(payload)];\n\n          case 2:\n            sendLogEventsRepsonse = _a.sent();\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2\n            /*return*/\n            , sendLogEventsRepsonse];\n\n          case 3:\n            err_6 = _a.sent();\n            logger.error(\"error when retrying log submission with new sequence token: \" + err_6);\n            this._dataTracker.eventUploadInProgress = false;\n            throw err_6;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initiateLogPushInterval = function () {\n    var _this = this;\n\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    this._timer = setInterval(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var err_7;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n\n              if (!this._getDocUploadPermissibility()) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this._safeUploadLogEvents()];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              return [3\n              /*break*/\n              , 4];\n\n            case 3:\n              err_7 = _a.sent();\n              logger.error(\"error when calling _safeUploadLogEvents in the timer interval - \" + err_7);\n              return [3\n              /*break*/\n              , 4];\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }, 2000);\n  };\n\n  AWSCloudWatchProvider.prototype._getDocUploadPermissibility = function () {\n    return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;\n  };\n\n  AWSCloudWatchProvider.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n  AWSCloudWatchProvider.CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n  return AWSCloudWatchProvider;\n}();\n\nexport { AWSCloudWatchProvider };","map":{"version":3,"mappings":"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","names":["CloudWatchLogsClient","CreateLogGroupCommand","CreateLogStreamCommand","DescribeLogGroupsCommand","DescribeLogStreamsCommand","GetLogEventsCommand","PutLogEventsCommand","Credentials","ConsoleLogger","Logger","getAmplifyUserAgent","parseAWSExports","AWS_CLOUDWATCH_BASE_BUFFER_SIZE","AWS_CLOUDWATCH_CATEGORY","AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE","AWS_CLOUDWATCH_MAX_EVENT_SIZE","AWS_CLOUDWATCH_PROVIDER_NAME","NO_CREDS_ERROR_STRING","RETRY_ERROR_CODES","logger","config","configure","_dataTracker","eventUploadInProgress","logEvents","_currentLogBatch","_initiateLogPushInterval","AWSCloudWatchProvider","PROVIDER_NAME","CATEGORY","_config","conf","Object","assign","Logging","params","debug","logGroupName","cmd","_ensureCredentials","credentialsOK","_a","Error","client","_initCloudWatchLogs","send","output","error","error_1","error_2","logStreamName","error_3","error_4","error_5","logs","__spread","verifiedLogGroup","getLogGroups","logGroupNamePrefix","currGroups","logGroups","foundGroups","filter","length","createLogGroup","errString","err_1","getLogStreams","logStreamNamePrefix","currStreams","logStreams","foundStreams","_nextSequenceToken","uploadSequenceToken","createLogStream","err_2","err_3","region","credentials","customUserAgent","endpoint","get","then","cred","shear","_this","catch","warn","_validateLogGroupExistsAndCreate","undefined","_validateLogStreamExists","logStream","err_4","_getNextSequenceToken","seqToken","logBatch","_getBufferedBatchOfLogs","putLogsPayload","sequenceToken","_sendLogEvents","sendLogEventsResponse","nextSequenceToken","err_5","includes","name","_getNewSequenceTokenAndSubmit","currentEventIdx","totalByteSize","currentEvent","eventSize","TextEncoder","encode","message","substring","splice","payload","sendLogEventsRepsonse","err_6","_timer","clearInterval","setInterval","_getDocUploadPermissibility","_safeUploadLogEvents","err_7"],"sources":["/home/dalienst/node_modules/@aws-amplify/core/src/Providers/AWSCloudWatchProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tCloudWatchLogsClient,\n\tCreateLogGroupCommand,\n\tCreateLogGroupCommandInput,\n\tCreateLogGroupCommandOutput,\n\tCreateLogStreamCommand,\n\tCreateLogStreamCommandInput,\n\tCreateLogStreamCommandOutput,\n\tDescribeLogGroupsCommand,\n\tDescribeLogGroupsCommandInput,\n\tDescribeLogGroupsCommandOutput,\n\tDescribeLogStreamsCommand,\n\tDescribeLogStreamsCommandInput,\n\tDescribeLogStreamsCommandOutput,\n\tGetLogEventsCommand,\n\tGetLogEventsCommandInput,\n\tGetLogEventsCommandOutput,\n\tInputLogEvent,\n\tLogGroup,\n\tLogStream,\n\tPutLogEventsCommand,\n\tPutLogEventsCommandInput,\n\tPutLogEventsCommandOutput,\n} from '@aws-sdk/client-cloudwatch-logs';\nimport {\n\tAWSCloudWatchProviderOptions,\n\tCloudWatchDataTracker,\n\tLoggingProvider,\n} from '../types/types';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseAWSExports } from '../parseAWSExports';\nimport {\n\tAWS_CLOUDWATCH_BASE_BUFFER_SIZE,\n\tAWS_CLOUDWATCH_CATEGORY,\n\tAWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE,\n\tAWS_CLOUDWATCH_MAX_EVENT_SIZE,\n\tAWS_CLOUDWATCH_PROVIDER_NAME,\n\tNO_CREDS_ERROR_STRING,\n\tRETRY_ERROR_CODES,\n} from '../Util/Constants';\n\nconst logger = new Logger('AWSCloudWatch');\n\nclass AWSCloudWatchProvider implements LoggingProvider {\n\tstatic readonly PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n\tstatic readonly CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n\n\tprivate _config: AWSCloudWatchProviderOptions;\n\tprivate _dataTracker: CloudWatchDataTracker;\n\tprivate _currentLogBatch: InputLogEvent[];\n\tprivate _timer;\n\tprivate _nextSequenceToken: string | undefined;\n\n\tconstructor(config?: AWSCloudWatchProviderOptions) {\n\t\tthis.configure(config);\n\t\tthis._dataTracker = {\n\t\t\teventUploadInProgress: false,\n\t\t\tlogEvents: [],\n\t\t};\n\t\tthis._currentLogBatch = [];\n\t\tthis._initiateLogPushInterval();\n\t}\n\n\tpublic getProviderName(): string {\n\t\treturn AWSCloudWatchProvider.PROVIDER_NAME;\n\t}\n\n\tpublic getCategoryName(): string {\n\t\treturn AWSCloudWatchProvider.CATEGORY;\n\t}\n\n\tpublic getLogQueue(): InputLogEvent[] {\n\t\treturn this._dataTracker.logEvents;\n\t}\n\n\tpublic configure(\n\t\tconfig?: AWSCloudWatchProviderOptions\n\t): AWSCloudWatchProviderOptions {\n\t\tif (!config) return this._config || {};\n\n\t\tconst conf = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tparseAWSExports(config).Logging,\n\t\t\tconfig\n\t\t);\n\t\tthis._config = conf;\n\n\t\treturn this._config;\n\t}\n\n\tpublic async createLogGroup(\n\t\tparams: CreateLogGroupCommandInput\n\t): Promise<CreateLogGroupCommandOutput> {\n\t\tlogger.debug(\n\t\t\t'creating new log group in CloudWatch - ',\n\t\t\tparams.logGroupName\n\t\t);\n\t\tconst cmd = new CreateLogGroupCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error creating log group - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogGroups(\n\t\tparams: DescribeLogGroupsCommandInput\n\t): Promise<DescribeLogGroupsCommandOutput> {\n\t\tlogger.debug('getting list of log groups');\n\n\t\tconst cmd = new DescribeLogGroupsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log group - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async createLogStream(\n\t\tparams: CreateLogStreamCommandInput\n\t): Promise<CreateLogStreamCommandOutput> {\n\t\tlogger.debug(\n\t\t\t'creating new log stream in CloudWatch - ',\n\t\t\tparams.logStreamName\n\t\t);\n\t\tconst cmd = new CreateLogStreamCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error creating log stream - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogStreams(\n\t\tparams: DescribeLogStreamsCommandInput\n\t): Promise<DescribeLogStreamsCommandOutput> {\n\t\tlogger.debug('getting list of log streams');\n\t\tconst cmd = new DescribeLogStreamsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log stream - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogEvents(\n\t\tparams: GetLogEventsCommandInput\n\t): Promise<GetLogEventsCommandOutput> {\n\t\tlogger.debug('getting log events from stream - ', params.logStreamName);\n\t\tconst cmd = new GetLogEventsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log events - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic pushLogs(logs: InputLogEvent[]): void {\n\t\tlogger.debug('pushing log events to Cloudwatch...');\n\t\tthis._dataTracker.logEvents = [...this._dataTracker.logEvents, ...logs];\n\t}\n\n\tprivate async _validateLogGroupExistsAndCreate(\n\t\tlogGroupName: string\n\t): Promise<LogGroup> {\n\t\tif (this._dataTracker.verifiedLogGroup) {\n\t\t\treturn this._dataTracker.verifiedLogGroup;\n\t\t}\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst currGroups = await this.getLogGroups({\n\t\t\t\tlogGroupNamePrefix: logGroupName,\n\t\t\t});\n\n\t\t\tif (!(typeof currGroups === 'string') && currGroups.logGroups) {\n\t\t\t\tconst foundGroups = currGroups.logGroups.filter(\n\t\t\t\t\tgroup => group.logGroupName === logGroupName\n\t\t\t\t);\n\t\t\t\tif (foundGroups.length > 0) {\n\t\t\t\t\tthis._dataTracker.verifiedLogGroup = foundGroups[0];\n\n\t\t\t\t\treturn foundGroups[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If we get to this point, it means that the specified log group does not exist\n\t\t\t * and we should create it.\n\t\t\t */\n\t\t\tawait this.createLogGroup({ logGroupName });\n\n\t\t\treturn null;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log group search: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _validateLogStreamExists(\n\t\tlogGroupName: string,\n\t\tlogStreamName: string\n\t): Promise<LogStream> {\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst currStreams = await this.getLogStreams({\n\t\t\t\tlogGroupName,\n\t\t\t\tlogStreamNamePrefix: logStreamName,\n\t\t\t});\n\n\t\t\tif (currStreams.logStreams) {\n\t\t\t\tconst foundStreams = currStreams.logStreams.filter(\n\t\t\t\t\tstream => stream.logStreamName === logStreamName\n\t\t\t\t);\n\t\t\t\tif (foundStreams.length > 0) {\n\t\t\t\t\tthis._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n\n\t\t\t\t\treturn foundStreams[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If we get to this point, it means that the specified stream does not\n\t\t\t * exist, and we should create it now.\n\t\t\t */\n\t\t\tawait this.createLogStream({\n\t\t\t\tlogGroupName,\n\t\t\t\tlogStreamName,\n\t\t\t});\n\n\t\t\treturn null;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log stream search: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _sendLogEvents(\n\t\tparams: PutLogEventsCommandInput\n\t): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tlogger.debug('sending log events to stream - ', params.logStreamName);\n\t\t\tconst cmd = new PutLogEventsCommand(params);\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\n\t\t\treturn output;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log push: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t}\n\t}\n\n\tprivate _initCloudWatchLogs() {\n\t\treturn new CloudWatchLogsClient({\n\t\t\tregion: this._config.region,\n\t\t\tcredentials: this._config.credentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\tendpoint: this._config.endpoint,\n\t\t});\n\t}\n\n\tprivate async _ensureCredentials() {\n\t\treturn await Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for logging', cred);\n\t\t\t\tthis._config.credentials = cred;\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n\n\tprivate async _getNextSequenceToken(): Promise<string> {\n\t\tif (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n\t\t\treturn this._nextSequenceToken;\n\t\t}\n\n\t\t/**\n\t\t * A sequence token will not exist if any of the following are true:\n\t\t *   ...the log group does not exist\n\t\t *   ...the log stream does not exist\n\t\t *   ...the log stream does exist but has no logs written to it yet\n\t\t */\n\t\ttry {\n\t\t\tawait this._validateLogGroupExistsAndCreate(this._config.logGroupName);\n\n\t\t\tthis._nextSequenceToken = undefined;\n\n\t\t\tconst logStream = await this._validateLogStreamExists(\n\t\t\t\tthis._config.logGroupName,\n\t\t\t\tthis._config.logStreamName\n\t\t\t);\n\n\t\t\tif (logStream) {\n\t\t\t\tthis._nextSequenceToken = logStream.uploadSequenceToken;\n\t\t\t}\n\n\t\t\treturn this._nextSequenceToken;\n\t\t} catch (err) {\n\t\t\tlogger.error(`failure while getting next sequence token: ${err}`);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _safeUploadLogEvents(): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\t/**\n\t\t\t * CloudWatch has restrictions on the size of the log events that get sent up.\n\t\t\t * We need to track both the size of each event and the total size of the batch\n\t\t\t * of logs.\n\t\t\t *\n\t\t\t * We also need to ensure that the logs in the batch are sorted in chronological order.\n\t\t\t * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n\t\t\t */\n\t\t\tconst seqToken = await this._getNextSequenceToken();\n\t\t\tconst logBatch =\n\t\t\t\tthis._currentLogBatch.length === 0\n\t\t\t\t\t? this._getBufferedBatchOfLogs()\n\t\t\t\t\t: this._currentLogBatch;\n\n\t\t\tconst putLogsPayload: PutLogEventsCommandInput = {\n\t\t\t\tlogGroupName: this._config.logGroupName,\n\t\t\t\tlogStreamName: this._config.logStreamName,\n\t\t\t\tlogEvents: logBatch,\n\t\t\t\tsequenceToken: seqToken,\n\t\t\t};\n\n\t\t\tthis._dataTracker.eventUploadInProgress = true;\n\t\t\tconst sendLogEventsResponse = await this._sendLogEvents(putLogsPayload);\n\n\t\t\tthis._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\tthis._currentLogBatch = [];\n\n\t\t\treturn sendLogEventsResponse;\n\t\t} catch (err) {\n\t\t\tlogger.error(`error during _safeUploadLogEvents: ${err}`);\n\n\t\t\tif (RETRY_ERROR_CODES.includes(err.name)) {\n\t\t\t\tthis._getNewSequenceTokenAndSubmit({\n\t\t\t\t\tlogEvents: this._currentLogBatch,\n\t\t\t\t\tlogGroupName: this._config.logGroupName,\n\t\t\t\t\tlogStreamName: this._config.logStreamName,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getBufferedBatchOfLogs(): InputLogEvent[] {\n\t\t/**\n\t\t * CloudWatch has restrictions on the size of the log events that get sent up.\n\t\t * We need to track both the size of each event and the total size of the batch\n\t\t * of logs.\n\t\t *\n\t\t * We also need to ensure that the logs in the batch are sorted in chronological order.\n\t\t * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n\t\t */\n\t\tlet currentEventIdx = 0;\n\t\tlet totalByteSize = 0;\n\n\t\twhile (currentEventIdx < this._dataTracker.logEvents.length) {\n\t\t\tconst currentEvent = this._dataTracker.logEvents[currentEventIdx];\n\t\t\tconst eventSize = currentEvent\n\t\t\t\t? new TextEncoder().encode(currentEvent.message).length +\n\t\t\t\t  AWS_CLOUDWATCH_BASE_BUFFER_SIZE\n\t\t\t\t: 0;\n\t\t\tif (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n\t\t\t\tconst errString = `Log entry exceeds maximum size for CloudWatch logs. Log size: ${eventSize}. Truncating log message.`;\n\t\t\t\tlogger.warn(errString);\n\n\t\t\t\tcurrentEvent.message = currentEvent.message.substring(0, eventSize);\n\t\t\t}\n\n\t\t\tif (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)\n\t\t\t\tbreak;\n\t\t\ttotalByteSize += eventSize;\n\t\t\tcurrentEventIdx++;\n\t\t}\n\n\t\tthis._currentLogBatch = this._dataTracker.logEvents.splice(\n\t\t\t0,\n\t\t\tcurrentEventIdx\n\t\t);\n\n\t\treturn this._currentLogBatch;\n\t}\n\n\tprivate async _getNewSequenceTokenAndSubmit(\n\t\tpayload: PutLogEventsCommandInput\n\t): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\tthis._nextSequenceToken = undefined;\n\t\t\tthis._dataTracker.eventUploadInProgress = true;\n\n\t\t\tconst seqToken = await this._getNextSequenceToken();\n\t\t\tpayload.sequenceToken = seqToken;\n\t\t\tconst sendLogEventsRepsonse = await this._sendLogEvents(payload);\n\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\tthis._currentLogBatch = [];\n\n\t\t\treturn sendLogEventsRepsonse;\n\t\t} catch (err) {\n\t\t\tlogger.error(\n\t\t\t\t`error when retrying log submission with new sequence token: ${err}`\n\t\t\t);\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate _initiateLogPushInterval(): void {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\n\t\tthis._timer = setInterval(async () => {\n\t\t\ttry {\n\t\t\t\tif (this._getDocUploadPermissibility()) {\n\t\t\t\t\tawait this._safeUploadLogEvents();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error(\n\t\t\t\t\t`error when calling _safeUploadLogEvents in the timer interval - ${err}`\n\t\t\t\t);\n\t\t\t}\n\t\t}, 2000);\n\t}\n\n\tprivate _getDocUploadPermissibility(): boolean {\n\t\treturn (\n\t\t\t(this._dataTracker.logEvents.length !== 0 ||\n\t\t\t\tthis._currentLogBatch.length !== 0) &&\n\t\t\t!this._dataTracker.eventUploadInProgress\n\t\t);\n\t}\n}\n\nexport { AWSCloudWatchProvider };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractXRProvider');\n\nvar AbstractXRProvider =\n/** @class */\nfunction () {\n  function AbstractXRProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._config = options;\n  }\n\n  AbstractXRProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    this._config = __assign(__assign({}, config), this._config);\n    logger.debug(\"configure \" + this.getProviderName(), this._config);\n    return this.options;\n  };\n\n  AbstractXRProvider.prototype.getCategory = function () {\n    return 'XR';\n  };\n\n  Object.defineProperty(AbstractXRProvider.prototype, \"options\", {\n    get: function () {\n      return __assign({}, this._config);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AbstractXRProvider;\n}();\n\nexport { AbstractXRProvider };","map":{"version":3,"mappings":";AAGA,SAASA,aAAa,IAAIC,MAA1B,QAAwC,mBAAxC;AAEA,IAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW,oBAAX,CAAf;;AAEA;AAAA;AAAA;AAGC,8BAAYE,OAAZ,EAAyC;AAA7B;AAAAA;AAA6B;;AACxC,SAAKC,OAAL,GAAeD,OAAf;AACA;;AAEDE,qDAAUC,MAAV,EAAsC;AAA5B;AAAAA;AAA4B;;AACrC,SAAKF,OAAL,GAAYG,sBAAQD,MAAR,GAAmB,KAAKF,OAAxB,CAAZ;AAEAF,UAAM,CAACM,KAAP,CAAa,eAAa,KAAKC,eAAL,EAA1B,EAAoD,KAAKL,OAAzD;AAEA,WAAO,KAAKD,OAAZ;AACA,GAND;;AAQAE;AACC,WAAO,IAAP;AACA,GAFD;;AAMAK,wBAAcL,4BAAd,EAAc,SAAd,EAAqB;SAArB;AACC,0BAAY,KAAKD,OAAjB;AACA,KAFoB;oBAAA;;AAAA,GAArB;AAwBD;AAAC,CA7CD","names":["ConsoleLogger","Logger","logger","options","_config","AbstractXRProvider","config","__assign","debug","getProviderName","Object"],"sources":["/home/dalienst/node_modules/@aws-amplify/xr/src/Providers/XRProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { XRProvider, ProviderOptions, SceneOptions } from '../types';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('AbstractXRProvider');\n\nexport abstract class AbstractXRProvider implements XRProvider {\n\tprivate _config: ProviderOptions;\n\n\tconstructor(options: ProviderOptions = {}) {\n\t\tthis._config = options;\n\t}\n\n\tconfigure(config: ProviderOptions = {}): ProviderOptions {\n\t\tthis._config = { ...config, ...this._config };\n\n\t\tlogger.debug(`configure ${this.getProviderName()}`, this._config);\n\n\t\treturn this.options;\n\t}\n\n\tgetCategory() {\n\t\treturn 'XR';\n\t}\n\n\tabstract getProviderName(): string;\n\n\tprotected get options(): ProviderOptions {\n\t\treturn { ...this._config };\n\t}\n\n\tpublic abstract loadScene(\n\t\tsceneName: string,\n\t\tdomElementId: string,\n\t\tsceneOptions: SceneOptions\n\t): void;\n\tpublic abstract isSceneLoaded(sceneName: string);\n\tpublic abstract getSceneController(sceneName: string): any;\n\tpublic abstract isVRCapable(sceneName: string): boolean;\n\tpublic abstract isVRPresentationActive(sceneName: string): boolean;\n\tpublic abstract start(sceneName: string): void;\n\tpublic abstract enterVR(sceneName: string): void;\n\tpublic abstract exitVR(sceneName: string): void;\n\tpublic abstract isMuted(sceneName: string): boolean;\n\tpublic abstract setMuted(sceneName: string, muted: boolean): void;\n\tpublic abstract onSceneEvent(\n\t\tsceneName: string,\n\t\teventName: string,\n\t\teventHandler: Function\n\t): void;\n\tpublic abstract enableAudio(sceneName: string): void;\n}\n"]},"metadata":{},"sourceType":"module"}
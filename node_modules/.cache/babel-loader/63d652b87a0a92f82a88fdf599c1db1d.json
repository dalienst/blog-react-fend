{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// import '../Common/Polyfills';\n\nimport Observable from 'zen-observable-ts';\nimport { Amplify, browserOrNode, ConsoleLogger as Logger, INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER, INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER } from '@aws-amplify/core';\nimport { AWSAppSyncProvider, AWSAppSyncRealTimeProvider } from './Providers';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('PubSub');\n\nvar PubSubClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {PubSubOptions} options - Configuration object for PubSub\n   */\n  function PubSubClass(options) {\n    this._options = options !== null && options !== void 0 ? options : {};\n    logger.debug('PubSub Options', this._options);\n    this._pluggables = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  Object.defineProperty(PubSubClass.prototype, \"awsAppSyncProvider\", {\n    /**\n     * Lazy instantiate AWSAppSyncProvider when it is required by the API category\n     */\n    get: function () {\n      if (!this._awsAppSyncProvider) {\n        this._awsAppSyncProvider = new AWSAppSyncProvider(this._options);\n      }\n\n      return this._awsAppSyncProvider;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PubSubClass.prototype, \"awsAppSyncRealTimeProvider\", {\n    /**\n     * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category\n     */\n    get: function () {\n      if (!this._awsAppSyncRealTimeProvider) {\n        this._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(this._options);\n      }\n\n      return this._awsAppSyncRealTimeProvider;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PubSubClass.prototype.getModuleName = function () {\n    return 'PubSub';\n  };\n  /**\n   * Configure PubSub part with configurations\n   *\n   * @param {PubSubOptions} config - Configuration for PubSub\n   * @return {Object} - The current configuration\n   */\n\n\n  PubSubClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var opt = options ? options.PubSub || options : {};\n    logger.debug('configure PubSub', {\n      opt: opt\n    });\n    this._options = Object.assign({}, this._options, opt);\n\n    this._pluggables.map(function (pluggable) {\n      return pluggable.configure(_this._options);\n    });\n\n    return this._options;\n  };\n  /**\n   * add plugin into Analytics category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n\n\n  PubSubClass.prototype.addPluggable = function (pluggable) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        if (pluggable && pluggable.getCategory() === 'PubSub') {\n          this._pluggables.push(pluggable);\n\n          config = pluggable.configure(this._options);\n          return [2\n          /*return*/\n          , config];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * remove plugin from PubSub category\n   * @param providerName - the name of the plugin\n   */\n\n\n  PubSubClass.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n  };\n\n  PubSubClass.prototype.getProviderByName = function (providerName) {\n    if (providerName === INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER) {\n      return this.awsAppSyncProvider;\n    }\n\n    if (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {\n      return this.awsAppSyncRealTimeProvider;\n    }\n\n    return this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n  };\n\n  PubSubClass.prototype.getProviders = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var providerName = options.provider;\n\n    if (!providerName) {\n      return this._pluggables;\n    }\n\n    var provider = this.getProviderByName(providerName);\n\n    if (!provider) {\n      throw new Error(\"Could not find provider named \" + providerName);\n    }\n\n    return [provider];\n  };\n\n  PubSubClass.prototype.publish = function (topics, msg, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.all(this.getProviders(options).map(function (provider) {\n          return provider.publish(topics, msg, options);\n        }))];\n      });\n    });\n  };\n\n  PubSubClass.prototype.subscribe = function (topics, options) {\n    if (isNode && this._options && this._options.ssr) {\n      throw new Error('Subscriptions are not supported for Server-Side Rendering (SSR)');\n    }\n\n    logger.debug('subscribe options', options);\n    var providers = this.getProviders(options);\n    return new Observable(function (observer) {\n      var observables = providers.map(function (provider) {\n        return {\n          provider: provider,\n          observable: provider.subscribe(topics, options)\n        };\n      });\n      var subscriptions = observables.map(function (_a) {\n        var provider = _a.provider,\n            observable = _a.observable;\n        return observable.subscribe({\n          start: console.error,\n          next: function (value) {\n            return observer.next({\n              provider: provider,\n              value: value\n            });\n          },\n          error: function (error) {\n            return observer.error({\n              provider: provider,\n              error: error\n            });\n          }\n        });\n      });\n      return function () {\n        return subscriptions.forEach(function (subscription) {\n          return subscription.unsubscribe();\n        });\n      };\n    });\n  };\n\n  return PubSubClass;\n}();\n\nexport { PubSubClass };\nexport var PubSub = new PubSubClass();\nAmplify.register(PubSub);","map":{"version":3,"mappings":"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","names":["Observable","Amplify","browserOrNode","ConsoleLogger","Logger","INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER","INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER","AWSAppSyncProvider","AWSAppSyncRealTimeProvider","logger","options","_options","debug","_pluggables","subscribe","bind","Object","PubSubClass","_awsAppSyncProvider","_awsAppSyncRealTimeProvider","opt","PubSub","assign","map","configure","_this","pluggable","getCategory","push","config","providerName","filter","getProviderName","awsAppSyncProvider","awsAppSyncRealTimeProvider","find","provider","getProviderByName","Error","topics","msg","Promise","all","getProviders","publish","isNode","ssr","providers","observables","observable","subscriptions","_a","start","console","error","next","value","forEach","unsubscribe","register"],"sources":["/home/dalienst/node_modules/@aws-amplify/pubsub/src/PubSub.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// import '../Common/Polyfills';\nimport Observable from 'zen-observable-ts';\n\nimport {\n\tAmplify,\n\tbrowserOrNode,\n\tConsoleLogger as Logger,\n\tINTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER,\n\tINTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,\n} from '@aws-amplify/core';\nimport { PubSubProvider, PubSubOptions, ProviderOptions } from './types';\nimport { AWSAppSyncProvider, AWSAppSyncRealTimeProvider } from './Providers';\n\nconst { isNode } = browserOrNode();\nconst logger = new Logger('PubSub');\n\nexport class PubSubClass {\n\tprivate _options: PubSubOptions;\n\n\tprivate _pluggables: PubSubProvider[];\n\n\t/**\n\t * Internal instance of AWSAppSyncProvider used by the API category to subscribe to AppSync\n\t */\n\tprivate _awsAppSyncProvider?: AWSAppSyncProvider;\n\n\t/**\n\t * Internal instance of AWSAppSyncRealTimeProvider used by the API category to subscribe to AppSync\n\t */\n\tprivate _awsAppSyncRealTimeProvider?: AWSAppSyncRealTimeProvider;\n\n\t/**\n\t * Lazy instantiate AWSAppSyncProvider when it is required by the API category\n\t */\n\tprivate get awsAppSyncProvider() {\n\t\tif (!this._awsAppSyncProvider) {\n\t\t\tthis._awsAppSyncProvider = new AWSAppSyncProvider(this._options);\n\t\t}\n\t\treturn this._awsAppSyncProvider;\n\t}\n\n\t/**\n\t * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category\n\t */\n\tprivate get awsAppSyncRealTimeProvider() {\n\t\tif (!this._awsAppSyncRealTimeProvider) {\n\t\t\tthis._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(\n\t\t\t\tthis._options\n\t\t\t);\n\t\t}\n\t\treturn this._awsAppSyncRealTimeProvider;\n\t}\n\n\t/**\n\t * Initialize PubSub with AWS configurations\n\t *\n\t * @param {PubSubOptions} options - Configuration object for PubSub\n\t */\n\tconstructor(options?: PubSubOptions) {\n\t\tthis._options = options ?? {};\n\t\tlogger.debug('PubSub Options', this._options);\n\t\tthis._pluggables = [];\n\t\tthis.subscribe = this.subscribe.bind(this);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'PubSub';\n\t}\n\n\t/**\n\t * Configure PubSub part with configurations\n\t *\n\t * @param {PubSubOptions} config - Configuration for PubSub\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options: PubSubOptions) {\n\t\tconst opt = options ? options.PubSub || options : {};\n\t\tlogger.debug('configure PubSub', { opt });\n\n\t\tthis._options = Object.assign({}, this._options, opt);\n\n\t\tthis._pluggables.map(pluggable => pluggable.configure(this._options));\n\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * add plugin into Analytics category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic async addPluggable(pluggable: PubSubProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'PubSub') {\n\t\t\tthis._pluggables.push(pluggable);\n\n\t\t\tconst config = pluggable.configure(this._options);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * remove plugin from PubSub category\n\t * @param providerName - the name of the plugin\n\t */\n\tremovePluggable(providerName: string): void {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t}\n\n\tprivate getProviderByName(providerName: string | symbol) {\n\t\tif (providerName === INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER) {\n\t\t\treturn this.awsAppSyncProvider;\n\t\t}\n\t\tif (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {\n\t\t\treturn this.awsAppSyncRealTimeProvider;\n\t\t}\n\n\t\treturn this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t}\n\n\tprivate getProviders(options: ProviderOptions = {}) {\n\t\tconst { provider: providerName } = options;\n\t\tif (!providerName) {\n\t\t\treturn this._pluggables;\n\t\t}\n\n\t\tconst provider = this.getProviderByName(providerName);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Could not find provider named ${providerName}`);\n\t\t}\n\n\t\treturn [provider];\n\t}\n\n\tasync publish(\n\t\ttopics: string[] | string,\n\t\tmsg: any,\n\t\toptions?: ProviderOptions\n\t) {\n\t\treturn Promise.all(\n\t\t\tthis.getProviders(options).map(provider =>\n\t\t\t\tprovider.publish(topics, msg, options)\n\t\t\t)\n\t\t);\n\t}\n\n\tsubscribe(\n\t\ttopics: string[] | string,\n\t\toptions?: ProviderOptions\n\t): Observable<any> {\n\t\tif (isNode && this._options && this._options.ssr) {\n\t\t\tthrow new Error(\n\t\t\t\t'Subscriptions are not supported for Server-Side Rendering (SSR)'\n\t\t\t);\n\t\t}\n\n\t\tlogger.debug('subscribe options', options);\n\n\t\tconst providers = this.getProviders(options);\n\n\t\treturn new Observable(observer => {\n\t\t\tconst observables = providers.map(provider => ({\n\t\t\t\tprovider,\n\t\t\t\tobservable: provider.subscribe(topics, options),\n\t\t\t}));\n\n\t\t\tconst subscriptions = observables.map(({ provider, observable }) =>\n\t\t\t\tobservable.subscribe({\n\t\t\t\t\tstart: console.error,\n\t\t\t\t\tnext: value => observer.next({ provider, value }),\n\t\t\t\t\terror: error => observer.error({ provider, error }),\n\t\t\t\t\t// complete: observer.complete, // TODO: when all completed, complete the outer one\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn () =>\n\t\t\t\tsubscriptions.forEach(subscription => subscription.unsubscribe());\n\t\t});\n\t}\n}\n\nexport const PubSub = new PubSubClass();\nAmplify.register(PubSub);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\"; // the session tracker for web\n\nimport { ConsoleLogger as Logger, browserOrNode } from '@aws-amplify/core';\nvar logger = new Logger('SessionTracker');\nvar defaultOpts = {\n  enable: false,\n  provider: 'AWSPinpoint'\n};\nvar initialEventSent = false;\n\nvar SessionTracker =\n/** @class */\nfunction () {\n  function SessionTracker(tracker, opts) {\n    this._config = Object.assign({}, defaultOpts, opts);\n    this._tracker = tracker;\n    this._hasEnabled = false;\n    this._trackFunc = this._trackFunc.bind(this);\n    this._trackBeforeUnload = this._trackBeforeUnload.bind(this);\n    this.configure(this._config);\n  }\n\n  SessionTracker.prototype._envCheck = function () {\n    if (!browserOrNode().isBrowser) {\n      return false;\n    }\n\n    if (!document || !document.addEventListener) {\n      logger.debug('not in the supported web environment');\n      return false;\n    }\n\n    if (typeof document.hidden !== 'undefined') {\n      this._hidden = 'hidden';\n      this._visibilityChange = 'visibilitychange';\n    } else if (typeof document['msHidden'] !== 'undefined') {\n      this._hidden = 'msHidden';\n      this._visibilityChange = 'msvisibilitychange';\n    } else if (typeof document['webkitHidden'] !== 'undefined') {\n      this._hidden = 'webkitHidden';\n      this._visibilityChange = 'webkitvisibilitychange';\n    } else {\n      logger.debug('not in the supported web environment');\n      return false;\n    }\n\n    return true;\n  };\n\n  SessionTracker.prototype._trackFunc = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var customAttrs, _a, attributes;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(typeof this._config.attributes === 'function')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this._config.attributes()];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = this._config.attributes;\n            _b.label = 3;\n\n          case 3:\n            customAttrs = _a;\n            attributes = Object.assign({}, customAttrs);\n\n            if (document.visibilityState === this._hidden) {\n              this._tracker({\n                name: '_session.stop',\n                attributes: attributes\n              }, this._config.provider).catch(function (e) {\n                logger.debug('record session stop event failed.', e);\n              });\n            } else {\n              this._tracker({\n                name: '_session.start',\n                attributes: attributes\n              }, this._config.provider).catch(function (e) {\n                logger.debug('record session start event failed.', e);\n              });\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SessionTracker.prototype._trackBeforeUnload = function (event) {\n    // before unload callback cannot be async => https://github.com/aws-amplify/amplify-js/issues/2088\n    var _this = this;\n\n    var customAttrs = typeof this._config.attributes === 'function' ? Promise.resolve(this._config.attributes()) : Promise.resolve(this._config.attributes);\n    customAttrs.then(function (custom) {\n      var attributes = Object.assign({}, custom);\n\n      _this._tracker({\n        name: '_session.stop',\n        attributes: attributes,\n        immediate: true\n      }, _this._config.provider).catch(function (e) {\n        logger.debug('record session stop event failed.', e);\n      });\n    });\n  }; // to keep configure a synchronized function\n\n\n  SessionTracker.prototype._sendInitialEvent = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var customAttrs, _a, attributes;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (initialEventSent) {\n              logger.debug('the start session has been sent when the page is loaded');\n              return [2\n              /*return*/\n              ];\n            } else {\n              initialEventSent = true;\n            }\n\n            if (!(typeof this._config.attributes === 'function')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this._config.attributes()];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = this._config.attributes;\n            _b.label = 3;\n\n          case 3:\n            customAttrs = _a;\n            attributes = Object.assign({}, customAttrs);\n\n            this._tracker({\n              name: '_session.start',\n              attributes: attributes\n            }, this._config.provider).catch(function (e) {\n              logger.debug('record session start event failed.', e);\n            });\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SessionTracker.prototype.configure = function (opts) {\n    if (!this._envCheck()) {\n      return this._config;\n    }\n\n    Object.assign(this._config, opts);\n\n    if (this._config.enable && !this._hasEnabled) {\n      // send a start session as soon as it's enabled\n      this._sendInitialEvent(); // listen on events\n\n\n      document.addEventListener(this._visibilityChange, this._trackFunc, false);\n      window.addEventListener('beforeunload', this._trackBeforeUnload, false);\n      this._hasEnabled = true;\n    } else if (!this._config.enable && this._hasEnabled) {\n      document.removeEventListener(this._visibilityChange, this._trackFunc, false);\n      window.removeEventListener('beforeunload', this._trackBeforeUnload, false);\n      this._hasEnabled = false;\n    }\n\n    return this._config;\n  };\n\n  return SessionTracker;\n}();\n\nexport { SessionTracker };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","browserOrNode","logger","defaultOpts","enable","provider","initialEventSent","tracker","opts","_config","Object","assign","_tracker","_hasEnabled","_trackFunc","bind","_trackBeforeUnload","configure","SessionTracker","isBrowser","document","addEventListener","debug","hidden","_hidden","_visibilityChange","attributes","_a","customAttrs","visibilityState","name","catch","e","event","Promise","resolve","then","custom","_this","immediate","_envCheck","_sendInitialEvent","window","removeEventListener"],"sources":["/home/dalienst/node_modules/@aws-amplify/analytics/src/trackers/SessionTracker.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n// the session tracker for web\n\nimport {\n\tConsoleLogger as Logger,\n\tHub,\n\tConstants,\n\tbrowserOrNode,\n} from '@aws-amplify/core';\nimport { SessionTrackOpts } from '../types';\n\nconst logger = new Logger('SessionTracker');\n\nconst defaultOpts: SessionTrackOpts = {\n\tenable: false,\n\tprovider: 'AWSPinpoint',\n};\n\nlet initialEventSent = false;\n\nexport class SessionTracker {\n\tprivate _tracker;\n\tprivate _hasEnabled;\n\tprivate _config: SessionTrackOpts;\n\n\tprivate _hidden;\n\tprivate _visibilityChange;\n\n\tconstructor(tracker, opts) {\n\t\tthis._config = Object.assign({}, defaultOpts, opts);\n\t\tthis._tracker = tracker;\n\n\t\tthis._hasEnabled = false;\n\t\tthis._trackFunc = this._trackFunc.bind(this);\n\t\tthis._trackBeforeUnload = this._trackBeforeUnload.bind(this);\n\n\t\tthis.configure(this._config);\n\t}\n\n\tprivate _envCheck() {\n\t\tif (!browserOrNode().isBrowser) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!document || !document.addEventListener) {\n\t\t\tlogger.debug('not in the supported web environment');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof document.hidden !== 'undefined') {\n\t\t\tthis._hidden = 'hidden';\n\t\t\tthis._visibilityChange = 'visibilitychange';\n\t\t} else if (typeof document['msHidden'] !== 'undefined') {\n\t\t\tthis._hidden = 'msHidden';\n\t\t\tthis._visibilityChange = 'msvisibilitychange';\n\t\t} else if (typeof document['webkitHidden'] !== 'undefined') {\n\t\t\tthis._hidden = 'webkitHidden';\n\t\t\tthis._visibilityChange = 'webkitvisibilitychange';\n\t\t} else {\n\t\t\tlogger.debug('not in the supported web environment');\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async _trackFunc() {\n\t\tconst customAttrs =\n\t\t\ttypeof this._config.attributes === 'function'\n\t\t\t\t? await this._config.attributes()\n\t\t\t\t: this._config.attributes;\n\n\t\tconst attributes = Object.assign({}, customAttrs);\n\n\t\tif (document.visibilityState === this._hidden) {\n\t\t\tthis._tracker(\n\t\t\t\t{\n\t\t\t\t\tname: '_session.stop',\n\t\t\t\t\tattributes,\n\t\t\t\t},\n\t\t\t\tthis._config.provider\n\t\t\t).catch(e => {\n\t\t\t\tlogger.debug('record session stop event failed.', e);\n\t\t\t});\n\t\t} else {\n\t\t\tthis._tracker(\n\t\t\t\t{\n\t\t\t\t\tname: '_session.start',\n\t\t\t\t\tattributes,\n\t\t\t\t},\n\t\t\t\tthis._config.provider\n\t\t\t).catch(e => {\n\t\t\t\tlogger.debug('record session start event failed.', e);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _trackBeforeUnload(event) {\n\t\t// before unload callback cannot be async => https://github.com/aws-amplify/amplify-js/issues/2088\n\n\t\tconst customAttrs =\n\t\t\ttypeof this._config.attributes === 'function'\n\t\t\t\t? Promise.resolve(this._config.attributes())\n\t\t\t\t: Promise.resolve(this._config.attributes);\n\n\t\tcustomAttrs.then(custom => {\n\t\t\tconst attributes = Object.assign({}, custom);\n\n\t\t\tthis._tracker(\n\t\t\t\t{\n\t\t\t\t\tname: '_session.stop',\n\t\t\t\t\tattributes,\n\t\t\t\t\timmediate: true,\n\t\t\t\t},\n\t\t\t\tthis._config.provider\n\t\t\t).catch(e => {\n\t\t\t\tlogger.debug('record session stop event failed.', e);\n\t\t\t});\n\t\t});\n\t}\n\n\t// to keep configure a synchronized function\n\tprivate async _sendInitialEvent() {\n\t\tif (initialEventSent) {\n\t\t\tlogger.debug('the start session has been sent when the page is loaded');\n\t\t\treturn;\n\t\t} else {\n\t\t\tinitialEventSent = true;\n\t\t}\n\n\t\tconst customAttrs =\n\t\t\ttypeof this._config.attributes === 'function'\n\t\t\t\t? await this._config.attributes()\n\t\t\t\t: this._config.attributes;\n\n\t\tconst attributes = Object.assign({}, customAttrs);\n\n\t\tthis._tracker(\n\t\t\t{\n\t\t\t\tname: '_session.start',\n\t\t\t\tattributes,\n\t\t\t},\n\t\t\tthis._config.provider\n\t\t).catch(e => {\n\t\t\tlogger.debug('record session start event failed.', e);\n\t\t});\n\t}\n\n\tconfigure(opts?: SessionTrackOpts) {\n\t\tif (!this._envCheck()) {\n\t\t\treturn this._config;\n\t\t}\n\n\t\tObject.assign(this._config, opts);\n\t\tif (this._config.enable && !this._hasEnabled) {\n\t\t\t// send a start session as soon as it's enabled\n\t\t\tthis._sendInitialEvent();\n\t\t\t// listen on events\n\t\t\tdocument.addEventListener(this._visibilityChange, this._trackFunc, false);\n\t\t\twindow.addEventListener('beforeunload', this._trackBeforeUnload, false);\n\t\t\tthis._hasEnabled = true;\n\t\t} else if (!this._config.enable && this._hasEnabled) {\n\t\t\tdocument.removeEventListener(\n\t\t\t\tthis._visibilityChange,\n\t\t\t\tthis._trackFunc,\n\t\t\t\tfalse\n\t\t\t);\n\t\t\twindow.removeEventListener(\n\t\t\t\t'beforeunload',\n\t\t\t\tthis._trackBeforeUnload,\n\t\t\t\tfalse\n\t\t\t);\n\t\t\tthis._hasEnabled = false;\n\t\t}\n\n\t\treturn this._config;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
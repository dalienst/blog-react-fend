{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { RestAPIClass } from '@aws-amplify/api-rest';\nimport { GraphQLAPIClass } from '@aws-amplify/api-graphql';\nimport { Amplify, ConsoleLogger as Logger, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('API');\n/**\n * @deprecated\n * Use RestApi or GraphQLAPI to reduce your application bundle size\n * Export Cloud Logic APIs\n */\n\nvar APIClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize API with AWS configuration\n   * @param {Object} options - Configuration object for API\n   */\n  function APIClass(options) {\n    this.Auth = Auth;\n    this.Cache = Cache;\n    this.Credentials = Credentials;\n    this._options = options;\n    this._restApi = new RestAPIClass(options);\n    this._graphqlApi = new GraphQLAPIClass(options);\n    logger.debug('API Options', this._options);\n  }\n\n  APIClass.prototype.getModuleName = function () {\n    return 'API';\n  };\n  /**\n   * Configure API part with aws configurations\n   * @param {Object} config - Configuration of the API\n   * @return {Object} - The current configuration\n   */\n\n\n  APIClass.prototype.configure = function (options) {\n    this._options = Object.assign({}, this._options, options); // Share Amplify instance with client for SSR\n\n    this._restApi.Credentials = this.Credentials;\n    this._graphqlApi.Auth = this.Auth;\n    this._graphqlApi.Cache = this.Cache;\n    this._graphqlApi.Credentials = this.Credentials;\n\n    var restAPIConfig = this._restApi.configure(this._options);\n\n    var graphQLAPIConfig = this._graphqlApi.configure(this._options);\n\n    return __assign(__assign({}, restAPIConfig), graphQLAPIConfig);\n  };\n  /**\n   * Make a GET request\n   * @param apiName - The api name of the request\n   * @param path - The path of the request\n   * @param [init] - Request extra params\n   * @return A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  APIClass.prototype.get = function (apiName, path, init) {\n    return this._restApi.get(apiName, path, init);\n  };\n  /**\n   * Make a POST request\n   * @param apiName - The api name of the request\n   * @param path - The path of the request\n   * @param [init] - Request extra params\n   * @return A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  APIClass.prototype.post = function (apiName, path, init) {\n    return this._restApi.post(apiName, path, init);\n  };\n  /**\n   * Make a PUT request\n   * @param apiName - The api name of the request\n   * @param path - The path of the request\n   * @param [init] - Request extra params\n   * @return A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  APIClass.prototype.put = function (apiName, path, init) {\n    return this._restApi.put(apiName, path, init);\n  };\n  /**\n   * Make a PATCH request\n   * @param apiName - The api name of the request\n   * @param path - The path of the request\n   * @param [init] - Request extra params\n   * @return A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  APIClass.prototype.patch = function (apiName, path, init) {\n    return this._restApi.patch(apiName, path, init);\n  };\n  /**\n   * Make a DEL request\n   * @param apiName - The api name of the request\n   * @param path - The path of the request\n   * @param [init] - Request extra params\n   * @return A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  APIClass.prototype.del = function (apiName, path, init) {\n    return this._restApi.del(apiName, path, init);\n  };\n  /**\n   * Make a HEAD request\n   * @param apiName - The api name of the request\n   * @param path - The path of the request\n   * @param [init] - Request extra params\n   * @return A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  APIClass.prototype.head = function (apiName, path, init) {\n    return this._restApi.head(apiName, path, init);\n  };\n  /**\n   * Checks to see if an error thrown is from an api request cancellation\n   * @param error - Any error\n   * @return If the error was from an api request cancellation\n   */\n\n\n  APIClass.prototype.isCancel = function (error) {\n    return this._restApi.isCancel(error);\n  };\n  /**\n   * Cancels an inflight request for either a GraphQL request or a Rest API request.\n   * @param request - request to cancel\n   * @param [message] - custom error message\n   * @return If the request was cancelled\n   */\n\n\n  APIClass.prototype.cancel = function (request, message) {\n    if (this._restApi.hasCancelToken(request)) {\n      return this._restApi.cancel(request, message);\n    } else if (this._graphqlApi.hasCancelToken(request)) {\n      return this._graphqlApi.cancel(request, message);\n    }\n\n    return false;\n  };\n  /**\n   * Getting endpoint for API\n   * @param apiName - The name of the api\n   * @return The endpoint of the api\n   */\n\n\n  APIClass.prototype.endpoint = function (apiName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._restApi.endpoint(apiName)];\n      });\n    });\n  };\n  /**\n   * to get the operation type\n   * @param operation\n   */\n\n\n  APIClass.prototype.getGraphqlOperationType = function (operation) {\n    return this._graphqlApi.getGraphqlOperationType(operation);\n  };\n\n  APIClass.prototype.graphql = function (options, additionalHeaders) {\n    return this._graphqlApi.graphql(options, additionalHeaders);\n  };\n\n  return APIClass;\n}();\n\nexport { APIClass };\nexport var API = new APIClass(null);\nAmplify.register(API);","map":{"version":3,"mappings":"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","names":["Auth","Cache","RestAPIClass","GraphQLAPIClass","Amplify","ConsoleLogger","Logger","Credentials","logger","options","_options","_restApi","_graphqlApi","debug","APIClass","Object","assign","restAPIConfig","configure","graphQLAPIConfig","apiName","path","init","get","post","put","patch","del","head","error","isCancel","request","message","hasCancelToken","cancel","endpoint","operation","getGraphqlOperationType","additionalHeaders","graphql","API","register"],"sources":["/home/dalienst/node_modules/@aws-amplify/api/src/API.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { AWSAppSyncRealTimeProvider } from '@aws-amplify/pubsub';\nimport { RestAPIClass } from '@aws-amplify/api-rest';\nimport {\n\tGraphQLAPIClass,\n\tGraphQLOptions,\n\tGraphQLResult,\n\tGraphQLOperation,\n\tOperationTypeNode,\n} from '@aws-amplify/api-graphql';\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tCredentials,\n} from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { GraphQLQuery, GraphQLSubscription } from './types';\n\nconst logger = new Logger('API');\n/**\n * @deprecated\n * Use RestApi or GraphQLAPI to reduce your application bundle size\n * Export Cloud Logic APIs\n */\nexport class APIClass {\n\t/**\n\t * Initialize API with AWS configuration\n\t * @param {Object} options - Configuration object for API\n\t */\n\tprivate _options;\n\tprivate _restApi: RestAPIClass;\n\tprivate _graphqlApi: GraphQLAPIClass;\n\n\tAuth = Auth;\n\tCache = Cache;\n\tCredentials = Credentials;\n\n\t/**\n\t * Initialize API with AWS configuration\n\t * @param {Object} options - Configuration object for API\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t\tthis._restApi = new RestAPIClass(options);\n\t\tthis._graphqlApi = new GraphQLAPIClass(options);\n\t\tlogger.debug('API Options', this._options);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'API';\n\t}\n\n\t/**\n\t * Configure API part with aws configurations\n\t * @param {Object} config - Configuration of the API\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options) {\n\t\tthis._options = Object.assign({}, this._options, options);\n\n\t\t// Share Amplify instance with client for SSR\n\t\tthis._restApi.Credentials = this.Credentials;\n\n\t\tthis._graphqlApi.Auth = this.Auth;\n\t\tthis._graphqlApi.Cache = this.Cache;\n\t\tthis._graphqlApi.Credentials = this.Credentials;\n\n\t\tconst restAPIConfig = this._restApi.configure(this._options);\n\t\tconst graphQLAPIConfig = this._graphqlApi.configure(this._options);\n\n\t\treturn { ...restAPIConfig, ...graphQLAPIConfig };\n\t}\n\n\t/**\n\t * Make a GET request\n\t * @param apiName - The api name of the request\n\t * @param path - The path of the request\n\t * @param [init] - Request extra params\n\t * @return A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tget(\n\t\tapiName: string,\n\t\tpath: string,\n\t\tinit: { [key: string]: any }\n\t): Promise<any> {\n\t\treturn this._restApi.get(apiName, path, init);\n\t}\n\n\t/**\n\t * Make a POST request\n\t * @param apiName - The api name of the request\n\t * @param path - The path of the request\n\t * @param [init] - Request extra params\n\t * @return A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tpost(\n\t\tapiName: string,\n\t\tpath: string,\n\t\tinit: { [key: string]: any }\n\t): Promise<any> {\n\t\treturn this._restApi.post(apiName, path, init);\n\t}\n\n\t/**\n\t * Make a PUT request\n\t * @param apiName - The api name of the request\n\t * @param path - The path of the request\n\t * @param [init] - Request extra params\n\t * @return A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tput(\n\t\tapiName: string,\n\t\tpath: string,\n\t\tinit: { [key: string]: any }\n\t): Promise<any> {\n\t\treturn this._restApi.put(apiName, path, init);\n\t}\n\n\t/**\n\t * Make a PATCH request\n\t * @param apiName - The api name of the request\n\t * @param path - The path of the request\n\t * @param [init] - Request extra params\n\t * @return A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tpatch(\n\t\tapiName: string,\n\t\tpath: string,\n\t\tinit: { [key: string]: any }\n\t): Promise<any> {\n\t\treturn this._restApi.patch(apiName, path, init);\n\t}\n\n\t/**\n\t * Make a DEL request\n\t * @param apiName - The api name of the request\n\t * @param path - The path of the request\n\t * @param [init] - Request extra params\n\t * @return A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\tdel(\n\t\tapiName: string,\n\t\tpath: string,\n\t\tinit: { [key: string]: any }\n\t): Promise<any> {\n\t\treturn this._restApi.del(apiName, path, init);\n\t}\n\n\t/**\n\t * Make a HEAD request\n\t * @param apiName - The api name of the request\n\t * @param path - The path of the request\n\t * @param [init] - Request extra params\n\t * @return A promise that resolves to an object with response status and JSON data, if successful.\n\t */\n\thead(\n\t\tapiName: string,\n\t\tpath: string,\n\t\tinit: { [key: string]: any }\n\t): Promise<any> {\n\t\treturn this._restApi.head(apiName, path, init);\n\t}\n\n\t/**\n\t * Checks to see if an error thrown is from an api request cancellation\n\t * @param error - Any error\n\t * @return If the error was from an api request cancellation\n\t */\n\tisCancel(error: any): boolean {\n\t\treturn this._restApi.isCancel(error);\n\t}\n\t/**\n\t * Cancels an inflight request for either a GraphQL request or a Rest API request.\n\t * @param request - request to cancel\n\t * @param [message] - custom error message\n\t * @return If the request was cancelled\n\t */\n\tcancel(request: Promise<any>, message?: string): boolean {\n\t\tif (this._restApi.hasCancelToken(request)) {\n\t\t\treturn this._restApi.cancel(request, message);\n\t\t} else if (this._graphqlApi.hasCancelToken(request)) {\n\t\t\treturn this._graphqlApi.cancel(request, message);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Getting endpoint for API\n\t * @param apiName - The name of the api\n\t * @return The endpoint of the api\n\t */\n\tasync endpoint(apiName: string): Promise<string> {\n\t\treturn this._restApi.endpoint(apiName);\n\t}\n\n\t/**\n\t * to get the operation type\n\t * @param operation\n\t */\n\tgetGraphqlOperationType(operation: GraphQLOperation): OperationTypeNode {\n\t\treturn this._graphqlApi.getGraphqlOperationType(operation);\n\t}\n\n\t/**\n\t * Executes a GraphQL operation\n\t *\n\t * @param options - GraphQL Options\n\t * @param [additionalHeaders] - headers to merge in after any `graphql_headers` set in the config\n\t * @returns An Observable if queryType is 'subscription', else a promise of the graphql result from the query.\n\t */\n\tgraphql<T>(\n\t\toptions: GraphQLOptions,\n\t\tadditionalHeaders?: { [key: string]: string }\n\t): T extends GraphQLQuery<T>\n\t\t? Promise<GraphQLResult<T>>\n\t\t: T extends GraphQLSubscription<T>\n\t\t? Observable<{\n\t\t\t\tprovider: AWSAppSyncRealTimeProvider;\n\t\t\t\tvalue: GraphQLResult<T>;\n\t\t  }>\n\t\t: Promise<GraphQLResult<any>> | Observable<object>;\n\tgraphql<T = any>(\n\t\toptions: GraphQLOptions,\n\t\tadditionalHeaders?: { [key: string]: string }\n\t): Promise<GraphQLResult<any>> | Observable<object> {\n\t\treturn this._graphqlApi.graphql(options, additionalHeaders);\n\t}\n}\n\nexport const API = new APIClass(null);\nAmplify.register(API);\n"]},"metadata":{},"sourceType":"module"}
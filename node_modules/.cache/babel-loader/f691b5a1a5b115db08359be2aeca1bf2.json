{"ast":null,"code":"import { __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { browserOrNode, ConsoleLogger as Logger, BackgroundProcessManager } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType } from '../types';\nimport { getNow, SYNC, USER } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, getIdentifierValue, predicateToGraphQLCondition } from './utils';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\nexport var ControlMessage;\n\n(function (ControlMessage) {\n  ControlMessage[\"SYNC_ENGINE_STORAGE_SUBSCRIBED\"] = \"storageSubscribed\";\n  ControlMessage[\"SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\"] = \"subscriptionsEstablished\";\n  ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_STARTED\"] = \"syncQueriesStarted\";\n  ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_READY\"] = \"syncQueriesReady\";\n  ControlMessage[\"SYNC_ENGINE_MODEL_SYNCED\"] = \"modelSynced\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED\"] = \"outboxMutationEnqueued\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED\"] = \"outboxMutationProcessed\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_STATUS\"] = \"outboxStatus\";\n  ControlMessage[\"SYNC_ENGINE_NETWORK_STATUS\"] = \"networkStatus\";\n  ControlMessage[\"SYNC_ENGINE_READY\"] = \"ready\";\n})(ControlMessage || (ControlMessage = {}));\n\nvar SyncEngine =\n/** @class */\nfunction () {\n  function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, conflictHandler, errorHandler, syncPredicates, amplifyConfig, authModeStrategy, amplifyContext, connectivityMonitor) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.modelClasses = modelClasses;\n    this.userModelClasses = userModelClasses;\n    this.storage = storage;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.amplifyContext = amplifyContext;\n    this.connectivityMonitor = connectivityMonitor;\n    this.online = false;\n    this.modelSyncedStatus = new WeakMap();\n    this.runningProcesses = new BackgroundProcessManager();\n    var MutationEvent = this.modelClasses['MutationEvent'];\n    this.outbox = new MutationEventOutbox(this.schema, MutationEvent, modelInstanceCreator, ownSymbol);\n    this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n    this.syncQueriesProcessor = new SyncProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);\n    this.subscriptionsProcessor = new SubscriptionProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);\n    this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, this.amplifyConfig, this.authModeStrategy, errorHandler, conflictHandler, this.amplifyContext);\n    this.datastoreConnectivity = this.connectivityMonitor || new DataStoreConnectivity();\n  }\n\n  SyncEngine.prototype.getModelSyncedStatus = function (modelConstructor) {\n    return this.modelSyncedStatus.get(modelConstructor);\n  };\n\n  SyncEngine.prototype.start = function (params) {\n    var _this = this;\n\n    return new Observable(function (observer) {\n      logger.log('starting sync engine...');\n      var subscriptions = [];\n\n      _this.runningProcesses.add(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var err_1, startPromise, hasMutationsInOutbox;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , this.setupModels(params)];\n\n              case 1:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _a.sent();\n                observer.error(err_1);\n                return [2\n                /*return*/\n                ];\n\n              case 3:\n                startPromise = new Promise(function (doneStarting, failedStarting) {\n                  _this.datastoreConnectivity.status().subscribe(function (_a) {\n                    var online = _a.online;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var _this = this;\n\n                      return __generator(this, function (_b) {\n                        return [2\n                        /*return*/\n                        , this.runningProcesses.isOpen && this.runningProcesses.add(function (onTerminate) {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var ctlSubsObservable_1, dataSubsObservable, err_2, error_1;\n\n                            var _a;\n\n                            var _this = this;\n\n                            return __generator(this, function (_b) {\n                              switch (_b.label) {\n                                case 0:\n                                  if (!(online && !this.online)) return [3\n                                  /*break*/\n                                  , 10];\n                                  this.online = online;\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                    data: {\n                                      active: this.online\n                                    }\n                                  });\n                                  dataSubsObservable = void 0;\n                                  if (!isNode) return [3\n                                  /*break*/\n                                  , 1];\n                                  logger.warn('Realtime disabled when in a server-side environment');\n                                  return [3\n                                  /*break*/\n                                  , 6];\n\n                                case 1:\n                                  //#region GraphQL Subscriptions\n                                  _a = __read(this.subscriptionsProcessor.start(), 2), ctlSubsObservable_1 = _a[0], dataSubsObservable = _a[1];\n                                  _b.label = 2;\n\n                                case 2:\n                                  _b.trys.push([2, 4,, 5]);\n\n                                  return [4\n                                  /*yield*/\n                                  , new Promise(function (resolve, reject) {\n                                    onTerminate.then(reject);\n                                    var ctlSubsSubscription = ctlSubsObservable_1.subscribe({\n                                      next: function (msg) {\n                                        if (msg === CONTROL_MSG.CONNECTED) {\n                                          resolve();\n                                        }\n                                      },\n                                      error: function (err) {\n                                        reject(err);\n\n                                        var handleDisconnect = _this.disconnectionHandler();\n\n                                        handleDisconnect(err);\n                                      }\n                                    });\n                                    subscriptions.push(ctlSubsSubscription);\n                                  })];\n\n                                case 3:\n                                  _b.sent();\n\n                                  return [3\n                                  /*break*/\n                                  , 5];\n\n                                case 4:\n                                  err_2 = _b.sent();\n                                  observer.error(err_2);\n                                  failedStarting();\n                                  return [2\n                                  /*return*/\n                                  ];\n\n                                case 5:\n                                  logger.log('Realtime ready');\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\n                                  });\n                                  _b.label = 6;\n\n                                case 6:\n                                  _b.trys.push([6, 8,, 9]);\n\n                                  return [4\n                                  /*yield*/\n                                  , new Promise(function (resolve, reject) {\n                                    var syncQuerySubscription = _this.syncQueriesObservable().subscribe({\n                                      next: function (message) {\n                                        var type = message.type;\n\n                                        if (type === ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY) {\n                                          resolve();\n                                        }\n\n                                        observer.next(message);\n                                      },\n                                      complete: function () {\n                                        resolve();\n                                      },\n                                      error: function (error) {\n                                        reject(error);\n                                      }\n                                    });\n\n                                    if (syncQuerySubscription) {\n                                      subscriptions.push(syncQuerySubscription);\n                                    }\n                                  })];\n\n                                case 7:\n                                  _b.sent();\n\n                                  return [3\n                                  /*break*/\n                                  , 9];\n\n                                case 8:\n                                  error_1 = _b.sent();\n                                  observer.error(error_1);\n                                  failedStarting();\n                                  return [2\n                                  /*return*/\n                                  ];\n\n                                case 9:\n                                  //#endregion\n                                  //#region process mutations (outbox)\n                                  subscriptions.push(this.mutationsProcessor.start().subscribe(function (_a) {\n                                    var modelDefinition = _a.modelDefinition,\n                                        item = _a.model,\n                                        hasMore = _a.hasMore;\n                                    return _this.runningProcesses.add(function () {\n                                      return __awaiter(_this, void 0, void 0, function () {\n                                        var modelConstructor, model;\n\n                                        var _this = this;\n\n                                        return __generator(this, function (_a) {\n                                          switch (_a.label) {\n                                            case 0:\n                                              modelConstructor = this.userModelClasses[modelDefinition.name];\n                                              model = this.modelInstanceCreator(modelConstructor, item);\n                                              return [4\n                                              /*yield*/\n                                              , this.storage.runExclusive(function (storage) {\n                                                return _this.modelMerger.merge(storage, model, modelDefinition);\n                                              })];\n\n                                            case 1:\n                                              _a.sent();\n\n                                              observer.next({\n                                                type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED,\n                                                data: {\n                                                  model: modelConstructor,\n                                                  element: model\n                                                }\n                                              });\n                                              observer.next({\n                                                type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                                data: {\n                                                  isEmpty: !hasMore\n                                                }\n                                              });\n                                              return [2\n                                              /*return*/\n                                              ];\n                                          }\n                                        });\n                                      });\n                                    }, 'mutation processor event');\n                                  })); //#endregion\n                                  //#region Merge subscriptions buffer\n                                  // TODO: extract to function\n\n                                  if (!isNode) {\n                                    subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                                      var _b = __read(_a, 3),\n                                          _transformerMutationType = _b[0],\n                                          modelDefinition = _b[1],\n                                          item = _b[2];\n\n                                      return _this.runningProcesses.add(function () {\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                          var modelConstructor, model;\n\n                                          var _this = this;\n\n                                          return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                              case 0:\n                                                modelConstructor = this.userModelClasses[modelDefinition.name];\n                                                model = this.modelInstanceCreator(modelConstructor, item);\n                                                return [4\n                                                /*yield*/\n                                                , this.storage.runExclusive(function (storage) {\n                                                  return _this.modelMerger.merge(storage, model, modelDefinition);\n                                                })];\n\n                                              case 1:\n                                                _a.sent();\n\n                                                return [2\n                                                /*return*/\n                                                ];\n                                            }\n                                          });\n                                        });\n                                      }, 'subscription dataSubsObservable event');\n                                    }));\n                                  }\n\n                                  return [3\n                                  /*break*/\n                                  , 11];\n\n                                case 10:\n                                  if (!online) {\n                                    this.online = online;\n                                    observer.next({\n                                      type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                      data: {\n                                        active: this.online\n                                      }\n                                    });\n                                    subscriptions.forEach(function (sub) {\n                                      return sub.unsubscribe();\n                                    });\n                                    subscriptions = [];\n                                  }\n\n                                  _b.label = 11;\n\n                                case 11:\n                                  doneStarting();\n                                  return [2\n                                  /*return*/\n                                  ];\n                              }\n                            });\n                          });\n                        }, 'datastore connectivity event')];\n                      });\n                    });\n                  });\n                });\n                this.storage.observe(null, null, ownSymbol).filter(function (_a) {\n                  var model = _a.model;\n\n                  var modelDefinition = _this.getModelDefinition(model);\n\n                  return modelDefinition.syncable === true;\n                }).subscribe({\n                  next: function (_a) {\n                    var opType = _a.opType,\n                        model = _a.model,\n                        element = _a.element,\n                        condition = _a.condition;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var _this = this;\n\n                      return __generator(this, function (_b) {\n                        return [2\n                        /*return*/\n                        , this.runningProcesses.add(function () {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var namespace, MutationEventConstructor, modelDefinition, graphQLCondition, mutationEvent;\n                            return __generator(this, function (_a) {\n                              switch (_a.label) {\n                                case 0:\n                                  namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                                  MutationEventConstructor = this.modelClasses['MutationEvent'];\n                                  modelDefinition = this.getModelDefinition(model);\n                                  graphQLCondition = predicateToGraphQLCondition(condition, modelDefinition);\n                                  mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                                  return [4\n                                  /*yield*/\n                                  , this.outbox.enqueue(this.storage, mutationEvent)];\n\n                                case 1:\n                                  _a.sent();\n\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED,\n                                    data: {\n                                      model: model,\n                                      element: element\n                                    }\n                                  });\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                    data: {\n                                      isEmpty: false\n                                    }\n                                  });\n                                  return [4\n                                  /*yield*/\n                                  , startPromise];\n\n                                case 2:\n                                  _a.sent();\n\n                                  if (this.online) {\n                                    this.mutationsProcessor.resume();\n                                  }\n\n                                  return [2\n                                  /*return*/\n                                  ];\n                              }\n                            });\n                          });\n                        }, 'storage event')];\n                      });\n                    });\n                  }\n                });\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED\n                });\n                return [4\n                /*yield*/\n                , this.outbox.peek(this.storage)];\n\n              case 4:\n                hasMutationsInOutbox = _a.sent() === undefined;\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                  data: {\n                    isEmpty: hasMutationsInOutbox\n                  }\n                });\n                return [4\n                /*yield*/\n                , startPromise];\n\n              case 5:\n                _a.sent();\n\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_READY\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }, 'sync start');\n    });\n  };\n\n  SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelLastSync, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = Map.bind;\n            return [4\n            /*yield*/\n            , this.runningProcesses.add(function () {\n              return _this.getModelsMetadata();\n            }, 'sync/index getModelsMetadataWithNextFullSync')];\n\n          case 1:\n            modelLastSync = new (_a.apply(Map, [void 0, _b.sent().map(function (_a) {\n              var namespace = _a.namespace,\n                  model = _a.model,\n                  lastSync = _a.lastSync,\n                  lastFullSync = _a.lastFullSync,\n                  fullSyncInterval = _a.fullSyncInterval,\n                  lastSyncPredicate = _a.lastSyncPredicate;\n              var nextFullSync = lastFullSync + fullSyncInterval;\n              var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp ? 0 // perform full sync if expired\n              : lastSync; // perform delta sync\n\n              return [_this.schema.namespaces[namespace].models[model], [namespace, syncFrom]];\n            })]))();\n            return [2\n            /*return*/\n            , modelLastSync];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.syncQueriesObservable = function () {\n    var _this = this;\n\n    if (!this.online) {\n      return Observable.of();\n    }\n\n    return new Observable(function (observer) {\n      var syncQueriesSubscription;\n      _this.runningProcesses.isOpen && _this.runningProcesses.add(function (onTerminate) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var terminated, _loop_1, this_1;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                terminated = false;\n\n                _loop_1 = function () {\n                  var count, modelLastSync, paginatingModels, newestFullSyncStartedAt, theInterval, start, duration, newestStartedAt, msNextFullSync;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        count = new WeakMap();\n                        return [4\n                        /*yield*/\n                        , this_1.getModelsMetadataWithNextFullSync(Date.now())];\n\n                      case 1:\n                        modelLastSync = _a.sent();\n                        paginatingModels = new Set(modelLastSync.keys());\n                        return [4\n                        /*yield*/\n                        , new Promise(function (resolve, reject) {\n                          if (!_this.runningProcesses.isOpen) resolve();\n                          onTerminate.then(function () {\n                            return resolve();\n                          });\n                          syncQueriesSubscription = _this.syncQueriesProcessor.start(modelLastSync).subscribe({\n                            next: function (_a) {\n                              var namespace = _a.namespace,\n                                  modelDefinition = _a.modelDefinition,\n                                  items = _a.items,\n                                  done = _a.done,\n                                  startedAt = _a.startedAt,\n                                  isFullSync = _a.isFullSync;\n                              return __awaiter(_this, void 0, void 0, function () {\n                                var modelConstructor, modelName, modelMetadata_1, lastFullSync, fullSyncInterval, counts;\n\n                                var _this = this;\n\n                                return __generator(this, function (_b) {\n                                  switch (_b.label) {\n                                    case 0:\n                                      modelConstructor = this.userModelClasses[modelDefinition.name];\n\n                                      if (!count.has(modelConstructor)) {\n                                        count.set(modelConstructor, {\n                                          new: 0,\n                                          updated: 0,\n                                          deleted: 0\n                                        });\n                                        start = getNow();\n                                        newestStartedAt = newestStartedAt === undefined ? startedAt : Math.max(newestStartedAt, startedAt);\n                                      }\n                                      /**\n                                       * If there are mutations in the outbox for a given id, those need to be\n                                       * merged individually. Otherwise, we can merge them in batches.\n                                       */\n\n\n                                      return [4\n                                      /*yield*/\n                                      , this.storage.runExclusive(function (storage) {\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                          var idsInOutbox, oneByOne, page, opTypeCount, oneByOne_1, oneByOne_1_1, item, opType, e_1_1, _a, _b, _c, counts;\n\n                                          var e_1, _d;\n\n                                          return __generator(this, function (_e) {\n                                            switch (_e.label) {\n                                              case 0:\n                                                return [4\n                                                /*yield*/\n                                                , this.outbox.getModelIds(storage)];\n\n                                              case 1:\n                                                idsInOutbox = _e.sent();\n                                                oneByOne = [];\n                                                page = items.filter(function (item) {\n                                                  var itemId = getIdentifierValue(modelDefinition, item);\n\n                                                  if (!idsInOutbox.has(itemId)) {\n                                                    return true;\n                                                  }\n\n                                                  oneByOne.push(item);\n                                                  return false;\n                                                });\n                                                opTypeCount = [];\n                                                _e.label = 2;\n\n                                              case 2:\n                                                _e.trys.push([2, 7, 8, 9]);\n\n                                                oneByOne_1 = __values(oneByOne), oneByOne_1_1 = oneByOne_1.next();\n                                                _e.label = 3;\n\n                                              case 3:\n                                                if (!!oneByOne_1_1.done) return [3\n                                                /*break*/\n                                                , 6];\n                                                item = oneByOne_1_1.value;\n                                                return [4\n                                                /*yield*/\n                                                , this.modelMerger.merge(storage, item, modelDefinition)];\n\n                                              case 4:\n                                                opType = _e.sent();\n\n                                                if (opType !== undefined) {\n                                                  opTypeCount.push([item, opType]);\n                                                }\n\n                                                _e.label = 5;\n\n                                              case 5:\n                                                oneByOne_1_1 = oneByOne_1.next();\n                                                return [3\n                                                /*break*/\n                                                , 3];\n\n                                              case 6:\n                                                return [3\n                                                /*break*/\n                                                , 9];\n\n                                              case 7:\n                                                e_1_1 = _e.sent();\n                                                e_1 = {\n                                                  error: e_1_1\n                                                };\n                                                return [3\n                                                /*break*/\n                                                , 9];\n\n                                              case 8:\n                                                try {\n                                                  if (oneByOne_1_1 && !oneByOne_1_1.done && (_d = oneByOne_1.return)) _d.call(oneByOne_1);\n                                                } finally {\n                                                  if (e_1) throw e_1.error;\n                                                }\n\n                                                return [7\n                                                /*endfinally*/\n                                                ];\n\n                                              case 9:\n                                                _b = (_a = opTypeCount.push).apply;\n                                                _c = [opTypeCount];\n                                                return [4\n                                                /*yield*/\n                                                , this.modelMerger.mergePage(storage, modelConstructor, page, modelDefinition)];\n\n                                              case 10:\n                                                _b.apply(_a, _c.concat([__spread.apply(void 0, [_e.sent()])]));\n\n                                                counts = count.get(modelConstructor);\n                                                opTypeCount.forEach(function (_a) {\n                                                  var _b = __read(_a, 2),\n                                                      opType = _b[1];\n\n                                                  switch (opType) {\n                                                    case OpType.INSERT:\n                                                      counts.new++;\n                                                      break;\n\n                                                    case OpType.UPDATE:\n                                                      counts.updated++;\n                                                      break;\n\n                                                    case OpType.DELETE:\n                                                      counts.deleted++;\n                                                      break;\n\n                                                    default:\n                                                      throw new Error(\"Invalid opType \" + opType);\n                                                  }\n                                                });\n                                                return [2\n                                                /*return*/\n                                                ];\n                                            }\n                                          });\n                                        });\n                                      })];\n\n                                    case 1:\n                                      /**\n                                       * If there are mutations in the outbox for a given id, those need to be\n                                       * merged individually. Otherwise, we can merge them in batches.\n                                       */\n                                      _b.sent();\n\n                                      if (!done) return [3\n                                      /*break*/\n                                      , 4];\n                                      modelName = modelDefinition.name;\n                                      return [4\n                                      /*yield*/\n                                      , this.getModelMetadata(namespace, modelName)];\n\n                                    case 2:\n                                      modelMetadata_1 = _b.sent();\n                                      lastFullSync = modelMetadata_1.lastFullSync, fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                                      theInterval = fullSyncInterval;\n                                      newestFullSyncStartedAt = newestFullSyncStartedAt === undefined ? lastFullSync : Math.max(newestFullSyncStartedAt, isFullSync ? startedAt : lastFullSync);\n                                      modelMetadata_1 = this.modelClasses.ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                                        draft.lastSync = startedAt;\n                                        draft.lastFullSync = isFullSync ? startedAt : modelMetadata_1.lastFullSync;\n                                      });\n                                      return [4\n                                      /*yield*/\n                                      , this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n\n                                    case 3:\n                                      _b.sent();\n\n                                      counts = count.get(modelConstructor);\n                                      this.modelSyncedStatus.set(modelConstructor, true);\n                                      observer.next({\n                                        type: ControlMessage.SYNC_ENGINE_MODEL_SYNCED,\n                                        data: {\n                                          model: modelConstructor,\n                                          isFullSync: isFullSync,\n                                          isDeltaSync: !isFullSync,\n                                          counts: counts\n                                        }\n                                      });\n                                      paginatingModels.delete(modelDefinition);\n\n                                      if (paginatingModels.size === 0) {\n                                        duration = getNow() - start;\n                                        resolve();\n                                        observer.next({\n                                          type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n                                        });\n                                        syncQueriesSubscription.unsubscribe();\n                                      }\n\n                                      _b.label = 4;\n\n                                    case 4:\n                                      return [2\n                                      /*return*/\n                                      ];\n                                  }\n                                });\n                              });\n                            },\n                            error: function (error) {\n                              observer.error(error);\n                            }\n                          });\n                          observer.next({\n                            type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_STARTED,\n                            data: {\n                              models: Array.from(paginatingModels).map(function (_a) {\n                                var name = _a.name;\n                                return name;\n                              })\n                            }\n                          });\n                        })];\n\n                      case 2:\n                        _a.sent();\n\n                        msNextFullSync = newestFullSyncStartedAt + theInterval - (newestStartedAt + duration);\n                        logger.debug(\"Next fullSync in \" + msNextFullSync / 1000 + \" seconds. (\" + new Date(Date.now() + msNextFullSync) + \")\"); // TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n                        // a lot of thought into what that contract looks like to\n                        //  support possible use-cases:\n                        //\n                        //  1. non-cancelable\n                        //  2. cancelable, unsleep on exit()\n                        //  3. cancelable, throw Error on exit()\n                        //  4. cancelable, callback first on exit()?\n                        //  5. ... etc. ? ...\n                        //\n                        // TLDR; this is a lot of complexity here for a sleep(),\n                        // but, it's not clear to me yet how to support an\n                        // extensible, centralized cancelable `sleep()` elegantly.\n\n                        return [4\n                        /*yield*/\n                        , this_1.runningProcesses.add(function (onTerminate) {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var sleepTimer, unsleep, sleep;\n                            return __generator(this, function (_a) {\n                              sleep = new Promise(function (_unsleep) {\n                                unsleep = _unsleep;\n                                sleepTimer = setTimeout(unsleep, msNextFullSync);\n                              });\n                              onTerminate.then(function () {\n                                terminated = true;\n                                unsleep();\n                              });\n                              return [2\n                              /*return*/\n                              , sleep];\n                            });\n                          });\n                        }, 'syncQueriesObservable sleep')];\n\n                      case 3:\n                        // TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n                        // a lot of thought into what that contract looks like to\n                        //  support possible use-cases:\n                        //\n                        //  1. non-cancelable\n                        //  2. cancelable, unsleep on exit()\n                        //  3. cancelable, throw Error on exit()\n                        //  4. cancelable, callback first on exit()?\n                        //  5. ... etc. ? ...\n                        //\n                        // TLDR; this is a lot of complexity here for a sleep(),\n                        // but, it's not clear to me yet how to support an\n                        // extensible, centralized cancelable `sleep()` elegantly.\n                        _a.sent();\n\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                };\n\n                this_1 = this;\n                _a.label = 1;\n\n              case 1:\n                if (!(!observer.closed && !terminated)) return [3\n                /*break*/\n                , 3];\n                return [5\n                /*yield**/\n                , _loop_1()];\n\n              case 2:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 1];\n\n              case 3:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }, 'syncQueriesObservable main');\n    });\n  };\n\n  SyncEngine.prototype.disconnectionHandler = function () {\n    var _this = this;\n\n    return function (msg) {\n      // This implementation is tied to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n      if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg || PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n        _this.datastoreConnectivity.socketDisconnected();\n      }\n    };\n  };\n\n  SyncEngine.prototype.unsubscribeConnectivity = function () {\n    this.datastoreConnectivity.unsubscribe();\n  };\n  /**\n   * Stops all subscription activities and resolves when all activies report\n   * that they're disconnected, done retrying, etc..\n   */\n\n\n  SyncEngine.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('stopping sync engine');\n            /**\n             * Gracefully disconnecting subscribers first just prevents *more* work\n             * from entering the pipelines.\n             */\n\n            this.unsubscribeConnectivity();\n            /**\n             * aggressively shut down any lingering background processes.\n             * some of this might be semi-redundant with unsubscribing. however,\n             * unsubscribing doesn't allow us to wait for settling.\n             * (Whereas `stop()` does.)\n             */\n\n            return [4\n            /*yield*/\n            , this.mutationsProcessor.stop()];\n\n          case 1:\n            /**\n             * aggressively shut down any lingering background processes.\n             * some of this might be semi-redundant with unsubscribing. however,\n             * unsubscribing doesn't allow us to wait for settling.\n             * (Whereas `stop()` does.)\n             */\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.subscriptionsProcessor.stop()];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.datastoreConnectivity.stop()];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.syncQueriesProcessor.stop()];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 5:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 6:\n            _a.sent();\n\n            logger.debug('sync engine stopped and ready to restart');\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.setupModels = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fullSyncInterval, ModelMetadataConstructor, models, savedModel, promises, result, _a, _b, modelMetadata, modelName, e_2_1;\n\n      var e_2, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            fullSyncInterval = params.fullSyncInterval;\n            ModelMetadataConstructor = this.modelClasses.ModelMetadata;\n            models = [];\n            Object.values(this.schema.namespaces).forEach(function (namespace) {\n              Object.values(namespace.models).filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n              }).forEach(function (model) {\n                models.push([namespace.name, model]);\n\n                if (namespace.name === USER) {\n                  var modelConstructor = _this.userModelClasses[model.name];\n\n                  _this.modelSyncedStatus.set(modelConstructor, false);\n                }\n              });\n            });\n            promises = models.map(function (_a) {\n              var _b = __read(_a, 2),\n                  namespace = _b[0],\n                  model = _b[1];\n\n              return __awaiter(_this, void 0, void 0, function () {\n                var modelMetadata, syncPredicate, lastSyncPredicate, prevSyncPredicate, syncPredicateUpdated_1;\n\n                var _c, _d, _e, _f;\n\n                return __generator(this, function (_g) {\n                  switch (_g.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.getModelMetadata(namespace, model.name)];\n\n                    case 1:\n                      modelMetadata = _g.sent();\n                      syncPredicate = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n                      lastSyncPredicate = syncPredicate ? JSON.stringify(syncPredicate) : null;\n                      if (!(modelMetadata === undefined)) return [3\n                      /*break*/\n                      , 3];\n                      return [4\n                      /*yield*/\n                      , this.storage.save(this.modelInstanceCreator(ModelMetadataConstructor, {\n                        model: model.name,\n                        namespace: namespace,\n                        lastSync: null,\n                        fullSyncInterval: fullSyncInterval,\n                        lastFullSync: null,\n                        lastSyncPredicate: lastSyncPredicate\n                      }), undefined, ownSymbol)];\n\n                    case 2:\n                      _c = __read.apply(void 0, [_g.sent(), 1]), _d = __read(_c[0], 1), savedModel = _d[0];\n                      return [3\n                      /*break*/\n                      , 5];\n\n                    case 3:\n                      prevSyncPredicate = modelMetadata.lastSyncPredicate ? modelMetadata.lastSyncPredicate : null;\n                      syncPredicateUpdated_1 = prevSyncPredicate !== lastSyncPredicate;\n                      return [4\n                      /*yield*/\n                      , this.storage.save(ModelMetadataConstructor.copyOf(modelMetadata, function (draft) {\n                        draft.fullSyncInterval = fullSyncInterval; // perform a base sync if the syncPredicate changed in between calls to DataStore.start\n                        // ensures that the local store contains all the data specified by the syncExpression\n\n                        if (syncPredicateUpdated_1) {\n                          draft.lastSync = null;\n                          draft.lastFullSync = null;\n                          draft.lastSyncPredicate = lastSyncPredicate;\n                        }\n                      }))];\n\n                    case 4:\n                      _e = __read.apply(void 0, [_g.sent(), 1]), _f = __read(_e[0], 1), savedModel = _f[0];\n                      _g.label = 5;\n\n                    case 5:\n                      return [2\n                      /*return*/\n                      , savedModel];\n                  }\n                });\n              });\n            });\n            result = {};\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 2:\n            _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();\n            _d.label = 3;\n\n          case 3:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            modelMetadata = _b.value;\n            modelName = modelMetadata.model;\n            result[modelName] = modelMetadata;\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_2_1 = _d.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelsMetadata = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, modelsMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            return [4\n            /*yield*/\n            , this.storage.query(ModelMetadata)];\n\n          case 1:\n            modelsMetadata = _a.sent();\n            return [2\n            /*return*/\n            , modelsMetadata];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, predicate, _a, modelMetadata;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            predicate = ModelPredicateCreator.createFromExisting(this.schema.namespaces[SYNC].models[ModelMetadata.name], function (c) {\n              return c.namespace('eq', namespace).model('eq', model);\n            });\n            return [4\n            /*yield*/\n            , this.storage.query(ModelMetadata, predicate, {\n              page: 0,\n              limit: 1\n            })];\n\n          case 1:\n            _a = __read.apply(void 0, [_b.sent(), 1]), modelMetadata = _a[0];\n            return [2\n            /*return*/\n            , modelMetadata];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n    return modelDefinition;\n  };\n\n  SyncEngine.getNamespace = function () {\n    var namespace = {\n      name: SYNC,\n      relationships: {},\n      enums: {\n        OperationType: {\n          name: 'OperationType',\n          values: ['CREATE', 'UPDATE', 'DELETE']\n        }\n      },\n      nonModels: {},\n      models: {\n        MutationEvent: {\n          name: 'MutationEvent',\n          pluralName: 'MutationEvents',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            data: {\n              name: 'data',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            modelId: {\n              name: 'modelId',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            operation: {\n              name: 'operation',\n              type: {\n                enum: 'Operationtype'\n              },\n              isArray: false,\n              isRequired: true\n            },\n            condition: {\n              name: 'condition',\n              type: 'String',\n              isArray: false,\n              isRequired: true\n            }\n          }\n        },\n        ModelMetadata: {\n          name: 'ModelMetadata',\n          pluralName: 'ModelsMetadata',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            namespace: {\n              name: 'namespace',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            lastSync: {\n              name: 'lastSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            lastFullSync: {\n              name: 'lastFullSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            fullSyncInterval: {\n              name: 'fullSyncInterval',\n              type: 'Int',\n              isRequired: true,\n              isArray: false\n            },\n            lastSyncPredicate: {\n              name: 'lastSyncPredicate',\n              type: 'String',\n              isRequired: false,\n              isArray: false\n            }\n          }\n        }\n      }\n    };\n    return namespace;\n  };\n\n  return SyncEngine;\n}();\n\nexport { SyncEngine };","map":{"version":3,"mappings":"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","names":["browserOrNode","ConsoleLogger","Logger","BackgroundProcessManager","CONTROL_MSG","PUBSUB_CONTROL_MSG","Observable","ModelPredicateCreator","OpType","getNow","SYNC","USER","DataStoreConnectivity","ModelMerger","MutationEventOutbox","MutationProcessor","SubscriptionProcessor","SyncProcessor","createMutationInstanceFromModelOperation","getIdentifierValue","predicateToGraphQLCondition","logger","ownSymbol","Symbol","ControlMessage","schema","namespaceResolver","modelClasses","userModelClasses","storage","modelInstanceCreator","conflictHandler","errorHandler","syncPredicates","amplifyConfig","authModeStrategy","amplifyContext","connectivityMonitor","WeakMap","runningProcesses","MutationEvent","outbox","modelMerger","syncQueriesProcessor","subscriptionsProcessor","mutationsProcessor","datastoreConnectivity","SyncEngine","modelConstructor","modelSyncedStatus","get","params","log","subscriptions","_this","add","setupModels","_a","observer","error","err_1","startPromise","Promise","doneStarting","failedStarting","status","subscribe","online","isOpen","onTerminate","next","type","SYNC_ENGINE_NETWORK_STATUS","data","active","dataSubsObservable","isNode","warn","ctlSubsObservable_1","resolve","reject","then","ctlSubsSubscription","msg","CONNECTED","err","handleDisconnect","disconnectionHandler","push","_b","err_2","SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED","syncQuerySubscription","syncQueriesObservable","SYNC_ENGINE_SYNC_QUERIES_READY","message","complete","error_1","start","modelDefinition","item","hasMore","name","model","runExclusive","merge","SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED","element","SYNC_ENGINE_OUTBOX_STATUS","isEmpty","_transformerMutationType","forEach","unsubscribe","observe","filter","getModelDefinition","syncable","opType","condition","namespace","namespaces","MutationEventConstructor","graphQLCondition","mutationEvent","relationships","enqueue","SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED","resume","SYNC_ENGINE_STORAGE_SUBSCRIBED","peek","hasMutationsInOutbox","undefined","SYNC_ENGINE_READY","currentTimeStamp","Map","getModelsMetadata","modelLastSync","map","lastSync","lastFullSync","fullSyncInterval","lastSyncPredicate","nextFullSync","syncFrom","models","of","syncQueriesSubscription","terminated","count","this_1","getModelsMetadataWithNextFullSync","Date","now","paginatingModels","Set","keys","items","done","startedAt","isFullSync","has","set","new","updated","deleted","newestStartedAt","Math","max","getModelIds","idsInOutbox","_e","oneByOne","page","itemId","opTypeCount","oneByOne_1","oneByOne_1_1","apply","mergePage","counts","INSERT","UPDATE","DELETE","Error","modelName","getModelMetadata","modelMetadata_1","theInterval","newestFullSyncStartedAt","ModelMetadata","copyOf","draft","save","SYNC_ENGINE_MODEL_SYNCED","isDeltaSync","delete","size","duration","SYNC_ENGINE_SYNC_QUERIES_STARTED","Array","from","msNextFullSync","debug","sleep","unsleep","_unsleep","sleepTimer","setTimeout","closed","CONNECTION_CLOSED","TIMEOUT_DISCONNECT","socketDisconnected","unsubscribeConnectivity","stop","close","open","ModelMetadataConstructor","Object","values","promises","modelMetadata","_g","syncPredicate","getPredicates","JSON","stringify","_c","_d","savedModel","prevSyncPredicate","syncPredicateUpdated_1","_f","result","all","query","modelsMetadata","predicate","createFromExisting","limit","namespaceName","enums","OperationType","nonModels","pluralName","fields","id","isRequired","isArray","modelId","operation","enum"],"sources":["/home/dalienst/node_modules/@aws-amplify/datastore/src/sync/index.ts"],"sourcesContent":["import {\n\tbrowserOrNode,\n\tConsoleLogger as Logger,\n\tBackgroundProcessManager,\n} from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport { ModelPredicateCreator } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport {\n\tConflictHandler,\n\tControlMessageType,\n\tErrorHandler,\n\tInternalSchema,\n\tModelInit,\n\tModelInstanceMetadata,\n\tMutableModel,\n\tNamespaceResolver,\n\tOpType,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tSchemaModel,\n\tSchemaNamespace,\n\tTypeConstructorMap,\n\tModelPredicate,\n\tAuthModeStrategy,\n\tManagedIdentifier,\n\tOptionallyManagedIdentifier,\n\tAmplifyContext,\n} from '../types';\n// tslint:disable:no-duplicate-imports\nimport type { __modelMeta__ } from '../types';\n\nimport { getNow, SYNC, USER } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport {\n\tcreateMutationInstanceFromModelOperation,\n\tgetIdentifierValue,\n\tpredicateToGraphQLCondition,\n\tTransformerMutationType,\n} from './utils';\n\nconst { isNode } = browserOrNode();\nconst logger = new Logger('DataStore');\n\nconst ownSymbol = Symbol('sync');\n\ntype StartParams = {\n\tfullSyncInterval: number;\n};\n\nexport declare class MutationEvent {\n\treadonly [__modelMeta__]: {\n\t\tidentifier: OptionallyManagedIdentifier<MutationEvent, 'id'>;\n\t};\n\tpublic readonly id: string;\n\tpublic readonly model: string;\n\tpublic readonly operation: TransformerMutationType;\n\tpublic readonly modelId: string;\n\tpublic readonly condition: string;\n\tpublic readonly data: string;\n\tconstructor(init: ModelInit<MutationEvent>);\n\tstatic copyOf(\n\t\tsrc: MutationEvent,\n\t\tmutator: (draft: MutableModel<MutationEvent>) => void | MutationEvent\n\t): MutationEvent;\n}\n\nexport declare class ModelMetadata {\n\treadonly [__modelMeta__]: {\n\t\tidentifier: ManagedIdentifier<ModelMetadata, 'id'>;\n\t};\n\tpublic readonly id: string;\n\tpublic readonly namespace: string;\n\tpublic readonly model: string;\n\tpublic readonly fullSyncInterval: number;\n\tpublic readonly lastSync?: number;\n\tpublic readonly lastFullSync?: number;\n\tpublic readonly lastSyncPredicate?: null | string;\n\tconstructor(init: ModelInit<ModelMetadata>);\n\tstatic copyOf(\n\t\tsrc: ModelMetadata,\n\t\tmutator: (draft: MutableModel<ModelMetadata>) => void | ModelMetadata\n\t): ModelMetadata;\n}\n\nexport enum ControlMessage {\n\tSYNC_ENGINE_STORAGE_SUBSCRIBED = 'storageSubscribed',\n\tSYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED = 'subscriptionsEstablished',\n\tSYNC_ENGINE_SYNC_QUERIES_STARTED = 'syncQueriesStarted',\n\tSYNC_ENGINE_SYNC_QUERIES_READY = 'syncQueriesReady',\n\tSYNC_ENGINE_MODEL_SYNCED = 'modelSynced',\n\tSYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED = 'outboxMutationEnqueued',\n\tSYNC_ENGINE_OUTBOX_MUTATION_PROCESSED = 'outboxMutationProcessed',\n\tSYNC_ENGINE_OUTBOX_STATUS = 'outboxStatus',\n\tSYNC_ENGINE_NETWORK_STATUS = 'networkStatus',\n\tSYNC_ENGINE_READY = 'ready',\n}\n\nexport class SyncEngine {\n\tprivate online = false;\n\n\tprivate readonly syncQueriesProcessor: SyncProcessor;\n\tprivate readonly subscriptionsProcessor: SubscriptionProcessor;\n\tprivate readonly mutationsProcessor: MutationProcessor;\n\tprivate readonly modelMerger: ModelMerger;\n\tprivate readonly outbox: MutationEventOutbox;\n\tprivate readonly datastoreConnectivity: DataStoreConnectivity;\n\tprivate readonly modelSyncedStatus: WeakMap<\n\t\tPersistentModelConstructor<any>,\n\t\tboolean\n\t> = new WeakMap();\n\n\tprivate runningProcesses: BackgroundProcessManager;\n\n\tpublic getModelSyncedStatus(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t): boolean {\n\t\treturn this.modelSyncedStatus.get(modelConstructor)!;\n\t}\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly namespaceResolver: NamespaceResolver,\n\t\tprivate readonly modelClasses: TypeConstructorMap,\n\t\tprivate readonly userModelClasses: TypeConstructorMap,\n\t\tprivate readonly storage: Storage,\n\t\tprivate readonly modelInstanceCreator: ModelInstanceCreator,\n\t\tconflictHandler: ConflictHandler,\n\t\terrorHandler: ErrorHandler,\n\t\tprivate readonly syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly amplifyContext: AmplifyContext,\n\t\tprivate readonly connectivityMonitor?: DataStoreConnectivity\n\t) {\n\t\tthis.runningProcesses = new BackgroundProcessManager();\n\n\t\tconst MutationEvent = this.modelClasses[\n\t\t\t'MutationEvent'\n\t\t] as PersistentModelConstructor<MutationEvent>;\n\n\t\tthis.outbox = new MutationEventOutbox(\n\t\t\tthis.schema,\n\t\t\tMutationEvent,\n\t\t\tmodelInstanceCreator,\n\t\t\townSymbol\n\t\t);\n\n\t\tthis.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n\n\t\tthis.syncQueriesProcessor = new SyncProcessor(\n\t\t\tthis.schema,\n\t\t\tthis.syncPredicates,\n\t\t\tthis.amplifyConfig,\n\t\t\tthis.authModeStrategy,\n\t\t\terrorHandler,\n\t\t\tthis.amplifyContext\n\t\t);\n\n\t\tthis.subscriptionsProcessor = new SubscriptionProcessor(\n\t\t\tthis.schema,\n\t\t\tthis.syncPredicates,\n\t\t\tthis.amplifyConfig,\n\t\t\tthis.authModeStrategy,\n\t\t\terrorHandler,\n\t\t\tthis.amplifyContext\n\t\t);\n\n\t\tthis.mutationsProcessor = new MutationProcessor(\n\t\t\tthis.schema,\n\t\t\tthis.storage,\n\t\t\tthis.userModelClasses,\n\t\t\tthis.outbox,\n\t\t\tthis.modelInstanceCreator,\n\t\t\tMutationEvent,\n\t\t\tthis.amplifyConfig,\n\t\t\tthis.authModeStrategy,\n\t\t\terrorHandler,\n\t\t\tconflictHandler,\n\t\t\tthis.amplifyContext\n\t\t);\n\n\t\tthis.datastoreConnectivity =\n\t\t\tthis.connectivityMonitor || new DataStoreConnectivity();\n\t}\n\n\tstart(params: StartParams) {\n\t\treturn new Observable<ControlMessageType<ControlMessage>>(observer => {\n\t\t\tlogger.log('starting sync engine...');\n\n\t\t\tlet subscriptions: ZenObservable.Subscription[] = [];\n\n\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.setupModels(params);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tobserver.error(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// this is awaited at the bottom. so, we don't need to register\n\t\t\t\t// this explicitly with the context. it's already contained.\n\t\t\t\tconst startPromise = new Promise((doneStarting, failedStarting) => {\n\t\t\t\t\tthis.datastoreConnectivity.status().subscribe(\n\t\t\t\t\t\tasync ({ online }) =>\n\t\t\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t\t\tthis.runningProcesses.add(async onTerminate => {\n\t\t\t\t\t\t\t\t// From offline to online\n\t\t\t\t\t\t\t\tif (online && !this.online) {\n\t\t\t\t\t\t\t\t\tthis.online = online;\n\n\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\tactive: this.online,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tlet ctlSubsObservable: Observable<CONTROL_MSG>;\n\t\t\t\t\t\t\t\t\tlet dataSubsObservable: Observable<\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType, SchemaModel, PersistentModel]\n\t\t\t\t\t\t\t\t\t>;\n\n\t\t\t\t\t\t\t\t\t// NOTE: need a way to override this conditional for testing.\n\t\t\t\t\t\t\t\t\tif (isNode) {\n\t\t\t\t\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t\t\t\t\t'Realtime disabled when in a server-side environment'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t//#region GraphQL Subscriptions\n\t\t\t\t\t\t\t\t\t\t[ctlSubsObservable, dataSubsObservable] =\n\t\t\t\t\t\t\t\t\t\t\tthis.subscriptionsProcessor.start();\n\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tawait new Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\t\tonTerminate.then(reject);\n\t\t\t\t\t\t\t\t\t\t\t\tconst ctlSubsSubscription = ctlSubsObservable.subscribe(\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnext: msg => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (msg === CONTROL_MSG.CONNECTED) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: err => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst handleDisconnect =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.disconnectionHandler();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleDisconnect(err);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions.push(ctlSubsSubscription);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t\t\tobserver.error(err);\n\t\t\t\t\t\t\t\t\t\t\tfailedStarting();\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tlogger.log('Realtime ready');\n\n\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED,\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t//#endregion\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t//#region Base & Sync queries\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tawait new Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\tconst syncQuerySubscription =\n\t\t\t\t\t\t\t\t\t\t\t\tthis.syncQueriesObservable().subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext: message => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst { type } = message;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tobserver.next(message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\terror: error => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tif (syncQuerySubscription) {\n\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions.push(syncQuerySubscription);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\tobserver.error(error);\n\t\t\t\t\t\t\t\t\t\tfailedStarting();\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//#endregion\n\n\t\t\t\t\t\t\t\t\t//#region process mutations (outbox)\n\t\t\t\t\t\t\t\t\tsubscriptions.push(\n\t\t\t\t\t\t\t\t\t\tthis.mutationsProcessor\n\t\t\t\t\t\t\t\t\t\t\t.start()\n\t\t\t\t\t\t\t\t\t\t\t.subscribe(({ modelDefinition, model: item, hasMore }) =>\n\t\t\t\t\t\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst modelConstructor = this.userModelClasses[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t] as PersistentModelConstructor<any>;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst model = this.modelInstanceCreator(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.storage.runExclusive(storage =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.modelMerger.merge(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telement: model,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisEmpty: !hasMore,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t}, 'mutation processor event')\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t//#endregion\n\n\t\t\t\t\t\t\t\t\t//#region Merge subscriptions buffer\n\t\t\t\t\t\t\t\t\t// TODO: extract to function\n\t\t\t\t\t\t\t\t\tif (!isNode) {\n\t\t\t\t\t\t\t\t\t\tsubscriptions.push(\n\t\t\t\t\t\t\t\t\t\t\tdataSubsObservable!.subscribe(\n\t\t\t\t\t\t\t\t\t\t\t\t([_transformerMutationType, modelDefinition, item]) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst modelConstructor = this.userModelClasses[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t] as PersistentModelConstructor<any>;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst model = this.modelInstanceCreator(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.storage.runExclusive(storage =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.modelMerger.merge(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}, 'subscription dataSubsObservable event')\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//#endregion\n\t\t\t\t\t\t\t\t} else if (!online) {\n\t\t\t\t\t\t\t\t\tthis.online = online;\n\n\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\tactive: this.online,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tsubscriptions.forEach(sub => sub.unsubscribe());\n\t\t\t\t\t\t\t\t\tsubscriptions = [];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tdoneStarting();\n\t\t\t\t\t\t\t}, 'datastore connectivity event')\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tthis.storage\n\t\t\t\t\t.observe(null, null, ownSymbol)\n\t\t\t\t\t.filter(({ model }) => {\n\t\t\t\t\t\tconst modelDefinition = this.getModelDefinition(model);\n\t\t\t\t\t\treturn modelDefinition.syncable === true;\n\t\t\t\t\t})\n\t\t\t\t\t.subscribe({\n\t\t\t\t\t\tnext: async ({ opType, model, element, condition }) =>\n\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\tconst namespace =\n\t\t\t\t\t\t\t\t\tthis.schema.namespaces[this.namespaceResolver(model)];\n\t\t\t\t\t\t\t\tconst MutationEventConstructor = this.modelClasses[\n\t\t\t\t\t\t\t\t\t'MutationEvent'\n\t\t\t\t\t\t\t\t] as PersistentModelConstructor<MutationEvent>;\n\t\t\t\t\t\t\t\tconst modelDefinition = this.getModelDefinition(model);\n\t\t\t\t\t\t\t\tconst graphQLCondition = predicateToGraphQLCondition(\n\t\t\t\t\t\t\t\t\tcondition!,\n\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst mutationEvent = createMutationInstanceFromModelOperation(\n\t\t\t\t\t\t\t\t\tnamespace.relationships!,\n\t\t\t\t\t\t\t\t\tthis.getModelDefinition(model),\n\t\t\t\t\t\t\t\t\topType,\n\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\telement,\n\t\t\t\t\t\t\t\t\tgraphQLCondition,\n\t\t\t\t\t\t\t\t\tMutationEventConstructor,\n\t\t\t\t\t\t\t\t\tthis.modelInstanceCreator\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tawait this.outbox.enqueue(this.storage, mutationEvent);\n\n\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED,\n\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\t\t\t\telement,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\tisEmpty: false,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tawait startPromise;\n\n\t\t\t\t\t\t\t\tif (this.online) {\n\t\t\t\t\t\t\t\t\tthis.mutationsProcessor.resume();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 'storage event'),\n\t\t\t\t\t});\n\n\t\t\t\tobserver.next({\n\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED,\n\t\t\t\t});\n\n\t\t\t\tconst hasMutationsInOutbox =\n\t\t\t\t\t(await this.outbox.peek(this.storage)) === undefined;\n\t\t\t\tobserver.next({\n\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tisEmpty: hasMutationsInOutbox,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tawait startPromise;\n\n\t\t\t\tobserver.next({\n\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_READY,\n\t\t\t\t});\n\t\t\t}, 'sync start');\n\t\t});\n\t}\n\n\tprivate async getModelsMetadataWithNextFullSync(\n\t\tcurrentTimeStamp: number\n\t): Promise<Map<SchemaModel, [string, number]>> {\n\t\tconst modelLastSync: Map<SchemaModel, [string, number]> = new Map(\n\t\t\t(\n\t\t\t\tawait this.runningProcesses.add(\n\t\t\t\t\t() => this.getModelsMetadata(),\n\t\t\t\t\t'sync/index getModelsMetadataWithNextFullSync'\n\t\t\t\t)\n\t\t\t).map(\n\t\t\t\t({\n\t\t\t\t\tnamespace,\n\t\t\t\t\tmodel,\n\t\t\t\t\tlastSync,\n\t\t\t\t\tlastFullSync,\n\t\t\t\t\tfullSyncInterval,\n\t\t\t\t\tlastSyncPredicate,\n\t\t\t\t}) => {\n\t\t\t\t\tconst nextFullSync = lastFullSync! + fullSyncInterval;\n\t\t\t\t\tconst syncFrom =\n\t\t\t\t\t\t!lastFullSync || nextFullSync < currentTimeStamp\n\t\t\t\t\t\t\t? 0 // perform full sync if expired\n\t\t\t\t\t\t\t: lastSync; // perform delta sync\n\n\t\t\t\t\treturn [\n\t\t\t\t\t\tthis.schema.namespaces[namespace].models[model],\n\t\t\t\t\t\t[namespace, syncFrom!],\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\treturn modelLastSync;\n\t}\n\n\tprivate syncQueriesObservable(): Observable<\n\t\tControlMessageType<ControlMessage>\n\t> {\n\t\tif (!this.online) {\n\t\t\treturn Observable.of<ControlMessageType<ControlMessage>>();\n\t\t}\n\n\t\treturn new Observable<ControlMessageType<ControlMessage>>(observer => {\n\t\t\tlet syncQueriesSubscription: ZenObservable.Subscription;\n\n\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\tthis.runningProcesses.add(async onTerminate => {\n\t\t\t\t\tlet terminated = false;\n\n\t\t\t\t\twhile (!observer.closed && !terminated) {\n\t\t\t\t\t\tconst count: WeakMap<\n\t\t\t\t\t\t\tPersistentModelConstructor<any>,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnew: number;\n\t\t\t\t\t\t\t\tupdated: number;\n\t\t\t\t\t\t\t\tdeleted: number;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t> = new WeakMap();\n\n\t\t\t\t\t\tconst modelLastSync = await this.getModelsMetadataWithNextFullSync(\n\t\t\t\t\t\t\tDate.now()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst paginatingModels = new Set(modelLastSync.keys());\n\n\t\t\t\t\t\tlet newestFullSyncStartedAt: number;\n\t\t\t\t\t\tlet theInterval: number;\n\n\t\t\t\t\t\tlet start: number;\n\t\t\t\t\t\tlet duration: number;\n\t\t\t\t\t\tlet newestStartedAt: number;\n\t\t\t\t\t\tawait new Promise((resolve, reject) => {\n\t\t\t\t\t\t\tif (!this.runningProcesses.isOpen) resolve();\n\t\t\t\t\t\t\tonTerminate.then(() => resolve());\n\t\t\t\t\t\t\tsyncQueriesSubscription = this.syncQueriesProcessor\n\t\t\t\t\t\t\t\t.start(modelLastSync)\n\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\tnext: async ({\n\t\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\t\t\tdone,\n\t\t\t\t\t\t\t\t\t\tstartedAt,\n\t\t\t\t\t\t\t\t\t\tisFullSync,\n\t\t\t\t\t\t\t\t\t}) => {\n\t\t\t\t\t\t\t\t\t\tconst modelConstructor = this.userModelClasses[\n\t\t\t\t\t\t\t\t\t\t\tmodelDefinition.name\n\t\t\t\t\t\t\t\t\t\t] as PersistentModelConstructor<any>;\n\n\t\t\t\t\t\t\t\t\t\tif (!count.has(modelConstructor)) {\n\t\t\t\t\t\t\t\t\t\t\tcount.set(modelConstructor, {\n\t\t\t\t\t\t\t\t\t\t\t\tnew: 0,\n\t\t\t\t\t\t\t\t\t\t\t\tupdated: 0,\n\t\t\t\t\t\t\t\t\t\t\t\tdeleted: 0,\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tstart = getNow();\n\t\t\t\t\t\t\t\t\t\t\tnewestStartedAt =\n\t\t\t\t\t\t\t\t\t\t\t\tnewestStartedAt === undefined\n\t\t\t\t\t\t\t\t\t\t\t\t\t? startedAt\n\t\t\t\t\t\t\t\t\t\t\t\t\t: Math.max(newestStartedAt, startedAt);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t\t\t * If there are mutations in the outbox for a given id, those need to be\n\t\t\t\t\t\t\t\t\t\t * merged individually. Otherwise, we can merge them in batches.\n\t\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\t\tawait this.storage.runExclusive(async storage => {\n\t\t\t\t\t\t\t\t\t\t\tconst idsInOutbox = await this.outbox.getModelIds(\n\t\t\t\t\t\t\t\t\t\t\t\tstorage\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tconst oneByOne: ModelInstanceMetadata[] = [];\n\t\t\t\t\t\t\t\t\t\t\tconst page = items.filter(item => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst itemId = getIdentifierValue(\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (!idsInOutbox.has(itemId)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\toneByOne.push(item);\n\t\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tconst opTypeCount: [any, OpType][] = [];\n\n\t\t\t\t\t\t\t\t\t\t\tfor (const item of oneByOne) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst opType = await this.modelMerger.merge(\n\t\t\t\t\t\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (opType !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\t\topTypeCount.push([item, opType]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\topTypeCount.push(\n\t\t\t\t\t\t\t\t\t\t\t\t...(await this.modelMerger.mergePage(\n\t\t\t\t\t\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpage,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition\n\t\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tconst counts = count.get(modelConstructor)!;\n\n\t\t\t\t\t\t\t\t\t\t\topTypeCount.forEach(([, opType]) => {\n\t\t\t\t\t\t\t\t\t\t\t\tswitch (opType) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase OpType.INSERT:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcounts.new++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase OpType.UPDATE:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcounts.updated++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase OpType.DELETE:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcounts.deleted++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new Error(`Invalid opType ${opType}`);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\t\t\t\t\tconst { name: modelName } = modelDefinition;\n\n\t\t\t\t\t\t\t\t\t\t\t//#region update last sync for type\n\t\t\t\t\t\t\t\t\t\t\tlet modelMetadata = await this.getModelMetadata(\n\t\t\t\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tconst { lastFullSync, fullSyncInterval } = modelMetadata;\n\n\t\t\t\t\t\t\t\t\t\t\ttheInterval = fullSyncInterval;\n\n\t\t\t\t\t\t\t\t\t\t\tnewestFullSyncStartedAt =\n\t\t\t\t\t\t\t\t\t\t\t\tnewestFullSyncStartedAt === undefined\n\t\t\t\t\t\t\t\t\t\t\t\t\t? lastFullSync!\n\t\t\t\t\t\t\t\t\t\t\t\t\t: Math.max(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewestFullSyncStartedAt,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisFullSync ? startedAt : lastFullSync!\n\t\t\t\t\t\t\t\t\t\t\t\t\t  );\n\n\t\t\t\t\t\t\t\t\t\t\tmodelMetadata = (\n\t\t\t\t\t\t\t\t\t\t\t\tthis.modelClasses\n\t\t\t\t\t\t\t\t\t\t\t\t\t.ModelMetadata as PersistentModelConstructor<ModelMetadata>\n\t\t\t\t\t\t\t\t\t\t\t).copyOf(modelMetadata, draft => {\n\t\t\t\t\t\t\t\t\t\t\t\tdraft.lastSync = startedAt;\n\t\t\t\t\t\t\t\t\t\t\t\tdraft.lastFullSync = isFullSync\n\t\t\t\t\t\t\t\t\t\t\t\t\t? startedAt\n\t\t\t\t\t\t\t\t\t\t\t\t\t: modelMetadata.lastFullSync;\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tawait this.storage.save(\n\t\t\t\t\t\t\t\t\t\t\t\tmodelMetadata,\n\t\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\t\townSymbol\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t//#endregion\n\n\t\t\t\t\t\t\t\t\t\t\tconst counts = count.get(modelConstructor);\n\n\t\t\t\t\t\t\t\t\t\t\tthis.modelSyncedStatus.set(modelConstructor, true);\n\n\t\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_MODEL_SYNCED,\n\t\t\t\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\t\tisFullSync,\n\t\t\t\t\t\t\t\t\t\t\t\t\tisDeltaSync: !isFullSync,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcounts,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\tpaginatingModels.delete(modelDefinition);\n\n\t\t\t\t\t\t\t\t\t\t\tif (paginatingModels.size === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tduration = getNow() - start;\n\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY,\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\tsyncQueriesSubscription.unsubscribe();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\terror: error => {\n\t\t\t\t\t\t\t\t\t\tobserver.error(error);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tobserver.next({\n\t\t\t\t\t\t\t\ttype: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_STARTED,\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\tmodels: Array.from(paginatingModels).map(({ name }) => name),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst msNextFullSync =\n\t\t\t\t\t\t\tnewestFullSyncStartedAt! +\n\t\t\t\t\t\t\ttheInterval! -\n\t\t\t\t\t\t\t(newestStartedAt! + duration!);\n\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t`Next fullSync in ${msNextFullSync / 1000} seconds. (${new Date(\n\t\t\t\t\t\t\t\tDate.now() + msNextFullSync\n\t\t\t\t\t\t\t)})`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n\t\t\t\t\t\t// a lot of thought into what that contract looks like to\n\t\t\t\t\t\t//  support possible use-cases:\n\t\t\t\t\t\t//\n\t\t\t\t\t\t//  1. non-cancelable\n\t\t\t\t\t\t//  2. cancelable, unsleep on exit()\n\t\t\t\t\t\t//  3. cancelable, throw Error on exit()\n\t\t\t\t\t\t//  4. cancelable, callback first on exit()?\n\t\t\t\t\t\t//  5. ... etc. ? ...\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// TLDR; this is a lot of complexity here for a sleep(),\n\t\t\t\t\t\t// but, it's not clear to me yet how to support an\n\t\t\t\t\t\t// extensible, centralized cancelable `sleep()` elegantly.\n\t\t\t\t\t\tawait this.runningProcesses.add(async onTerminate => {\n\t\t\t\t\t\t\tlet sleepTimer;\n\t\t\t\t\t\t\tlet unsleep;\n\n\t\t\t\t\t\t\tconst sleep = new Promise(_unsleep => {\n\t\t\t\t\t\t\t\tunsleep = _unsleep;\n\t\t\t\t\t\t\t\tsleepTimer = setTimeout(unsleep, msNextFullSync);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tonTerminate.then(() => {\n\t\t\t\t\t\t\t\tterminated = true;\n\t\t\t\t\t\t\t\tunsleep();\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn sleep;\n\t\t\t\t\t\t}, 'syncQueriesObservable sleep');\n\t\t\t\t\t}\n\t\t\t\t}, 'syncQueriesObservable main');\n\t\t});\n\t}\n\n\tprivate disconnectionHandler(): (msg: string) => void {\n\t\treturn (msg: string) => {\n\t\t\t// This implementation is tied to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n\t\t\tif (\n\t\t\t\tPUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg ||\n\t\t\t\tPUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg\n\t\t\t) {\n\t\t\t\tthis.datastoreConnectivity.socketDisconnected();\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic unsubscribeConnectivity() {\n\t\tthis.datastoreConnectivity.unsubscribe();\n\t}\n\n\t/**\n\t * Stops all subscription activities and resolves when all activies report\n\t * that they're disconnected, done retrying, etc..\n\t */\n\tpublic async stop() {\n\t\tlogger.debug('stopping sync engine');\n\n\t\t/**\n\t\t * Gracefully disconnecting subscribers first just prevents *more* work\n\t\t * from entering the pipelines.\n\t\t */\n\t\tthis.unsubscribeConnectivity();\n\n\t\t/**\n\t\t * aggressively shut down any lingering background processes.\n\t\t * some of this might be semi-redundant with unsubscribing. however,\n\t\t * unsubscribing doesn't allow us to wait for settling.\n\t\t * (Whereas `stop()` does.)\n\t\t */\n\n\t\tawait this.mutationsProcessor.stop();\n\t\tawait this.subscriptionsProcessor.stop();\n\t\tawait this.datastoreConnectivity.stop();\n\t\tawait this.syncQueriesProcessor.stop();\n\t\tawait this.runningProcesses.close();\n\t\tawait this.runningProcesses.open();\n\n\t\tlogger.debug('sync engine stopped and ready to restart');\n\t}\n\n\tprivate async setupModels(params: StartParams) {\n\t\tconst { fullSyncInterval } = params;\n\t\tconst ModelMetadataConstructor = this.modelClasses\n\t\t\t.ModelMetadata as PersistentModelConstructor<ModelMetadata>;\n\n\t\tconst models: [string, SchemaModel][] = [];\n\t\tlet savedModel;\n\n\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\tObject.values(namespace.models)\n\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t.forEach(model => {\n\t\t\t\t\tmodels.push([namespace.name, model]);\n\t\t\t\t\tif (namespace.name === USER) {\n\t\t\t\t\t\tconst modelConstructor = this.userModelClasses[\n\t\t\t\t\t\t\tmodel.name\n\t\t\t\t\t\t] as PersistentModelConstructor<any>;\n\t\t\t\t\t\tthis.modelSyncedStatus.set(modelConstructor, false);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\tconst promises = models.map(async ([namespace, model]) => {\n\t\t\tconst modelMetadata = await this.getModelMetadata(namespace, model.name);\n\t\t\tconst syncPredicate = ModelPredicateCreator.getPredicates(\n\t\t\t\tthis.syncPredicates.get(model)!,\n\t\t\t\tfalse\n\t\t\t);\n\t\t\tconst lastSyncPredicate = syncPredicate\n\t\t\t\t? JSON.stringify(syncPredicate)\n\t\t\t\t: null;\n\n\t\t\tif (modelMetadata === undefined) {\n\t\t\t\t[[savedModel]] = await this.storage.save(\n\t\t\t\t\tthis.modelInstanceCreator(ModelMetadataConstructor, {\n\t\t\t\t\t\tmodel: model.name,\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tlastSync: null!,\n\t\t\t\t\t\tfullSyncInterval,\n\t\t\t\t\t\tlastFullSync: null!,\n\t\t\t\t\t\tlastSyncPredicate,\n\t\t\t\t\t}),\n\t\t\t\t\tundefined,\n\t\t\t\t\townSymbol\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst prevSyncPredicate = modelMetadata.lastSyncPredicate\n\t\t\t\t\t? modelMetadata.lastSyncPredicate\n\t\t\t\t\t: null;\n\t\t\t\tconst syncPredicateUpdated = prevSyncPredicate !== lastSyncPredicate;\n\n\t\t\t\t[[savedModel]] = await this.storage.save(\n\t\t\t\t\tModelMetadataConstructor.copyOf(modelMetadata, draft => {\n\t\t\t\t\t\tdraft.fullSyncInterval = fullSyncInterval;\n\t\t\t\t\t\t// perform a base sync if the syncPredicate changed in between calls to DataStore.start\n\t\t\t\t\t\t// ensures that the local store contains all the data specified by the syncExpression\n\t\t\t\t\t\tif (syncPredicateUpdated) {\n\t\t\t\t\t\t\tdraft.lastSync = null!;\n\t\t\t\t\t\t\tdraft.lastFullSync = null!;\n\t\t\t\t\t\t\t(draft.lastSyncPredicate as any) = lastSyncPredicate;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn savedModel;\n\t\t});\n\n\t\tconst result: Record<string, ModelMetadata> = {};\n\t\tfor (const modelMetadata of await Promise.all(promises)) {\n\t\t\tconst { model: modelName } = modelMetadata;\n\n\t\t\tresult[modelName] = modelMetadata;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate async getModelsMetadata(): Promise<ModelMetadata[]> {\n\t\tconst ModelMetadata = this.modelClasses\n\t\t\t.ModelMetadata as PersistentModelConstructor<ModelMetadata>;\n\n\t\tconst modelsMetadata = await this.storage.query(ModelMetadata);\n\n\t\treturn modelsMetadata;\n\t}\n\n\tprivate async getModelMetadata(\n\t\tnamespace: string,\n\t\tmodel: string\n\t): Promise<ModelMetadata> {\n\t\tconst ModelMetadata = this.modelClasses\n\t\t\t.ModelMetadata as PersistentModelConstructor<ModelMetadata>;\n\n\t\tconst predicate = ModelPredicateCreator.createFromExisting<ModelMetadata>(\n\t\t\tthis.schema.namespaces[SYNC].models[ModelMetadata.name],\n\t\t\tc => c.namespace('eq', namespace).model('eq', model)\n\t\t);\n\n\t\tconst [modelMetadata] = await this.storage.query(ModelMetadata, predicate, {\n\t\t\tpage: 0,\n\t\t\tlimit: 1,\n\t\t});\n\n\t\treturn modelMetadata;\n\t}\n\n\tprivate getModelDefinition(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t): SchemaModel {\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst modelDefinition =\n\t\t\tthis.schema.namespaces[namespaceName].models[modelConstructor.name];\n\n\t\treturn modelDefinition;\n\t}\n\n\tstatic getNamespace() {\n\t\tconst namespace: SchemaNamespace = {\n\t\t\tname: SYNC,\n\t\t\trelationships: {},\n\t\t\tenums: {\n\t\t\t\tOperationType: {\n\t\t\t\t\tname: 'OperationType',\n\t\t\t\t\tvalues: ['CREATE', 'UPDATE', 'DELETE'],\n\t\t\t\t},\n\t\t\t},\n\t\t\tnonModels: {},\n\t\t\tmodels: {\n\t\t\t\tMutationEvent: {\n\t\t\t\t\tname: 'MutationEvent',\n\t\t\t\t\tpluralName: 'MutationEvents',\n\t\t\t\t\tsyncable: false,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\t\ttype: 'ID',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodel: {\n\t\t\t\t\t\t\tname: 'model',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tname: 'data',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodelId: {\n\t\t\t\t\t\t\tname: 'modelId',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\toperation: {\n\t\t\t\t\t\t\tname: 'operation',\n\t\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\t\tenum: 'Operationtype',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcondition: {\n\t\t\t\t\t\t\tname: 'condition',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tModelMetadata: {\n\t\t\t\t\tname: 'ModelMetadata',\n\t\t\t\t\tpluralName: 'ModelsMetadata',\n\t\t\t\t\tsyncable: false,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\t\ttype: 'ID',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnamespace: {\n\t\t\t\t\t\t\tname: 'namespace',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodel: {\n\t\t\t\t\t\t\tname: 'model',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlastSync: {\n\t\t\t\t\t\t\tname: 'lastSync',\n\t\t\t\t\t\t\ttype: 'Int',\n\t\t\t\t\t\t\tisRequired: false,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlastFullSync: {\n\t\t\t\t\t\t\tname: 'lastFullSync',\n\t\t\t\t\t\t\ttype: 'Int',\n\t\t\t\t\t\t\tisRequired: false,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfullSyncInterval: {\n\t\t\t\t\t\t\tname: 'fullSyncInterval',\n\t\t\t\t\t\t\ttype: 'Int',\n\t\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlastSyncPredicate: {\n\t\t\t\t\t\t\tname: 'lastSyncPredicate',\n\t\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\t\tisRequired: false,\n\t\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\treturn namespace;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
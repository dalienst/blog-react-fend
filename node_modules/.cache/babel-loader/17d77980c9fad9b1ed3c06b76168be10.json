{"ast":null,"code":"import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, _ref, mapStyle) {\n  let {\n    fillColor: markerColor = MARKER_COLOR,\n    smCircleSize: smallSize = 60,\n    smThreshold: smallThreshold = 50,\n    mdCircleSize: mediumSize = 100,\n    mdThreshold: mediumThreshold = 100,\n    lgCircleSize: largeSize = 140,\n    lgThreshold: largeThreshold = 500,\n    xlCircleSize: extraLargeSize = 180,\n    borderWidth = 4,\n    borderColor = COLOR_WHITE,\n    clusterPaint,\n    onClick,\n    showCount,\n    clusterCountLayout,\n    fontColor = COLOR_WHITE\n  } = _ref;\n  const clusterLayerId = `${sourceName}-layer-clusters`;\n  const clusterSymbolLayerId = `${sourceName}-layer-cluster-count`; // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n\n  const paintOptions = Object.assign({\n    \"circle-color\": [\"step\", [\"get\", \"point_count\"], markerColor, smallThreshold, markerColor, mediumThreshold, markerColor, largeThreshold, markerColor],\n    \"circle-radius\": [\"step\", [\"get\", \"point_count\"], smallSize, smallThreshold, mediumSize, mediumThreshold, largeSize, largeThreshold, extraLargeSize],\n    \"circle-stroke-width\": borderWidth,\n    \"circle-stroke-color\": borderColor\n  }, clusterPaint);\n  const defaultClusterLayer = {\n    id: clusterLayerId,\n    type: \"circle\",\n    source: sourceName,\n    filter: [\"has\", \"point_count\"],\n    paint: paintOptions\n  };\n  map.addLayer(Object.assign({}, defaultClusterLayer));\n  /*\n   * Inspect cluster on click\n   */\n\n  map.on(\"click\", clusterLayerId, function (e) {\n    if (typeof onClick === \"function\") onClick(e);\n    const features = map.queryRenderedFeatures(e.point, {\n      layers: [clusterLayerId]\n    });\n    const clusterId = features[0].properties.cluster_id;\n    const source = map.getSource(sourceName);\n\n    if (isGeoJsonSource(source)) {\n      source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n        if (err) return;\n        map.easeTo({\n          center: features[0].geometry.coordinates,\n          zoom: zoom\n        });\n      });\n    }\n  });\n  /*\n   * Symbol Layer for cluster point count\n   */\n\n  if (showCount) {\n    const defaultLayoutOptions = {\n      \"text-field\": \"{point_count_abbreviated}\",\n      \"text-size\": 24\n    };\n    const locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n\n    if (locationServiceStyle) {\n      defaultLayoutOptions[\"text-font\"] = [FONT_DEFAULT_BY_STYLE[locationServiceStyle]];\n    }\n\n    const layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n    const paintOptions = {\n      \"text-color\": fontColor\n    };\n    const defaultClusterCount = {\n      id: clusterSymbolLayerId,\n      type: \"symbol\",\n      source: sourceName,\n      filter: [\"has\", \"point_count\"],\n      layout: layoutOptions,\n      paint: paintOptions\n    };\n    map.addLayer(Object.assign({}, defaultClusterCount));\n  }\n\n  return {\n    clusterLayerId,\n    clusterSymbolLayerId\n  };\n}","map":{"version":3,"sources":["/home/dalienst/node_modules/maplibre-gl-js-amplify/lib/esm/drawClusterLayer.js"],"names":["Geo","COLOR_WHITE","MARKER_COLOR","isGeoJsonSource","FONT_DEFAULT_BY_STYLE","drawClusterLayer","sourceName","map","mapStyle","fillColor","markerColor","smCircleSize","smallSize","smThreshold","smallThreshold","mdCircleSize","mediumSize","mdThreshold","mediumThreshold","lgCircleSize","largeSize","lgThreshold","largeThreshold","xlCircleSize","extraLargeSize","borderWidth","borderColor","clusterPaint","onClick","showCount","clusterCountLayout","fontColor","clusterLayerId","clusterSymbolLayerId","paintOptions","Object","assign","defaultClusterLayer","id","type","source","filter","paint","addLayer","on","e","features","queryRenderedFeatures","point","layers","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","geometry","coordinates","defaultLayoutOptions","locationServiceStyle","getDefaultMap","style","layoutOptions","defaultClusterCount","layout"],"mappings":"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","sourcesContent":["import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, { fillColor: markerColor = MARKER_COLOR, smCircleSize: smallSize = 60, smThreshold: smallThreshold = 50, mdCircleSize: mediumSize = 100, mdThreshold: mediumThreshold = 100, lgCircleSize: largeSize = 140, lgThreshold: largeThreshold = 500, xlCircleSize: extraLargeSize = 180, borderWidth = 4, borderColor = COLOR_WHITE, clusterPaint, onClick, showCount, clusterCountLayout, fontColor = COLOR_WHITE, }, mapStyle) {\n    const clusterLayerId = `${sourceName}-layer-clusters`;\n    const clusterSymbolLayerId = `${sourceName}-layer-cluster-count`;\n    // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n    const paintOptions = Object.assign({ \"circle-color\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            markerColor,\n            smallThreshold,\n            markerColor,\n            mediumThreshold,\n            markerColor,\n            largeThreshold,\n            markerColor,\n        ], \"circle-radius\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            smallSize,\n            smallThreshold,\n            mediumSize,\n            mediumThreshold,\n            largeSize,\n            largeThreshold,\n            extraLargeSize,\n        ], \"circle-stroke-width\": borderWidth, \"circle-stroke-color\": borderColor }, clusterPaint);\n    const defaultClusterLayer = {\n        id: clusterLayerId,\n        type: \"circle\",\n        source: sourceName,\n        filter: [\"has\", \"point_count\"],\n        paint: paintOptions,\n    };\n    map.addLayer(Object.assign({}, defaultClusterLayer));\n    /*\n     * Inspect cluster on click\n     */\n    map.on(\"click\", clusterLayerId, function (e) {\n        if (typeof onClick === \"function\")\n            onClick(e);\n        const features = map.queryRenderedFeatures(e.point, {\n            layers: [clusterLayerId],\n        });\n        const clusterId = features[0].properties.cluster_id;\n        const source = map.getSource(sourceName);\n        if (isGeoJsonSource(source)) {\n            source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n                if (err)\n                    return;\n                map.easeTo({\n                    center: features[0].geometry.coordinates,\n                    zoom: zoom,\n                });\n            });\n        }\n    });\n    /*\n     * Symbol Layer for cluster point count\n     */\n    if (showCount) {\n        const defaultLayoutOptions = {\n            \"text-field\": \"{point_count_abbreviated}\",\n            \"text-size\": 24,\n        };\n        const locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n        if (locationServiceStyle) {\n            defaultLayoutOptions[\"text-font\"] = [\n                FONT_DEFAULT_BY_STYLE[locationServiceStyle],\n            ];\n        }\n        const layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n        const paintOptions = {\n            \"text-color\": fontColor,\n        };\n        const defaultClusterCount = {\n            id: clusterSymbolLayerId,\n            type: \"symbol\",\n            source: sourceName,\n            filter: [\"has\", \"point_count\"],\n            layout: layoutOptions,\n            paint: paintOptions,\n        };\n        map.addLayer(Object.assign({}, defaultClusterCount));\n    }\n    return { clusterLayerId, clusterSymbolLayerId };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutEventsCommand } from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\n\nvar EventsBuffer =\n/** @class */\nfunction () {\n  function EventsBuffer(client, config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._client = client;\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n\n    this._startLoop();\n  }\n\n  EventsBuffer.prototype.push = function (event) {\n    var _a; // if the buffer is currently at the configured limit, pushing would exceed it\n\n\n    if (this._buffer.length >= this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n\n    this._buffer.push(bufferElement);\n  };\n\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n\n  EventsBuffer.prototype.updateClient = function (client) {\n    this._client = client;\n  };\n\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    } // Do not send the batch of events if\n    // the Buffer is paused or is empty or the App is not in the foreground\n    // Apps should be in the foreground since\n    // the OS may restrict access to the network in the background\n\n\n    if (this._pause || !bufferLength || !isAppInForeground()) {\n      return;\n    }\n\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n\n    var bufferSubset = this._buffer.splice(0, batchSize);\n\n    this._putEvents(bufferSubset);\n  };\n\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, command, data, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            command = new PutEventsCommand(batchEventParams);\n            return [4\n            /*yield*/\n            , this._client.send(command)];\n\n          case 2:\n            data = _a.sent();\n\n            this._processPutEventsSuccessResponse(data, eventMap);\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , this._handlePutEventsFailure(err_1, eventMap)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n          timestamp = params.timestamp,\n          config = params.config;\n      var name = event.name,\n          attributes = event.attributes,\n          metrics = event.metrics,\n          eventId = event.eventId,\n          session = event.session;\n      var appId = config.appId,\n          endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed: ', err);\n    var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n\n      this._retry(retryableEvents);\n\n      return;\n    }\n  };\n\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var Results = data.EventsResponse.Results;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          endpointId = _b[0],\n          endpointValues = _b[1];\n\n      var responses = endpointValues.EventsItemResponse;\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n\n        var _d = __read(_a, 2),\n            eventId = _d[0],\n            _e = _d[1],\n            StatusCode = _e.StatusCode,\n            Message = _e.Message;\n\n        var eventObject = eventMap[eventId]; // manually crafting handlers response to keep API consistant\n\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n\n        if (ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n\n        if (RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a; // retryable events that haven't reached the resendLimit\n\n\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n\n      var params = event.params;\n      var _b = params.event,\n          eventId = _b.eventId,\n          name = _b.name;\n\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    }); // add the events to the front of the buffer\n\n    (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n  }; // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n\n\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = __read(Object.entries(curVal), 1),\n          _b = __read(_a[0], 2),\n          key = _b[0],\n          value = _b[1];\n\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n\n  return EventsBuffer;\n}();\n\nexport default EventsBuffer;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","PutEventsCommand","isAppInForeground","logger","RETRYABLE_CODES","ACCEPTED_CODES","client","config","debug","_buffer","_client","_config","_sendBatch","bind","_startLoop","EventsBuffer","event","length","bufferSize","handlers","reject","Error","bufferElement","_a","eventId","push","_pause","_flush","_interval","clearInterval","setInterval","flushInterval","bufferLength","batchSize","Math","min","flushSize","bufferSubset","splice","_putEvents","buffer","eventMap","_bufferToMap","batchEventParams","_generateBatchEventParams","command","send","data","_processPutEventsSuccessResponse","_handlePutEventsFailure","err_1","ApplicationId","EventsRequest","BatchItem","Object","values","forEach","timestamp","attributes","metrics","session","endpointId","batchItem","appId","Endpoint","Events","EventType","name","Timestamp","Date","toISOString","Attributes","Metrics","Session","err","statusCode","$metadata","httpStatusCode","includes","retryableEvents","_retry","entries","Results","_b","endpointValues","responses","EventsItemResponse","_d","_e","StatusCode","Message","eventObject","response","EventsResponse","_c","resolve","error","eligibleEvents","params","resendLimit","unshift","apply","__spread","reduce","acc","curVal","key","value"],"sources":["/home/dalienst/node_modules/@aws-amplify/analytics/src/Providers/EventBuffer.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nimport {\n\tPutEventsResponse,\n\tEventBuffer,\n\tEventObject,\n\tEventMap,\n} from '../types';\nimport {\n\tPutEventsCommand,\n\tPutEventsCommandOutput,\n} from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\n\nconst logger = new Logger('EventsBuffer');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\n\ntype EventsBufferConfig = {\n\tbufferSize: number;\n\tflushSize: number;\n\tflushInterval: number;\n\tresendLimit: number;\n};\n\nexport default class EventsBuffer {\n\tprivate _config;\n\tprivate _client;\n\tprivate _interval;\n\tprivate _buffer: EventBuffer;\n\tprivate _pause = false;\n\tprivate _flush = false;\n\n\tconstructor(client, config: EventsBufferConfig) {\n\t\tlogger.debug('Instantiating buffer with config:', config);\n\t\tthis._buffer = [];\n\t\tthis._client = client;\n\t\tthis._config = config;\n\n\t\tthis._sendBatch = this._sendBatch.bind(this);\n\n\t\tthis._startLoop();\n\t}\n\n\tpublic push(event: EventObject) {\n\t\t// if the buffer is currently at the configured limit, pushing would exceed it\n\t\tif (this._buffer.length >= this._config.bufferSize) {\n\t\t\tlogger.debug('Exceeded analytics events buffer size');\n\t\t\treturn event.handlers.reject(\n\t\t\t\tnew Error('Exceeded the size of analytics events buffer')\n\t\t\t);\n\t\t}\n\n\t\tconst { eventId } = event.params.event;\n\t\tconst bufferElement = { [eventId]: event };\n\t\tthis._buffer.push(bufferElement);\n\t}\n\n\tpublic pause() {\n\t\tthis._pause = true;\n\t}\n\n\tpublic resume() {\n\t\tthis._pause = false;\n\t}\n\n\tpublic updateClient(client) {\n\t\tthis._client = client;\n\t}\n\n\tpublic flush() {\n\t\tthis._flush = true;\n\t}\n\n\tprivate _startLoop() {\n\t\tif (this._interval) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\tconst { flushInterval } = this._config;\n\n\t\tthis._interval = setInterval(this._sendBatch, flushInterval);\n\t}\n\n\tprivate _sendBatch() {\n\t\tconst bufferLength = this._buffer.length;\n\n\t\tif (this._flush && !bufferLength) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\t// Do not send the batch of events if\n\t\t// the Buffer is paused or is empty or the App is not in the foreground\n\t\t// Apps should be in the foreground since\n\t\t// the OS may restrict access to the network in the background\n\t\tif (this._pause || !bufferLength || !isAppInForeground()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { flushSize } = this._config;\n\n\t\tconst batchSize = Math.min(flushSize, bufferLength);\n\t\tconst bufferSubset = this._buffer.splice(0, batchSize);\n\n\t\tthis._putEvents(bufferSubset);\n\t}\n\n\tprivate async _putEvents(buffer: EventBuffer) {\n\t\tconst eventMap: EventMap = this._bufferToMap(buffer);\n\t\tconst batchEventParams = this._generateBatchEventParams(eventMap);\n\n\t\ttry {\n\t\t\tconst command: PutEventsCommand = new PutEventsCommand(batchEventParams);\n\t\t\tconst data: PutEventsCommandOutput = await this._client.send(command);\n\t\t\tthis._processPutEventsSuccessResponse(data, eventMap);\n\t\t} catch (err) {\n\t\t\treturn this._handlePutEventsFailure(err, eventMap);\n\t\t}\n\t}\n\n\tprivate _generateBatchEventParams(eventMap: EventMap) {\n\t\tconst batchEventParams = {\n\t\t\tApplicationId: '',\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\tObject.values(eventMap).forEach(item => {\n\t\t\tconst { params } = item;\n\t\t\tconst { event, timestamp, config } = params;\n\t\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\t\tconst { appId, endpointId } = config;\n\n\t\t\tconst batchItem = batchEventParams.EventsRequest.BatchItem;\n\n\t\t\tbatchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n\t\t\tif (!batchItem[endpointId]) {\n\t\t\t\tbatchItem[endpointId] = {\n\t\t\t\t\tEndpoint: {},\n\t\t\t\t\tEvents: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tbatchItem[endpointId].Events[eventId] = {\n\t\t\t\tEventType: name,\n\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\tAttributes: attributes,\n\t\t\t\tMetrics: metrics,\n\t\t\t\tSession: session,\n\t\t\t};\n\t\t});\n\n\t\treturn batchEventParams;\n\t}\n\n\tprivate _handlePutEventsFailure(err, eventMap: EventMap) {\n\t\tlogger.debug('_putEvents Failed: ', err);\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\tconst retryableEvents = Object.values(eventMap);\n\t\t\tthis._retry(retryableEvents);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate _processPutEventsSuccessResponse(\n\t\tdata: PutEventsResponse,\n\t\teventMap: EventMap\n\t) {\n\t\tconst { Results } = data.EventsResponse;\n\t\tconst retryableEvents: EventObject[] = [];\n\n\t\tObject.entries(Results).forEach(([endpointId, endpointValues]) => {\n\t\t\tconst responses = endpointValues.EventsItemResponse;\n\n\t\t\tObject.entries(responses).forEach(\n\t\t\t\t([eventId, { StatusCode, Message }]) => {\n\t\t\t\t\tconst eventObject = eventMap[eventId];\n\n\t\t\t\t\t// manually crafting handlers response to keep API consistant\n\t\t\t\t\tconst response = {\n\t\t\t\t\t\tEventsResponse: {\n\t\t\t\t\t\t\tResults: {\n\t\t\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\t\t\teventObject.handlers.resolve(response);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\t\tretryableEvents.push(eventObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { name } = eventObject.params.event;\n\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t`event ${eventId} : ${name} failed with error: ${Message}`\n\t\t\t\t\t);\n\t\t\t\t\treturn eventObject.handlers.reject(response);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tif (retryableEvents.length) {\n\t\t\tthis._retry(retryableEvents);\n\t\t}\n\t}\n\n\tprivate _retry(retryableEvents: EventObject[]) {\n\t\t// retryable events that haven't reached the resendLimit\n\t\tconst eligibleEvents: EventBuffer = [];\n\n\t\tretryableEvents.forEach((event: EventObject) => {\n\t\t\tconst { params } = event;\n\t\t\tconst { eventId, name } = params.event;\n\n\t\t\tif (params.resendLimit-- > 0) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`resending event ${eventId} : ${name} with ${params.resendLimit} retry attempts remaining`\n\t\t\t\t);\n\t\t\t\teligibleEvents.push({ [eventId]: event });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t`no retry attempts remaining for event ${eventId} : ${name}`\n\t\t\t);\n\t\t});\n\n\t\t// add the events to the front of the buffer\n\t\tthis._buffer.unshift(...eligibleEvents);\n\t}\n\n\t// convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n\t// this allows us to easily access the handlers after receiving a batch response\n\tprivate _bufferToMap(buffer: EventBuffer) {\n\t\treturn buffer.reduce((acc, curVal) => {\n\t\t\tconst [[key, value]] = Object.entries(curVal);\n\t\t\tacc[key] = value;\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
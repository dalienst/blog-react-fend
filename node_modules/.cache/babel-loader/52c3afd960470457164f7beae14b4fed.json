{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { NonRetryableError } from '../Util';\nvar logger = new Logger('CognitoCredentials');\nvar waitForInit = new Promise(function (res, rej) {\n  if (!browserOrNode().isBrowser) {\n    logger.debug('not in the browser, directly resolved');\n    return res();\n  }\n\n  var fb = window['FB'];\n\n  if (fb) {\n    logger.debug('FB SDK already loaded');\n    return res();\n  } else {\n    setTimeout(function () {\n      return res();\n    }, 2000);\n  }\n});\n\nvar FacebookOAuth =\n/** @class */\nfunction () {\n  function FacebookOAuth() {\n    this.initialized = false;\n    this.refreshFacebookToken = this.refreshFacebookToken.bind(this);\n    this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);\n  }\n\n  FacebookOAuth.prototype.refreshFacebookToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initialized) return [3\n            /*break*/\n            , 2];\n            logger.debug('need to wait for the Facebook SDK loaded');\n            return [4\n            /*yield*/\n            , waitForInit];\n\n          case 1:\n            _a.sent();\n\n            this.initialized = true;\n            logger.debug('finish waiting');\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , this._refreshFacebookTokenImpl()];\n        }\n      });\n    });\n  };\n\n  FacebookOAuth.prototype._refreshFacebookTokenImpl = function () {\n    var fb = null;\n    if (browserOrNode().isBrowser) fb = window['FB'];\n\n    if (!fb) {\n      var errorMessage = 'no fb sdk available';\n      logger.debug(errorMessage);\n      return Promise.reject(new NonRetryableError(errorMessage));\n    }\n\n    return new Promise(function (res, rej) {\n      fb.getLoginStatus(function (fbResponse) {\n        if (!fbResponse || !fbResponse.authResponse) {\n          var errorMessage = 'no response from facebook when refreshing the jwt token';\n          logger.debug(errorMessage); // There is no definitive indication for a network error in\n          // fbResponse, so we are treating it as an invalid token.\n\n          rej(new NonRetryableError(errorMessage));\n        } else {\n          var response = fbResponse.authResponse;\n          var accessToken = response.accessToken,\n              expiresIn = response.expiresIn;\n          var date = new Date();\n          var expires_at = expiresIn * 1000 + date.getTime();\n\n          if (!accessToken) {\n            var errorMessage = 'the jwtToken is undefined';\n            logger.debug(errorMessage);\n            rej(new NonRetryableError(errorMessage));\n          }\n\n          res({\n            token: accessToken,\n            expires_at: expires_at\n          });\n        }\n      }, {\n        scope: 'public_profile,email'\n      });\n    });\n  };\n\n  return FacebookOAuth;\n}();\n\nexport { FacebookOAuth };","map":{"version":3,"mappings":"gDAAA;AACA;;AACA,SAASA,aAAa,IAAIC,MAA1B,QAAwC,WAAxC;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,iBAAT,QAAkC,SAAlC;AAEA,IAAMC,MAAM,GAAG,IAAIH,MAAJ,CAAW,oBAAX,CAAf;AAEA,IAAMI,WAAW,GAAG,IAAIC,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAS;AACxC,MAAI,CAACN,aAAa,GAAGO,SAArB,EAAgC;AAC/BL,UAAM,CAACM,KAAP,CAAa,uCAAb;AACA,WAAOH,GAAG,EAAV;AACA;;AACD,MAAMI,EAAE,GAAGC,MAAM,CAAC,IAAD,CAAjB;;AACA,MAAID,EAAJ,EAAQ;AACPP,UAAM,CAACM,KAAP,CAAa,uBAAb;AACA,WAAOH,GAAG,EAAV;AACA,GAHD,MAGO;AACNM,cAAU,CAAC;AACV,aAAON,GAAG,EAAV;AACA,KAFS,EAEP,IAFO,CAAV;AAGA;AACD,CAdmB,CAApB;;AAgBA;AAAA;AAAA;AAGC;AAFO,uBAAc,KAAd;AAGN,SAAKO,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKC,yBAAL,GAAiC,KAAKA,yBAAL,CAA+BD,IAA/B,CAAoC,IAApC,CAAjC;AACA;;AAEYE,iDAAb;;;;;iBACK,CAAC,KAAKC,aAAN;AAAA;AAAA;AACHd,kBAAM,CAACM,KAAP,CAAa,0CAAb;AACA;AAAA;AAAA,cAAML,WAAN;;;AAAAc;;AACA,iBAAKD,WAAL,GAAmB,IAAnB;AACAd,kBAAM,CAACM,KAAP,CAAa,gBAAb;;;;AAGD;AAAA;AAAA,cAAO,KAAKM,yBAAL,EAAP;;;;AACA,GATY;;AAWLC,sDAAR;AACC,QAAIN,EAAE,GAAG,IAAT;AACA,QAAIT,aAAa,GAAGO,SAApB,EAA+BE,EAAE,GAAGC,MAAM,CAAC,IAAD,CAAX;;AAC/B,QAAI,CAACD,EAAL,EAAS;AACR,UAAMS,YAAY,GAAG,qBAArB;AACAhB,YAAM,CAACM,KAAP,CAAaU,YAAb;AACA,aAAOd,OAAO,CAACe,MAAR,CAAe,IAAIlB,iBAAJ,CAAsBiB,YAAtB,CAAf,CAAP;AACA;;AAED,WAAO,IAAId,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAS;AAC3BG,QAAE,CAACW,cAAH,CACC,sBAAU;AACT,YAAI,CAACC,UAAD,IAAe,CAACA,UAAU,CAACC,YAA/B,EAA6C;AAC5C,cAAMJ,YAAY,GACjB,yDADD;AAEAhB,gBAAM,CAACM,KAAP,CAAaU,YAAb,EAH4C,CAI5C;AACA;;AACAZ,aAAG,CAAC,IAAIL,iBAAJ,CAAsBiB,YAAtB,CAAD,CAAH;AACA,SAPD,MAOO;AACN,cAAMK,QAAQ,GAAGF,UAAU,CAACC,YAA5B;AACQ;AAAA,cAAaE,8BAAb;AACR,cAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,cAAMC,UAAU,GAAGH,SAAS,GAAG,IAAZ,GAAmBC,IAAI,CAACG,OAAL,EAAtC;;AACA,cAAI,CAACC,WAAL,EAAkB;AACjB,gBAAMX,YAAY,GAAG,2BAArB;AACAhB,kBAAM,CAACM,KAAP,CAAaU,YAAb;AACAZ,eAAG,CAAC,IAAIL,iBAAJ,CAAsBiB,YAAtB,CAAD,CAAH;AACA;;AACDb,aAAG,CAAC;AACHyB,iBAAK,EAAED,WADJ;AAEHF,sBAAU;AAFP,WAAD,CAAH;AAIA;AACD,OAxBF,EAyBC;AAAEI,aAAK,EAAE;AAAT,OAzBD;AA2BA,KA5BM,CAAP;AA6BA,GAtCO;;AAuCT;AAAC,CA1DD","names":["ConsoleLogger","Logger","browserOrNode","NonRetryableError","logger","waitForInit","Promise","res","rej","isBrowser","debug","fb","window","setTimeout","refreshFacebookToken","bind","_refreshFacebookTokenImpl","FacebookOAuth","initialized","_a","errorMessage","reject","getLoginStatus","fbResponse","authResponse","response","expiresIn","date","Date","expires_at","getTime","accessToken","token","scope"],"sources":["/home/dalienst/node_modules/@aws-amplify/core/src/OAuthHelper/FacebookOAuth.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { NonRetryableError } from '../Util';\n\nconst logger = new Logger('CognitoCredentials');\n\nconst waitForInit = new Promise((res, rej) => {\n\tif (!browserOrNode().isBrowser) {\n\t\tlogger.debug('not in the browser, directly resolved');\n\t\treturn res();\n\t}\n\tconst fb = window['FB'];\n\tif (fb) {\n\t\tlogger.debug('FB SDK already loaded');\n\t\treturn res();\n\t} else {\n\t\tsetTimeout(() => {\n\t\t\treturn res();\n\t\t}, 2000);\n\t}\n});\n\nexport class FacebookOAuth {\n\tpublic initialized = false;\n\n\tconstructor() {\n\t\tthis.refreshFacebookToken = this.refreshFacebookToken.bind(this);\n\t\tthis._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);\n\t}\n\n\tpublic async refreshFacebookToken() {\n\t\tif (!this.initialized) {\n\t\t\tlogger.debug('need to wait for the Facebook SDK loaded');\n\t\t\tawait waitForInit;\n\t\t\tthis.initialized = true;\n\t\t\tlogger.debug('finish waiting');\n\t\t}\n\n\t\treturn this._refreshFacebookTokenImpl();\n\t}\n\n\tprivate _refreshFacebookTokenImpl() {\n\t\tlet fb = null;\n\t\tif (browserOrNode().isBrowser) fb = window['FB'];\n\t\tif (!fb) {\n\t\t\tconst errorMessage = 'no fb sdk available';\n\t\t\tlogger.debug(errorMessage);\n\t\t\treturn Promise.reject(new NonRetryableError(errorMessage));\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tfb.getLoginStatus(\n\t\t\t\tfbResponse => {\n\t\t\t\t\tif (!fbResponse || !fbResponse.authResponse) {\n\t\t\t\t\t\tconst errorMessage =\n\t\t\t\t\t\t\t'no response from facebook when refreshing the jwt token';\n\t\t\t\t\t\tlogger.debug(errorMessage);\n\t\t\t\t\t\t// There is no definitive indication for a network error in\n\t\t\t\t\t\t// fbResponse, so we are treating it as an invalid token.\n\t\t\t\t\t\trej(new NonRetryableError(errorMessage));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst response = fbResponse.authResponse;\n\t\t\t\t\t\tconst { accessToken, expiresIn } = response;\n\t\t\t\t\t\tconst date = new Date();\n\t\t\t\t\t\tconst expires_at = expiresIn * 1000 + date.getTime();\n\t\t\t\t\t\tif (!accessToken) {\n\t\t\t\t\t\t\tconst errorMessage = 'the jwtToken is undefined';\n\t\t\t\t\t\t\tlogger.debug(errorMessage);\n\t\t\t\t\t\t\trej(new NonRetryableError(errorMessage));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tres({\n\t\t\t\t\t\t\ttoken: accessToken,\n\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ scope: 'public_profile,email' }\n\t\t\t);\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
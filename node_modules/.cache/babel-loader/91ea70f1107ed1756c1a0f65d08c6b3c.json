{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForSuggestionsCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetPlaceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand } from '@aws-sdk/client-location';\nimport { mapSearchOptions, validateGeofenceId, validateGeofencesInput } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\n\nvar AmazonLocationServiceProvider =\n/** @class */\nfunction () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n\n\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Search for suggestions based on the input text\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchForSuggestions = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForSuggestionsCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n\n          case 5:\n            results = response.Results.map(function (result) {\n              return {\n                text: result.Text,\n                placeId: result.PlaceId\n              };\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyPlaceId = function (placeId) {\n    if (placeId.length === 0) {\n      var errorString = 'PlaceId cannot be an empty string.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype.searchByPlaceId = function (placeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, searchByPlaceIdInput, command, response, error_3, place;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            this._verifyPlaceId(placeId);\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            searchByPlaceIdInput = {\n              PlaceId: placeId,\n              IndexName: (options === null || options === void 0 ? void 0 : options.searchIndexName) || this._config.search_indices.default\n            };\n            command = new GetPlaceCommand(searchByPlaceIdInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_3 = _a.sent();\n            logger.debug(error_3);\n            throw error_3;\n\n          case 5:\n            place = response.Place;\n\n            if (place) {\n              return [2\n              /*return*/\n              , camelcaseKeys(place, {\n                deep: true\n              })];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_4, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_4 = _a.sent();\n            logger.debug(error_4);\n            throw error_4;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences inside of a geofence collection\n   * @param geofences - Array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n\n\n  AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofences.length < 1) {\n              throw new Error('Geofence input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofencesInput(geofences);\n            PascalGeofences = geofences.map(function (_a) {\n              var geofenceId = _a.geofenceId,\n                  polygon = _a.geometry.polygon;\n              return {\n                GeofenceId: geofenceId,\n                Geometry: {\n                  Polygon: polygon\n                }\n              };\n            });\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceBatches = [];\n\n            while (PascalGeofences.length > 0) {\n              apiLimit = 10;\n              geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_5;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _a.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_5 = _a.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofence) {\n                        results.errors.push({\n                          geofenceId: geofence.GeofenceId,\n                          error: {\n                            code: 'APIConnectionError',\n                            message: error_5.message\n                          }\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      // Push all successes to results\n                      response.Successes.forEach(function (success) {\n                        var GeofenceId = success.GeofenceId,\n                            CreateTime = success.CreateTime,\n                            UpdateTime = success.UpdateTime;\n                        results.successes.push({\n                          geofenceId: GeofenceId,\n                          createTime: CreateTime,\n                          updateTime: UpdateTime\n                        });\n                      }); // Push all errors to results\n\n                      response.Errors.forEach(function (error) {\n                        var _a = error.Error,\n                            Code = _a.Code,\n                            Message = _a.Message,\n                            GeofenceId = error.GeofenceId;\n                        results.errors.push({\n                          error: {\n                            code: Code,\n                            message: Message\n                          },\n                          geofenceId: GeofenceId\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Get geofence from a geofence collection\n   * @param geofenceId:string\n   * @param options?: Optional parameters for getGeofence\n   * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, commandInput, command, response, error_6, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofenceId(geofenceId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            commandInput = {\n              GeofenceId: geofenceId,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new GetGeofenceCommand(commandInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_6 = _a.sent();\n            logger.debug(error_6);\n            throw error_6;\n\n          case 5:\n            GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n            geofence = {\n              createTime: CreateTime,\n              geofenceId: GeofenceId,\n              geometry: {\n                polygon: Geometry.Polygon\n              },\n              status: Status,\n              updateTime: UpdateTime\n            };\n            return [2\n            /*return*/\n            , geofence];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences from a geofence collection\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n\n\n  AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, listGeofencesInput, command, response, error_7, NextToken, Entries, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            listGeofencesInput = {\n              NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new ListGeofencesCommand(listGeofencesInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_7 = _a.sent();\n            logger.debug(error_7);\n            throw error_7;\n\n          case 5:\n            NextToken = response.NextToken, Entries = response.Entries;\n            results = {\n              entries: Entries.map(function (_a) {\n                var GeofenceId = _a.GeofenceId,\n                    CreateTime = _a.CreateTime,\n                    UpdateTime = _a.UpdateTime,\n                    Status = _a.Status,\n                    Polygon = _a.Geometry.Polygon;\n                return {\n                  geofenceId: GeofenceId,\n                  createTime: CreateTime,\n                  updateTime: UpdateTime,\n                  status: Status,\n                  geometry: {\n                    polygon: Polygon\n                  }\n                };\n              }),\n              nextToken: NextToken\n            };\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences from a geofence collection\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n\n\n  AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofenceIds.length < 1) {\n              throw new Error('GeofenceId input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n\n            badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n              try {\n                validateGeofenceId(geofenceId);\n              } catch (error) {\n                return true;\n              }\n            });\n\n            if (badGeofenceIds.length > 0) {\n              throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n            }\n\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceIdBatches = [];\n            count = 0;\n\n            while (count < geofenceIds.length) {\n              geofenceIdBatches.push(geofenceIds.slice(count, count += 10));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceIdBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_8, badGeofenceIds;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _b.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_8 = _b.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofenceId) {\n                        var errorObject = {\n                          geofenceId: geofenceId,\n                          error: {\n                            code: error_8.message,\n                            message: error_8.message\n                          }\n                        };\n                        results.errors.push(errorObject);\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      badGeofenceIds = response.Errors.map(function (_a) {\n                        var geofenceId = _a.geofenceId;\n                        return geofenceId;\n                      });\n\n                      (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) {\n                        return !badGeofenceIds.includes(Id);\n                      })));\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_9;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            error_9 = _a.sent();\n            logger.debug('Ensure credentials error. Credentials are:', error_9);\n            return [2\n            /*return*/\n            , false];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n    if ((!this._config.geofenceCollections || !this._config.geofenceCollections.default) && !optionalGeofenceCollectionName) {\n      var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var geofenceInput, client, command, response, error_10;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            geofenceInput = {\n              Entries: PascalGeofences,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchPutGeofenceCommand(geofenceInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_10 = _a.sent();\n            throw error_10;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteGeofencesInput, client, command, response, error_11;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteGeofencesInput = {\n              GeofenceIds: geofenceIds,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_11 = _a.sent();\n            throw error_11;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\n\nexport { AmazonLocationServiceProvider };","map":{"version":3,"mappings":"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","names":["camelcaseKeys","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","LocationClient","SearchPlaceIndexForTextCommand","SearchPlaceIndexForSuggestionsCommand","SearchPlaceIndexForPositionCommand","BatchPutGeofenceCommand","GetPlaceCommand","GetGeofenceCommand","ListGeofencesCommand","BatchDeleteGeofenceCommand","mapSearchOptions","validateGeofenceId","validateGeofencesInput","logger","config","_config","debug","AmazonLocationServiceProvider","CATEGORY","PROVIDER_NAME","Object","assign","_verifyMapResources","mapStyles","availableMaps","maps","items","region","mapName","style","push","default","text","options","_ensureCredentials","credentialsOK","_a","Error","_verifySearchIndex","searchIndexName","locationServiceInput","Text","IndexName","search_indices","client","credentials","customUserAgent","command","send","response","error_1","PascalResults","Results","map","Place","results","deep","error_2","result","placeId","PlaceId","length","errorString","_verifyPlaceId","searchByPlaceIdInput","error_3","place","coordinates","Position","MaxResults","maxResults","error_4","geofences","_verifyGeofenceCollections","collectionName","error","PascalGeofences","geofenceId","polygon","GeofenceId","Geometry","Polygon","successes","errors","geofenceBatches","apiLimit","splice","Promise","all","batch","_AmazonLocationServiceBatchPutGeofenceCall","geofenceCollections","forEach","geofence","code","message","error_5","Successes","CreateTime","UpdateTime","createTime","updateTime","Errors","Code","Message","commandInput","CollectionName","error_6","Status","geometry","status","listGeofencesInput","NextToken","nextToken","error_7","Entries","entries","geofenceIds","badGeofenceIds","filter","join","geofenceIdBatches","count","slice","_AmazonLocationServiceBatchDeleteGeofenceCall","_b","errorObject","error_8","apply","__spread","includes","Id","get","cred","shear","error_9","optionalSearchIndex","optionalGeofenceCollectionName","geofenceInput","error_10","deleteGeofencesInput","GeofenceIds","error_11"],"sources":["/home/dalienst/node_modules/@aws-amplify/geo/src/Providers/AmazonLocationServiceProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport camelcaseKeys from 'camelcase-keys';\n\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tPlace as PlaceResult,\n\tLocationClient,\n\tSearchPlaceIndexForTextCommand,\n\tSearchPlaceIndexForTextCommandInput,\n\tSearchPlaceIndexForSuggestionsCommand,\n\tSearchPlaceIndexForSuggestionsCommandInput,\n\tSearchPlaceIndexForPositionCommand,\n\tSearchPlaceIndexForPositionCommandInput,\n\tBatchPutGeofenceCommand,\n\tBatchPutGeofenceCommandInput,\n\tBatchPutGeofenceRequestEntry,\n\tBatchPutGeofenceCommandOutput,\n\tGetPlaceCommand,\n\tGetPlaceCommandInput,\n\tGetPlaceCommandOutput,\n\tGetGeofenceCommand,\n\tGetGeofenceCommandInput,\n\tGetGeofenceCommandOutput,\n\tListGeofencesCommand,\n\tListGeofencesCommandInput,\n\tListGeofencesCommandOutput,\n\tBatchDeleteGeofenceCommand,\n\tBatchDeleteGeofenceCommandInput,\n\tBatchDeleteGeofenceCommandOutput,\n} from '@aws-sdk/client-location';\n\nimport {\n\tmapSearchOptions,\n\tvalidateGeofenceId,\n\tvalidateGeofencesInput,\n} from '../util';\n\nimport {\n\tGeoConfig,\n\tSearchByTextOptions,\n\tSearchByCoordinatesOptions,\n\tGeoProvider,\n\tPlace,\n\tAmazonLocationServiceMapStyle,\n\tCoordinates,\n\tSearchForSuggestionsResults,\n\tGeofenceId,\n\tGeofenceInput,\n\tAmazonLocationServiceGeofenceOptions,\n\tAmazonLocationServiceListGeofenceOptions,\n\tListGeofenceResults,\n\tAmazonLocationServiceGeofenceStatus,\n\tSaveGeofencesResults,\n\tAmazonLocationServiceGeofence,\n\tGeofencePolygon,\n\tAmazonLocationServiceDeleteGeofencesResults,\n\tsearchByPlaceIdOptions,\n} from '../types';\n\nconst logger = new Logger('AmazonLocationServiceProvider');\n\nexport class AmazonLocationServiceProvider implements GeoProvider {\n\tstatic CATEGORY = 'Geo';\n\tstatic PROVIDER_NAME = 'AmazonLocationService';\n\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\n\t/**\n\t * Initialize Geo with AWS configurations\n\t * @param {Object} config - Configuration object for Geo\n\t */\n\tconstructor(config?: GeoConfig) {\n\t\tthis._config = config ? config : {};\n\t\tlogger.debug('Geo Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t * @returns {string} name of the category\n\t */\n\tpublic getCategory(): string {\n\t\treturn AmazonLocationServiceProvider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t * @returns {string} name of the provider\n\t */\n\tpublic getProviderName(): string {\n\t\treturn AmazonLocationServiceProvider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Geo part with aws configuration\n\t * @param {Object} config - Configuration of the Geo\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Amazon Location Service Provider', config);\n\t\tif (!config) return this._config;\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get the map resources that are currently available through the provider\n\t * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n\t */\n\tpublic getAvailableMaps(): AmazonLocationServiceMapStyle[] {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapStyles: AmazonLocationServiceMapStyle[] = [];\n\t\tconst availableMaps = this._config.maps.items;\n\t\tconst region = this._config.region;\n\n\t\tfor (const mapName in availableMaps) {\n\t\t\tconst style = availableMaps[mapName].style;\n\t\t\tmapStyles.push({ mapName, style, region });\n\t\t}\n\n\t\treturn mapStyles;\n\t}\n\n\t/**\n\t * Get the map resource set as default in amplify config\n\t * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n\t */\n\tpublic getDefaultMap(): AmazonLocationServiceMapStyle {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapName = this._config.maps.default;\n\t\tconst style = this._config.maps.items[mapName].style;\n\t\tconst region = this._config.region;\n\n\t\treturn { mapName, style, region };\n\t}\n\n\t/**\n\t * Search by text input with optional parameters\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n\t */\n\tpublic async searchByText(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<Place[]> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\t/**\n\t\t * Setup the searchInput\n\t\t */\n\t\tlet locationServiceInput: SearchPlaceIndexForTextCommandInput = {\n\t\t\tText: text,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\t/**\n\t\t * Map search options to Amazon Location Service input object\n\t\t */\n\t\tif (options) {\n\t\t\tlocationServiceInput = {\n\t\t\t\t...locationServiceInput,\n\t\t\t\t...mapSearchOptions(options, locationServiceInput),\n\t\t\t};\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array of objects with a single `Place` item,\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults: PlaceResult[] = response.Results.map(\n\t\t\tresult => result.Place\n\t\t);\n\t\tconst results: Place[] = camelcaseKeys(PascalResults, {\n\t\t\tdeep: true,\n\t\t}) as undefined as Place[];\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Search for suggestions based on the input text\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n\t */\n\n\tpublic async searchForSuggestions(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<SearchForSuggestionsResults> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\t/**\n\t\t * Setup the searchInput\n\t\t */\n\t\tlet locationServiceInput: SearchPlaceIndexForSuggestionsCommandInput = {\n\t\t\tText: text,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\t/**\n\t\t * Map search options to Amazon Location Service input object\n\t\t */\n\t\tif (options) {\n\t\t\tlocationServiceInput = {\n\t\t\t\t...locationServiceInput,\n\t\t\t\t...mapSearchOptions(options, locationServiceInput),\n\t\t\t};\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForSuggestionsCommand(\n\t\t\tlocationServiceInput\n\t\t);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array of objects with `Text` and `PlaceId`.\n\t\t */\n\t\tconst results = response.Results.map(result => ({\n\t\t\ttext: result.Text,\n\t\t\tplaceId: result.PlaceId,\n\t\t}));\n\n\t\treturn results;\n\t}\n\n\tprivate _verifyPlaceId(placeId: string) {\n\t\tif (placeId.length === 0) {\n\t\t\tconst errorString = 'PlaceId cannot be an empty string.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tpublic async searchByPlaceId(\n\t\tplaceId: string,\n\t\toptions?: searchByPlaceIdOptions\n\t): Promise<Place | undefined> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\t\tthis._verifyPlaceId(placeId);\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tconst searchByPlaceIdInput: GetPlaceCommandInput = {\n\t\t\tPlaceId: placeId,\n\t\t\tIndexName:\n\t\t\t\toptions?.searchIndexName || this._config.search_indices.default,\n\t\t};\n\t\tconst command = new GetPlaceCommand(searchByPlaceIdInput);\n\n\t\tlet response: GetPlaceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tconst place: PlaceResult | undefined = response.Place;\n\n\t\tif (place) {\n\t\t\treturn camelcaseKeys(place, { deep: true }) as unknown as Place;\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * Reverse geocoding search via a coordinate point on the map\n\t * @param coordinates - Coordinates array for the search input\n\t * @param options - Options parameters for the search\n\t * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n\t */\n\tpublic async searchByCoordinates(\n\t\tcoordinates: Coordinates,\n\t\toptions?: SearchByCoordinatesOptions\n\t): Promise<Place> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\tconst locationServiceInput: SearchPlaceIndexForPositionCommandInput = {\n\t\t\tPosition: coordinates,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\tif (options) {\n\t\t\tif (options.searchIndexName) {\n\t\t\t\tlocationServiceInput.IndexName = options.searchIndexName;\n\t\t\t}\n\t\t\tlocationServiceInput.MaxResults = options.maxResults;\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForPositionCommand(\n\t\t\tlocationServiceInput\n\t\t);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array with a single `Place` object\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults = response.Results.map(result => result.Place);\n\t\tconst results: Place = camelcaseKeys(PascalResults[0], {\n\t\t\tdeep: true,\n\t\t}) as any as Place;\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Create geofences inside of a geofence collection\n\t * @param geofences - Array of geofence objects to create\n\t * @param options? - Optional parameters for creating geofences\n\t * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n\t *   successes: list of geofences successfully created\n\t *   errors: list of geofences that failed to create\n\t */\n\tpublic async saveGeofences(\n\t\tgeofences: GeofenceInput[],\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<SaveGeofencesResults> {\n\t\tif (geofences.length < 1) {\n\t\t\tthrow new Error('Geofence input array is empty');\n\t\t}\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvalidateGeofencesInput(geofences);\n\n\t\t// Convert geofences to PascalCase for Amazon Location Service format\n\t\tconst PascalGeofences: BatchPutGeofenceRequestEntry[] = geofences.map(\n\t\t\t({ geofenceId, geometry: { polygon } }) => {\n\t\t\t\treturn {\n\t\t\t\t\tGeofenceId: geofenceId,\n\t\t\t\t\tGeometry: {\n\t\t\t\t\t\tPolygon: polygon,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t\tconst results: SaveGeofencesResults = {\n\t\t\tsuccesses: [],\n\t\t\terrors: [],\n\t\t};\n\n\t\tconst geofenceBatches: BatchPutGeofenceRequestEntry[][] = [];\n\n\t\twhile (PascalGeofences.length > 0) {\n\t\t\t// Splice off 10 geofences from input clone due to Amazon Location Service API limit\n\t\t\tconst apiLimit = 10;\n\t\t\tgeofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tgeofenceBatches.map(async batch => {\n\t\t\t\t// Make API call for the 10 geofences\n\t\t\t\tlet response: BatchPutGeofenceCommandOutput;\n\t\t\t\ttry {\n\t\t\t\t\tresponse = await this._AmazonLocationServiceBatchPutGeofenceCall(\n\t\t\t\t\t\tbatch,\n\t\t\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// If the API call fails, add the geofences to the errors array and move to next batch\n\t\t\t\t\tbatch.forEach(geofence => {\n\t\t\t\t\t\tresults.errors.push({\n\t\t\t\t\t\t\tgeofenceId: geofence.GeofenceId,\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: 'APIConnectionError',\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Push all successes to results\n\t\t\t\tresponse.Successes.forEach(success => {\n\t\t\t\t\tconst { GeofenceId, CreateTime, UpdateTime } = success;\n\t\t\t\t\tresults.successes.push({\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t\tcreateTime: CreateTime,\n\t\t\t\t\t\tupdateTime: UpdateTime,\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// Push all errors to results\n\t\t\t\tresponse.Errors.forEach(error => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tError: { Code, Message },\n\t\t\t\t\t\tGeofenceId,\n\t\t\t\t\t} = error;\n\t\t\t\t\tresults.errors.push({\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tcode: Code,\n\t\t\t\t\t\t\tmessage: Message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Get geofence from a geofence collection\n\t * @param geofenceId:string\n\t * @param options?: Optional parameters for getGeofence\n\t * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n\t */\n\tpublic async getGeofence(\n\t\tgeofenceId: GeofenceId,\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<AmazonLocationServiceGeofence> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvalidateGeofenceId(geofenceId);\n\n\t\t// Create Amazon Location Service Client\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t// Create Amazon Location Service command\n\t\tconst commandInput: GetGeofenceCommandInput = {\n\t\t\tGeofenceId: geofenceId,\n\t\t\tCollectionName:\n\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default,\n\t\t};\n\t\tconst command = new GetGeofenceCommand(commandInput);\n\n\t\t// Make API call\n\t\tlet response: GetGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Convert response to camelCase for return\n\t\tconst { GeofenceId, CreateTime, UpdateTime, Status, Geometry } = response;\n\t\tconst geofence: AmazonLocationServiceGeofence = {\n\t\t\tcreateTime: CreateTime,\n\t\t\tgeofenceId: GeofenceId,\n\t\t\tgeometry: {\n\t\t\t\tpolygon: Geometry.Polygon as GeofencePolygon,\n\t\t\t},\n\t\t\tstatus: Status as AmazonLocationServiceGeofenceStatus,\n\t\t\tupdateTime: UpdateTime,\n\t\t};\n\n\t\treturn geofence;\n\t}\n\n\t/**\n\t * List geofences from a geofence collection\n\t * @param  options?: ListGeofenceOptions\n\t * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n\t *   entries: list of geofences - 100 geofences are listed per page\n\t *   nextToken: token for next page of geofences\n\t */\n\tpublic async listGeofences(\n\t\toptions?: AmazonLocationServiceListGeofenceOptions\n\t): Promise<ListGeofenceResults> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Create Amazon Location Service Client\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t// Create Amazon Location Service input\n\t\tconst listGeofencesInput: ListGeofencesCommandInput = {\n\t\t\tNextToken: options?.nextToken,\n\t\t\tCollectionName:\n\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\t// Create Amazon Location Service command\n\t\tconst command: ListGeofencesCommand = new ListGeofencesCommand(\n\t\t\tlistGeofencesInput\n\t\t);\n\n\t\t// Make API call\n\t\tlet response: ListGeofencesCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Convert response to camelCase for return\n\t\tconst { NextToken, Entries } = response;\n\n\t\tconst results: ListGeofenceResults = {\n\t\t\tentries: Entries.map(\n\t\t\t\t({\n\t\t\t\t\tGeofenceId,\n\t\t\t\t\tCreateTime,\n\t\t\t\t\tUpdateTime,\n\t\t\t\t\tStatus,\n\t\t\t\t\tGeometry: { Polygon },\n\t\t\t\t}) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t\tcreateTime: CreateTime,\n\t\t\t\t\t\tupdateTime: UpdateTime,\n\t\t\t\t\t\tstatus: Status,\n\t\t\t\t\t\tgeometry: {\n\t\t\t\t\t\t\tpolygon: Polygon as GeofencePolygon,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t),\n\t\t\tnextToken: NextToken,\n\t\t};\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Delete geofences from a geofence collection\n\t * @param geofenceIds: string|string[]\n\t * @param options?: GeofenceOptions\n\t * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n\t *  successes: list of geofences successfully deleted\n\t *  errors: list of geofences that failed to delete\n\t */\n\tpublic async deleteGeofences(\n\t\tgeofenceIds: string[],\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<AmazonLocationServiceDeleteGeofencesResults> {\n\t\tif (geofenceIds.length < 1) {\n\t\t\tthrow new Error('GeofenceId input array is empty');\n\t\t}\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\n\t\t// Validate all geofenceIds are valid\n\t\tconst badGeofenceIds = geofenceIds.filter(geofenceId => {\n\t\t\ttry {\n\t\t\t\tvalidateGeofenceId(geofenceId);\n\t\t\t} catch (error) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tif (badGeofenceIds.length > 0) {\n\t\t\tthrow new Error(`Invalid geofence ids: ${badGeofenceIds.join(', ')}`);\n\t\t}\n\n\t\tconst results: AmazonLocationServiceDeleteGeofencesResults = {\n\t\t\tsuccesses: [],\n\t\t\terrors: [],\n\t\t};\n\n\t\tconst geofenceIdBatches: string[][] = [];\n\n\t\tlet count = 0;\n\t\twhile (count < geofenceIds.length) {\n\t\t\tgeofenceIdBatches.push(geofenceIds.slice(count, (count += 10)));\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tgeofenceIdBatches.map(async batch => {\n\t\t\t\tlet response;\n\t\t\t\ttry {\n\t\t\t\t\tresponse = await this._AmazonLocationServiceBatchDeleteGeofenceCall(\n\t\t\t\t\t\tbatch,\n\t\t\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// If the API call fails, add the geofences to the errors array and move to next batch\n\t\t\t\t\tbatch.forEach(geofenceId => {\n\t\t\t\t\t\tconst errorObject = {\n\t\t\t\t\t\t\tgeofenceId,\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: error.message,\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresults.errors.push(errorObject);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst badGeofenceIds = response.Errors.map(\n\t\t\t\t\t({ geofenceId }) => geofenceId\n\t\t\t\t);\n\t\t\t\tresults.successes.push(\n\t\t\t\t\t...batch.filter(Id => !badGeofenceIds.includes(Id))\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t\treturn results;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('Set credentials for storage. Credentials are:', cred);\n\t\t\tthis._config.credentials = cred;\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.debug('Ensure credentials error. Credentials are:', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _verifyMapResources() {\n\t\tif (!this._config.maps) {\n\t\t\tconst errorString =\n\t\t\t\t\"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t\tif (!this._config.maps.default) {\n\t\t\tconst errorString =\n\t\t\t\t\"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate _verifySearchIndex(optionalSearchIndex?: string) {\n\t\tif (\n\t\t\t(!this._config.search_indices || !this._config.search_indices.default) &&\n\t\t\t!optionalSearchIndex\n\t\t) {\n\t\t\tconst errorString =\n\t\t\t\t'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate _verifyGeofenceCollections(optionalGeofenceCollectionName?: string) {\n\t\tif (\n\t\t\t(!this._config.geofenceCollections ||\n\t\t\t\t!this._config.geofenceCollections.default) &&\n\t\t\t!optionalGeofenceCollectionName\n\t\t) {\n\t\t\tconst errorString =\n\t\t\t\t'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate async _AmazonLocationServiceBatchPutGeofenceCall(\n\t\tPascalGeofences: BatchPutGeofenceRequestEntry[],\n\t\tcollectionName?: string\n\t) {\n\t\t// Create the BatchPutGeofence input\n\t\tconst geofenceInput: BatchPutGeofenceCommandInput = {\n\t\t\tEntries: PascalGeofences,\n\t\t\tCollectionName:\n\t\t\t\tcollectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new BatchPutGeofenceCommand(geofenceInput);\n\n\t\tlet response: BatchPutGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate async _AmazonLocationServiceBatchDeleteGeofenceCall(\n\t\tgeofenceIds: string[],\n\t\tcollectionName?: string\n\t): Promise<BatchDeleteGeofenceCommandOutput> {\n\t\t// Create the BatchDeleteGeofence input\n\t\tconst deleteGeofencesInput: BatchDeleteGeofenceCommandInput = {\n\t\t\tGeofenceIds: geofenceIds,\n\t\t\tCollectionName:\n\t\t\t\tcollectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n\n\t\tlet response: BatchDeleteGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\treturn response;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}